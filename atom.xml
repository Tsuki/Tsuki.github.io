<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ツカツキ アリス</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sukitsuki.com/"/>
  <updated>2018-12-18T07:34:52.135Z</updated>
  <id>https://blog.sukitsuki.com/</id>
  
  <author>
    <name>調月有栖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Angular動態加載html</title>
    <link href="https://blog.sukitsuki.com/2018/12/17/%E5%9C%A8Angular%E5%8B%95%E6%85%8B%E5%8A%A0%E8%BC%89html/"/>
    <id>https://blog.sukitsuki.com/2018/12/17/在Angular動態加載html/</id>
    <published>2018-12-17T19:21:15.000Z</published>
    <updated>2018-12-18T07:34:52.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原生靜態-HTML"><a href="#原生靜態-HTML" class="headerlink" title="原生靜態 HTML"></a>原生靜態 HTML</h3><p>使用 <code>innerHtml</code> 直接取代原生 element.</p><p>但如果 HTML 內有 inline style 或 sciprt, 這就需要 <code>DomSanitizer</code> 進行 <code>bypassSecurityTrustHtml</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Pipe, PipeTransform&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;DomSanitizer&#125; <span class="keyword">from</span> <span class="string">"@angular/platform-browser"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  name: <span class="string">'safeHtml'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SafeHtmlPipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> sanitizer: DomSanitizer</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  transform(value: <span class="built_in">any</span>, args?: <span class="built_in">any</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sanitizer.bypassSecurityTrustHtml(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">innerHtml</span>]=<span class="string">"post.content|safeHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="非原生-HTML"><a href="#非原生-HTML" class="headerlink" title="非原生 HTML"></a>非原生 HTML</h3><p>首先，建立 helper function，以幫助構建 <code>Component</code> 和 <code>Module</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compileToComponent</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Component(&#123;template&#125;)(<span class="keyword">class</span> &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compileToModule</span>(<span class="params">declarations, imports?</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> NgModule(&#123;declarations, imports&#125;)(<span class="keyword">class</span> &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之後使用 <code>ViewChild</code> 綁定 <code>ng-template</code> ，最後在 <code>ngAfterViewInit</code> 使用 JITcompile 進行實時編譯並在生成組件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostBodyComponent <span class="keyword">implements</span> OnInit, AfterViewInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">'container'</span>, &#123;read: ViewContainerRef&#125;)</span><br><span class="line">  container: ViewContainerRef;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> compiler: Compiler</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmpComponent = compileToComponent(<span class="keyword">this</span>.post.content);</span><br><span class="line">    <span class="keyword">const</span> tmpModule = compileToModule([tmpComponent], [AppModule]);</span><br><span class="line">    <span class="keyword">this</span>.compiler.compileModuleAndAllComponentsAsync(tmpModule).then(</span><br><span class="line">      (factories) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> factory = factories.componentFactories.find(<span class="function"><span class="params">f</span> =&gt;</span> f.componentType === tmpComponent);</span><br><span class="line">        <span class="keyword">this</span>.container.createComponent(factory);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由於 Angular 4 之後 AoT 和 Jit 不能並存，所以需要在 <code>angular.json</code> 關閉 aot 和 buildOptimizer。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"configurations": &#123;</span><br><span class="line">  "production": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "aot": false,</span><br><span class="line">    "buildOptimizer": false,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原生靜態-HTML&quot;&gt;&lt;a href=&quot;#原生靜態-HTML&quot; class=&quot;headerlink&quot; title=&quot;原生靜態 HTML&quot;&gt;&lt;/a&gt;原生靜態 HTML&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;innerHtml&lt;/code&gt; 直接取代原生 element.&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PSV變革</title>
    <link href="https://blog.sukitsuki.com/2018/12/17/PSV%E8%AE%8A%E9%9D%A9/"/>
    <id>https://blog.sukitsuki.com/2018/12/17/PSV變革/</id>
    <published>2018-12-17T10:48:17.000Z</published>
    <updated>2018-12-17T05:31:42.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Make-PSV-great-again"><a href="#Make-PSV-great-again" class="headerlink" title="Make PSV great again"></a>Make PSV great again</h1><p>HENkaku (變革) 令 PSV 如同 PSP 時代一樣強大起來。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>一台 PSV，如果是 PSV 1000 需要額外的 Sony 記憶卡（因為 1000 沒有內部儲存空間</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>由於變革不是永久性/固化的漏洞（），因此只支持版本 3.65 ~ 3.68 ，如果己升級到 3.69 下文就不再適用。</p><p>如果版本在 3.65 以下，可以使用修改 DNS 方法更新，比如 <code>23.96.6.207</code> ，修改之後更新包會變成 <code>3.65 (変革 Compatible)</code> 。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="Windows-用戶"><a href="#Windows-用戶" class="headerlink" title="Windows 用戶"></a>Windows 用戶</h3><p>如果使用 Windows 安裝，只需要下載 <a href="https://github.com/noahc3/auto-h-encore" target="_blank" rel="noopener">auto h-encore</a> 就可以完成大部分前置準備工作，自動下載 QCMA，DEOM，解包，修改包內容，重新打包等工作。</p><p>打開 auto h-encore 只需要點 start 等待下載完成所需工具後，會提示安裝 QCMA，建意便用 USB 驅動安裝。</p><p>安裝好 QCMA 後，會自動進行置換DEOM包的工具，完成之後打開 OCMA 工具 並接上 PSV USB到電腦。</p><p>其後在 PSV 打開內容管理，選 USB 傳輸，再記 PC 到 PSV，最後把打包好的 h-encore 傳到PSV上。</p><h3 id="macOS-Linux-用戶"><a href="#macOS-Linux-用戶" class="headerlink" title="macOS/Linux 用戶"></a>macOS/Linux 用戶</h3><p>使用 <a href="https://github.com/soarqin/finalhe" target="_blank" rel="noopener">finalhe</a> ，因為沒使用過，就不詳細說了。</p><h2 id="變革"><a href="#變革" class="headerlink" title="變革"></a>變革</h2><p>在 Live Area 下打開 H-encore，進入 bootstrap menu, 之後在菜單上選擇 Install HENkaku。</p><p>完成之後，強烈建意安裝，選擇 <code>Download VitaShell</code>（需要WI-FI連網），因為很多情況下都需要使用上。</p><p>最後，回到 <code>Exit</code> 退回 Live Area，之後打開設定，菜單上會多了一項 HENkaku 設置，進入後啟動 <strong>啟動不安全自制軟件</strong>。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/TheOfficialFloW/NoNpDrm/releases" target="_blank" rel="noopener">NoNpDrm</a> <em>(允許使用已加密的遊戲及應用程式)</em></li><li><a href="https://github.com/Applelo/SwitchSD2Vita/releases" target="_blank" rel="noopener">SwitchSD2Vita</a> <em>(使用 sd2vita 卡帶代替Sony 記憶卡)</em></li><li><a href="https://github.com/blastrock/pkgj/releases" target="_blank" rel="noopener">PKGj</a> <em>(提供網上下載 PSV PSP PSX PSM遊戲/ PSV DLC功能)</em></li><li><a href="https://github.com/ONElua/AccountManager/releases" target="_blank" rel="noopener">AccountManager</a> (提供備分轉換 PSV 內的 PSN 功能)</li></ul><p>以上除了 NoNpDrm 都是使用 vpk 格式安裝，只需要在 VITAShell 下點選安裝就可以。</p><h3 id="NoNpDrm"><a href="#NoNpDrm" class="headerlink" title="NoNpDrm"></a>NoNpDrm</h3><p>NoNpDrm安裝，需要在 VITAShell 下打開並修改 <code>ux0:tai/config.txt</code> ，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*KERNEL</span><br><span class="line">ux0:tai/nonpdrm.skprx</span><br></pre></td></tr></table></figure><p>之後保存重啟 PSV，再重新進了 h-encore，之後 Exit, 不需要再選擇 <code>Install HENkaku</code></p><p>###AccountManager</p><p>轉換帳號前，盡可能先保存當前帳號 ，之到 <code>HENkaku 設置</code> 解除記憶卡/內存綁定，或使用 <code>VITAShell</code> 在 ur0 或 uma0 下刪除 id.dat。不然換轉帳號後不能讀取記憶卡/內存上的 H-encore 引導。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Make-PSV-great-again&quot;&gt;&lt;a href=&quot;#Make-PSV-great-again&quot; class=&quot;headerlink&quot; title=&quot;Make PSV great again&quot;&gt;&lt;/a&gt;Make PSV great again&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular-起動時加入Async和defer</title>
    <link href="https://blog.sukitsuki.com/2018/12/15/Angular-%E8%B5%B7%E5%8B%95%E6%99%82%E5%8A%A0%E5%85%A5async%E5%92%8Cdefer/"/>
    <id>https://blog.sukitsuki.com/2018/12/15/Angular-起動時加入async和defer/</id>
    <published>2018-12-15T13:40:11.000Z</published>
    <updated>2018-12-18T07:34:52.135Z</updated>
    
    <content type="html"><![CDATA[<p>首先，在 Angular 不 Eject 的情況下，使用其他的 Webpack plugin，這樣需要引入 ngx-build-plus。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ngx-build-plus</span><br></pre></td></tr></table></figure><p>之後在 angular.json 替換 angular-cli 本來的引導指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="string">"architect"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: &#123;</span><br><span class="line">      <span class="string">"builder"</span>: <span class="string">"ngx-build-plus:build"</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">"serve"</span>: &#123;</span><br><span class="line">       <span class="string">"builder"</span>: <span class="string">"ngx-build-plus:dev-server"</span>,</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>別外，在目錄下加入額外的 Webpack 配置文件 <code>webpack.extra.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ScriptExtHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'script-ext-html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> METADATA = &#123;</span><br><span class="line">  baseUrl: <span class="string">'/'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'src/index.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'styles'</span>, <span class="string">'runtime'</span>, <span class="string">'polyfills'</span>, <span class="string">'main'</span>],</span><br><span class="line">      chunksSortMode: <span class="string">'manual'</span>,</span><br><span class="line">      metadata: METADATA,</span><br><span class="line">      inject: <span class="string">'head'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ScriptExtHtmlWebpackPlugin(&#123;</span><br><span class="line">      defaultAttribute: <span class="string">'defer'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>~~ 由於 Angular 的 <code>zone.js</code> 需要比其他的 js 先載入，所以 polyfills 使用 <code>async</code>，而其他使用 <code>defer</code></p><p>這樣配置就可以把 <code>polyfills.js</code> 以外的 script 都加上 <code>defer</code> 屬性。~~</p><p>把 <code>chunksSortMode</code> 改成 manual, 這樣就會按 <code>chunks</code> 的排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"ng build --prod --extraWebpackConfig webpack.extra.js"</span>,</span><br><span class="line">...</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最後修改 <code>package.json</code> 的 <code>build</code></p><p><a href="https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/build_angular/src/angular-cli-files/plugins/index-html-webpack-plugin.ts" target="_blank" rel="noopener">Angular 官方配置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，在 Angular 不 Eject 的情況下，使用其他的 Webpack plugin，這樣需要引入 ngx-build-plus。&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.sukitsuki.com/2018/12/10/%E4%B8%BB%E9%A1%8C%E9%81%B7%E7%A7%BB%E5%88%B0-Angular-%E9%80%B2%E5%BA%A6/"/>
    <id>https://blog.sukitsuki.com/2018/12/10/主題遷移到-Angular-進度/</id>
    <published>2018-12-10T16:27:32.000Z</published>
    <updated>2018-12-17T13:10:52.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安格拉絲-Angular"><a href="#安格拉絲-Angular" class="headerlink" title="安格拉絲 / Angular"></a>安格拉絲 / Angular</h1><blockquote><p>大紮好，我系 <a href="https://github.com/Tsuki/" target="_blank" rel="noopener">Tsuki</a>，安格拉絲，介四里沒有挽過的船新版本，擠需體驗三番鍾，里造會幹我一樣，愛象節款框架。</p></blockquote><p>進度</p><ul><li style="list-style:none"><input type="checkbox" checked> Header (完成)</li><li style="list-style:none"><input type="checkbox" checked> Pages (完成)</li><li style="list-style:none"><input type="checkbox" checked> Article (完成)</li><li style="list-style:none"><input type="checkbox" checked> Header 動畫 (完成)</li><li style="list-style:none"><input type="checkbox" checked> Pages 動畫 (完成)</li><li style="list-style:none"><input type="checkbox" checked> Footer (完成)</li><li style="list-style:none"><input type="checkbox" checked> Article 前後頁</li><li style="list-style:none"><input type="checkbox" checked> Markdown Todo-list</li><li style="list-style:none"><input type="checkbox" checked> Post page</li><li style="list-style:none"><input type="checkbox"> mobile</li><li style="list-style:none"><input type="checkbox"> Cate/Tag/Archive</li><li style="list-style:none"><input type="checkbox"> Side menu</li><li style="list-style:none"><input type="checkbox"> APlayer</li><li style="list-style:none"><input type="checkbox"> 優化 moment.js</li><li style="list-style:none"><input type="checkbox"> 動態注入配置</li><li style="list-style:none"><input type="checkbox"> 評論數</li><li style="list-style:none"><input type="checkbox"> FancyBox 效果</li><li style="list-style:none"><input type="checkbox"> Article 置頂跑馬燈</li><li style="list-style:none"><input type="checkbox"> Badge count</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安格拉絲-Angular&quot;&gt;&lt;a href=&quot;#安格拉絲-Angular&quot; class=&quot;headerlink&quot; title=&quot;安格拉絲 / Angular&quot;&gt;&lt;/a&gt;安格拉絲 / Angular&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;大紮好，我系 &lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何把頁眉(Header)置頂</title>
    <link href="https://blog.sukitsuki.com/2018/11/29/%E5%A6%82%E4%BD%95%E6%8A%8A%E9%A0%81%E7%9C%89-header-%E7%BD%AE%E9%A0%82/"/>
    <id>https://blog.sukitsuki.com/2018/11/29/如何把頁眉-header-置頂/</id>
    <published>2018-11-29T14:59:03.000Z</published>
    <updated>2018-11-29T08:23:17.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方案一：兼容IE"><a href="#方案一：兼容IE" class="headerlink" title="方案一：兼容IE"></a>方案一：兼容IE</h3><p>這個方案並不完美，position: fixed 太多坑，如果有有別一個 position: fixed 會出現奇怪的問題。</p><p>現在頁面改成下面的方案二，雖然不支持IE，但減少了JS 代碼，而且css 代碼更清𥇦。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sticky</span> + <span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">92px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br><span class="line" data-line-number="11"></span><br><span class="line" data-line-number="12"></span><br><span class="line" data-line-number="13"></span><br><span class="line" data-line-number="14"></span><br><span class="line" data-line-number="15"></span><br><span class="line" data-line-number="16"></span><br><span class="line" data-line-number="17"></span><br><span class="line" data-line-number="18"></span><br><span class="line" data-line-number="19"></span><br><span class="line" data-line-number="20"></span><br><span class="line" data-line-number="21"></span><br></pre></td><td class="code"><pre><span class="line">initSticky();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initSticky</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Get the header</span></span><br><span class="line">  <span class="keyword">let</span> header = <span class="built_in">document</span>.getElementById(<span class="string">"header"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the offset position of the navbar</span></span><br><span class="line">  <span class="keyword">let</span> sticky = header.offsetTop;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">stickyCheck</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt; sticky) &#123;</span><br><span class="line">      header.classList.add(<span class="string">"sticky"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      header.classList.remove(<span class="string">"sticky"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    stickyCheck()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二：不兼容IE"><a href="#方案二：不兼容IE" class="headerlink" title="方案二：不兼容IE"></a>方案二：不兼容IE</h3><p>直接在本來的 header 把position: fixed改成 sticky 和 top: 0. Javascript 可以去掉</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;方案一：兼容IE&quot;&gt;&lt;a href=&quot;#方案一：兼容IE&quot; class=&quot;headerlink&quot; title=&quot;方案一：兼容IE&quot;&gt;&lt;/a&gt;方案一：兼容IE&lt;/h3&gt;&lt;p&gt;這個方案並不完美，position: fixed 太多坑，如果有有別一個 position:
      
    
    </summary>
    
      <category term="Front-end" scheme="https://blog.sukitsuki.com/categories/Front-end/"/>
    
      <category term="CSS" scheme="https://blog.sukitsuki.com/categories/Front-end/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>使用CDN把Shadowsocks主機的實體IP隱藏</title>
    <link href="https://blog.sukitsuki.com/2018/11/29/%E4%BD%BF%E7%94%A8CDN%E6%8A%8ASS%E4%B8%BB%E6%A9%9F%E7%9A%84%E5%AF%A6%E9%AB%94IP%E9%9A%B1%E8%97%8F/"/>
    <id>https://blog.sukitsuki.com/2018/11/29/使用CDN把SS主機的實體IP隱藏/</id>
    <published>2018-11-29T11:06:02.000Z</published>
    <updated>2018-11-29T12:51:52.012Z</updated>
    
    <content type="html"><![CDATA[<p>一般Shadowsocks 機場，直接到服務器的真實IP，這種VPS服務器的IP 段都是連著的，出較出名的VPS服務商的IP 段很易被掃出來，之後被各種DDOS或暴力破解。</p><p>使用CDN反代就可以把IP 隱藏起來，也可以把被GFW 封了的IP 段機器再利用。別外加上Nginx 反代可以把Shadowsocks 偽裝成網站頁面，或跳轉到別的頁面。</p><h3 id="Shadowsocks-配置"><a href="#Shadowsocks-配置" class="headerlink" title="Shadowsocks 配置"></a>Shadowsocks 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br></pre></td><td class="code"><pre><span class="line">ss-server -s 0.0.0.0 -p 8080 -c config.json --fast-open --plugin obfs-server --plugin-opts <span class="string">"obfs=http"</span></span><br></pre></td></tr></table></figure><p>Ps: obfs使用 http 不要使用 tls，因為CDN 的https會做了別一重的tls封裝，引致解密失敗。</p><blockquote><p>Cloudflare 支持直接的端口</p></blockquote><p><code>80, 8080, 8880, 2052, 2082, 2086, 2095</code></p><p><del>如果使用 Cloudflare 強制 https/tls, 可以在page rules 把需使用的域名加入例外規則。</del></p><p>在 Cloudflare 上需要在 Crypto 關閉 Always Use HTTPS，不然 http 流量會強制跳到 https</p><p>如果使用Nginx 作為反代過濾，可以把非 SS連接跳轉到別的頁面</p><h3 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br><span class="line" data-line-number="11"></span><br><span class="line" data-line-number="12"></span><br><span class="line" data-line-number="13"></span><br><span class="line" data-line-number="14"></span><br><span class="line" data-line-number="15"></span><br><span class="line" data-line-number="16"></span><br><span class="line" data-line-number="17"></span><br><span class="line" data-line-number="18"></span><br><span class="line" data-line-number="19"></span><br><span class="line" data-line-number="20"></span><br><span class="line" data-line-number="21"></span><br><span class="line" data-line-number="22"></span><br><span class="line" data-line-number="23"></span><br><span class="line" data-line-number="24"></span><br><span class="line" data-line-number="25"></span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">    <span class="attribute">default</span> upgrade;</span><br><span class="line">    ''      close;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">ssl_protocols</span>       TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span>         HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">server_name</span>         __server_name__;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span>      <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span>  <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$http_upgrade</span> = <span class="string">"websocket"</span>)&#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>          http://192.168.0.118:10000;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$scheme</span> = <span class="string">"http"</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$http_host</span><span class="variable">$request_uri</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用Nginx 反代，Andorid 的 simple-obfs 的版本使用的 obfs-local 是0.0.2 對 websocket的支持不完整。</p><p>需要更新到最新版本的 obfs-local</p><p><a href="https://github.com/Tsuki/simple-obfs-android/releases/download/0.0.6/obfs-local-release.apk" target="_blank" rel="noopener">https://github.com/Tsuki/simple-obfs-android/releases/download/0.0.6/obfs-local-release.apk</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般Shadowsocks 機場，直接到服務器的真實IP，這種VPS服務器的IP 段都是連著的，出較出名的VPS服務商的IP 段很易被掃出來，之後被各種DDOS或暴力破解。&lt;/p&gt;
&lt;p&gt;使用CDN反代就可以把IP 隱藏起來，也可以把被GFW 封了的IP 段機器再利用。別外
      
    
    </summary>
    
      <category term="Server" scheme="https://blog.sukitsuki.com/categories/Server/"/>
    
    
  </entry>
  
  <entry>
    <title>在PostgresSQL啟用不區分大小寫欄位</title>
    <link href="https://blog.sukitsuki.com/2018/10/15/%E5%9C%A8PostgresSQL%E5%95%9F%E7%94%A8%E4%B8%8D%E5%8D%80%E5%88%86%E5%A4%A7%E5%B0%8F%E5%AF%AB%E6%AC%84%E4%BD%8D/"/>
    <id>https://blog.sukitsuki.com/2018/10/15/在PostgresSQL啟用不區分大小寫欄位/</id>
    <published>2018-10-15T17:53:24.000Z</published>
    <updated>2018-10-15T16:31:00.862Z</updated>
    
    <content type="html"><![CDATA[<p>在PostgreSQL 上建立欄位約束，是很簡單的事情，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (  </span><br><span class="line">  <span class="keyword">id</span>     <span class="keyword">uuid</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> uuid_generate_v4(),</span><br><span class="line">  email  <span class="built_in">text</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我們只需要在表的欄位上加入唯一約束就可以，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> email_unique <span class="keyword">UNIQUE</span> (email);</span><br></pre></td></tr></table></figure><p>但在特殊情況下，我們需要不區分大少寫的欄位，比如用戶表等。。。剛剛那種約速方法就不再有效，因為PostgreSQL 預設是大小寫區分的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (email) <span class="keyword">VALUES</span> (<span class="string">'test@example.com'</span>);  </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (email) <span class="keyword">VALUES</span> (<span class="string">'TEST@example.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line">                  id                  |      email       </span><br><span class="line"><span class="comment">--------------------------------------+------------------</span></span><br><span class="line"> ccfcddd2-bdc5-4cf4-9475-4171960e6262 | test@example.com</span><br><span class="line"> 431308b4-8df8-44c9-bed4-7c44cf4e1ec1 | TEST@example.com</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure><p>一般情況下，我們會使用 <code>Lower</code> 和 <code>ToLower</code>  建立唯一索引和尋找數據。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> emailunique_idx <span class="keyword">on</span> <span class="keyword">users</span> (<span class="keyword">LOWER</span>(email)); </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">LOWER</span>(email) = <span class="keyword">LOWER</span>(?);</span><br></pre></td></tr></table></figure><p>但這種做法，忘了加 <code>LOWER</code> 就會令程序產生 Bug.</p><p>其實 PostgreSQL 供提不少額外的模塊，只是沒有預設啟用。這裹說的 <code>CITEXT</code> 就是其中一個。<code>CITEXT</code> 顧名思義就是 <code>case insensitive text</code>。</p><p>首先在 PostgreSQL 啟用額外的<code>CITEXT</code>模組。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> citext;</span><br></pre></td></tr></table></figure><p>之後清空之前加入的數據，並修改 <code>email</code> 欄位屬情為 <code>citext</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> RESTART <span class="keyword">IDENTITY</span> RESTRICT;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> email <span class="keyword">TYPE</span> citext;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> emailunique_idx <span class="keyword">on</span> <span class="keyword">users</span> (email);</span><br></pre></td></tr></table></figure><p>之後再一次插入用戶數據，就可以看到樣同 <code>email</code> 並不能成功加入，並抛出錯誤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (email) <span class="keyword">VALUES</span> (<span class="string">'test@example.com'</span>);  </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (email) <span class="keyword">VALUES</span> (<span class="string">'TEST@example.com'</span>);</span><br><span class="line"></span><br><span class="line">ERROR:  duplicate key value violates unique constraint "email_unique"  </span><br><span class="line">DETAIL:  Key (email)=(TEST@example.com) already exists.</span><br></pre></td></tr></table></figure><p>這種做法的好處是，欄位中己配置好檢查，不需要在代碼中每一次手動加上檢查，在數據庫的欄位上作出最後一道防線。別一方面，其他開發人員看到表的 <code>DDL</code> 時就明白這個欄位是不區分大少寫。</p><p>最後這個模組是從 <code>PostgreSQL 9.3</code> 開始提供。</p><p>Ref: <a href="http://shuber.io/case-insensitive-unique-constraints-in-postgres/" target="_blank" rel="noopener">http://shuber.io/case-insensitive-unique-constraints-in-postgres/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在PostgreSQL 上建立欄位約束，是很簡單的事情，&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;1&quot;
      
    
    </summary>
    
      <category term="SQL" scheme="https://blog.sukitsuki.com/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>升級到macOS Mojave</title>
    <link href="https://blog.sukitsuki.com/2018/10/01/%E5%8D%87%E7%B4%9A%E5%88%B0macOS-Mojave/"/>
    <id>https://blog.sukitsuki.com/2018/10/01/升級到macOS-Mojave/</id>
    <published>2018-10-01T17:56:53.000Z</published>
    <updated>2018-10-01T10:07:37.100Z</updated>
    
    <content type="html"><![CDATA[<p>今天把筆記本升級到 Mojave，有Dark theme 看起來舒服多了，雖然還有部分軟件不支持。</p><p>這次升級需時有點久，升了近一小時。而且升級後把 CommandLineTool刪了，需要重新下載。</p><p><code>sudo xcode-select --install</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天把筆記本升級到 Mojave，有Dark theme 看起來舒服多了，雖然還有部分軟件不支持。&lt;/p&gt;
&lt;p&gt;這次升級需時有點久，升了近一小時。而且升級後把 CommandLineTool刪了，需要重新下載。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo xcode-select
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Casbin-訪問權限控制工具</title>
    <link href="https://blog.sukitsuki.com/2018/09/26/casbin-%E8%A8%AA%E5%95%8F%E6%AC%8A%E9%99%90%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    <id>https://blog.sukitsuki.com/2018/09/26/casbin-訪問權限控制工具/</id>
    <published>2018-09-26T20:51:25.000Z</published>
    <updated>2018-09-27T13:08:43.994Z</updated>
    
    <content type="html"><![CDATA[<p>Casbin 本質是一個配對的權限的工具庫，主要是由 model 模型和 policy 政策組成，</p><p>model example</p><p>r 是接受傳入的參數並定義欄位，例子中接受三項參數</p><p>p 是解析 Prolicy 內容並定義欄位</p><p>m 是配對 Policy 方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br><span class="line" data-line-number="11"></span><br></pre></td><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_effect]</span><br><span class="line">e = some(where (p.eft == allow))</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m = (p.sub in r.sub || p.sub == &quot;*&quot;) &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; (r.act == p.act || p.act == &quot;*&quot;)</span><br></pre></td></tr></table></figure><p>policy example </p><p>ps:雖然是csv格式 但需要在逗號後留空白，別外內容的空白是會保留，不要因為對齊而加padding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br></pre></td><td class="code"><pre><span class="line">p, *, /info, GET</span><br><span class="line">p, user, /users, GET</span><br><span class="line">p, user, /users, POST</span><br><span class="line">p, setting, /settings, *</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Casbin 本質是一個配對的權限的工具庫，主要是由 model 模型和 policy 政策組成，&lt;/p&gt;
&lt;p&gt;model example&lt;/p&gt;
&lt;p&gt;r 是接受傳入的參數並定義欄位，例子中接受三項參數&lt;/p&gt;
&lt;p&gt;p 是解析 Prolicy 內容並定義欄位&lt;/p&gt;

      
    
    </summary>
    
      <category term="Golang" scheme="https://blog.sukitsuki.com/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>刪了Xcode後不能使用make等指令</title>
    <link href="https://blog.sukitsuki.com/2018/09/24/%E5%88%AA%E4%BA%86xcode%E5%BE%8C%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8make%E7%AD%89%E6%8C%87%E4%BB%A4/"/>
    <id>https://blog.sukitsuki.com/2018/09/24/刪了xcode後不能使用make等指令/</id>
    <published>2018-09-24T17:43:26.000Z</published>
    <updated>2018-09-27T13:08:43.994Z</updated>
    
    <content type="html"><![CDATA[<p>如果出現以下內容</p><blockquote><p>xcrun: error: active developer path (“/Applications/Xcode.app/Contents/Developer”) does not exist</p></blockquote><p>輸入 <code>sudo xcode-select -s /Library/Developer/CommandLineTools</code> 改回使用 CommandLineTools 的路徑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果出現以下內容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;xcrun: error: active developer path (“/Applications/Xcode.app/Contents/Developer”) does not exist&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="ops" scheme="https://blog.sukitsuki.com/categories/ops/"/>
    
    
  </entry>
  
  <entry>
    <title>前端好用的模糊搜索工具</title>
    <link href="https://blog.sukitsuki.com/2018/09/21/%E5%89%8D%E7%AB%AF%E5%A5%BD%E7%94%A8%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7/"/>
    <id>https://blog.sukitsuki.com/2018/09/21/前端好用的模糊搜索工具/</id>
    <published>2018-09-21T17:55:43.000Z</published>
    <updated>2018-09-21T10:25:31.993Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/krisk/fuse" target="_blank" rel="noopener">https://github.com/krisk/fuse</a></p><p><a href="http://fusejs.io/" target="_blank" rel="noopener">http://fusejs.io/</a></p><p>在處理表單的全文搜索，很常都要對不同欄位過濾，用了Fuse.js就可以少寫很多代碼。</p><p>Fuse.js 除了支持指定欄位/嵌套 Json，還支持比重搜索和 Bitap 算法提供一定近似匹配的功能。</p><p><a href="http://fusejs.io/#examples" target="_blank" rel="noopener">http://fusejs.io/#examples</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/krisk/fuse&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/krisk/fuse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fusejs.io
      
    
    </summary>
    
      <category term="Front-end" scheme="https://blog.sukitsuki.com/categories/Front-end/"/>
    
      <category term="JavaScript" scheme="https://blog.sukitsuki.com/categories/Front-end/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL語法中的過濾方法</title>
    <link href="https://blog.sukitsuki.com/2018/09/20/SQL%E8%AA%9E%E6%B3%95%E4%B8%AD%E7%9A%84%E9%81%8E%E6%BF%BE%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.sukitsuki.com/2018/09/20/SQL語法中的過濾方法/</id>
    <published>2018-09-20T20:17:49.000Z</published>
    <updated>2018-09-20T12:58:44.135Z</updated>
    
    <content type="html"><![CDATA[<p>在統計系統中，很常用到不同維度的分類和過澽，</p><p>比如按類加總/平均等等</p><table><thead><tr><th>Id</th><th>Gender</th><th>Salary</th><th>Country</th><th>Position</th><th>Status</th></tr></thead><tbody><tr><td>1</td><td>M</td><td>1000</td><td>China</td><td>Software</td><td>working</td></tr><tr><td>2</td><td>F</td><td>2000</td><td>USA</td><td>Software</td><td>holiday</td></tr><tr><td>3</td><td>M</td><td>5000</td><td>UK</td><td>Hardware</td><td>holiday</td></tr><tr><td>4</td><td>F</td><td>4000</td><td>Germany</td><td>Hardware</td><td>working</td></tr><tr><td>5</td><td>M</td><td>5000</td><td>USA</td><td>Admin</td><td>holiday</td></tr><tr><td>6</td><td>F</td><td>4000</td><td>Germany</td><td>Admin</td><td>holiday</td></tr></tbody></table><p>如果在上要一次過找出Admin和非Admin人員的平均Salary可以在 SQL中用 filter 或 case</p><p>PostgreSQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(salary) filter (<span class="keyword">where</span> <span class="keyword">position</span> = <span class="string">'admin'</span>)  <span class="keyword">as</span> admin_avg_salary,</span><br><span class="line">       <span class="keyword">avg</span>(salary) filter (<span class="keyword">where</span> <span class="keyword">position</span> &lt;&gt; <span class="string">'admin'</span>) <span class="keyword">as</span> non_admin_avg_salary</span><br><span class="line"><span class="keyword">from</span> raw_data</span><br></pre></td></tr></table></figure><p>MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(salary <span class="keyword">CASE</span></span><br><span class="line">                    <span class="keyword">WHEN</span> <span class="keyword">position</span> = <span class="string">'admin'</span> <span class="keyword">THEN</span> salary</span><br><span class="line">                    <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> admin_avg_salary,</span><br><span class="line">       <span class="keyword">avg</span>(salary <span class="keyword">CASE</span></span><br><span class="line">                    <span class="keyword">WHEN</span> <span class="keyword">position</span> &lt;&gt; <span class="string">'admin'</span> <span class="keyword">THEN</span> salary</span><br><span class="line">                    <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> non_admin_avg_salary</span><br><span class="line"><span class="keyword">from</span> raw_data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在統計系統中，很常用到不同維度的分類和過澽，&lt;/p&gt;
&lt;p&gt;比如按類加總/平均等等&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Gender&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;th&gt;Country&lt;/th&gt;
&lt;th&gt;Posit
      
    
    </summary>
    
      <category term="SQL" scheme="https://blog.sukitsuki.com/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>gorm兼容net.IP類</title>
    <link href="https://blog.sukitsuki.com/2018/08/29/gorm%E5%85%BC%E5%AE%B9net-IP%E9%A1%9E/"/>
    <id>https://blog.sukitsuki.com/2018/08/29/gorm兼容net-IP類/</id>
    <published>2018-08-29T12:04:38.000Z</published>
    <updated>2018-08-29T06:37:22.933Z</updated>
    
    <content type="html"><![CDATA[<p>首先 alias net.IP類到本地包，為之後實作方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IP net.IP</span><br></pre></td></tr></table></figure><p>因為pg不能直接使用<code>[]byte</code>作為輸入，所以需要實作<code>Value()</code>令Gorm 能轉換成字串作為輸入。</p><p>先從自定義的 <code>IP</code> 類轉換回 <code>net.IP</code> 類，再用 <code>String()</code> 轉成字串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a IP)</span> <span class="title">Value</span><span class="params">()</span> <span class="params">(driver.Value, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> net.IP(a).String(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 別外，由於從pg 內讀取出來的是 <code>[]unit8</code> 類，內部數據是 ASIIC 碼，所以先轉換成 byte合併成 Array 再轉成 string.</p><p> 最後用 net 庫內的 ParseIP 方法 轉成 IP 類，之後再 cast 成自定義的 IP 類 返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br><span class="line" data-line-number="11"></span><br><span class="line" data-line-number="12"></span><br><span class="line" data-line-number="13"></span><br><span class="line" data-line-number="14"></span><br><span class="line" data-line-number="15"></span><br><span class="line" data-line-number="16"></span><br><span class="line" data-line-number="17"></span><br><span class="line" data-line-number="18"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IP net.IP</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *IP)</span> <span class="title">Scan</span><span class="params">(src <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> x := src.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> []<span class="keyword">uint8</span>:</span><br><span class="line">*a = IP(net.ParseIP(<span class="keyword">string</span>(x)))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">*a = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"pq: cannot convert %T to net.IP"</span>, src)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a IP)</span> <span class="title">Value</span><span class="params">()</span> <span class="params">(driver.Value, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> net.IP(a).String(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先 alias net.IP類到本地包，為之後實作方法。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;1&quot;
      
    
    </summary>
    
      <category term="Golang" scheme="https://blog.sukitsuki.com/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Diablo2打寶</title>
    <link href="https://blog.sukitsuki.com/2018/08/28/Diablo2%E6%89%93%E5%AF%B6/"/>
    <id>https://blog.sukitsuki.com/2018/08/28/Diablo2打寶/</id>
    <published>2018-08-28T00:11:54.000Z</published>
    <updated>2018-08-27T16:39:02.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="刷刷刷"><a href="#刷刷刷" class="headerlink" title="刷刷刷"></a>刷刷刷</h3><p>在飛了三天槌子後，今天（27號），終於打了喬丹之石，而且還是連出兩粒。第二粒在最後一把出的，別外還刷到接近頂值的馬拉的萬花筒（19抗性），實在太令人高興了。</p><p>這兩天把裝備提升，先刷到撒卡蘭姆使者，再刷到橡樹之心符文，在崔凡特己經可以穩定刷下去，但秘密母牛關還是有點壓力，而且刷起來不太效率。</p><p>在刷了好喬丹後，之後的喬丹之石就可以拿來開地表暗黑破壞神，玩了這麼多年還沒打過這隻呢。</p><p>之後去刷無限符文好還是謎團符文好呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;刷刷刷&quot;&gt;&lt;a href=&quot;#刷刷刷&quot; class=&quot;headerlink&quot; title=&quot;刷刷刷&quot;&gt;&lt;/a&gt;刷刷刷&lt;/h3&gt;&lt;p&gt;在飛了三天槌子後，今天（27號），終於打了喬丹之石，而且還是連出兩粒。第二粒在最後一把出的，別外還刷到接近頂值的馬拉的萬花筒（19抗
      
    
    </summary>
    
      <category term="遊戲" scheme="https://blog.sukitsuki.com/categories/%E9%81%8A%E6%88%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>暗黑破壞神</title>
    <link href="https://blog.sukitsuki.com/2018/08/24/Diablo2/"/>
    <id>https://blog.sukitsuki.com/2018/08/24/Diablo2/</id>
    <published>2018-08-24T20:18:10.000Z</published>
    <updated>2018-08-24T12:51:55.780Z</updated>
    
    <content type="html"><![CDATA[<h4 id="暗黑破壞神-2"><a href="#暗黑破壞神-2" class="headerlink" title="暗黑破壞神 2"></a>暗黑破壞神 2</h4><p>這個快二十多年的遊戲，想到不今時今日還有不少人在玩，在YouTube 上還有不少人上傳/直播打寶。現在官服還在維護，今天六月時天梯還有重置，而且還有不少玩家在線。</p><h4 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h4><p>現在D2除了正服外，還有不少私服，這些私服各有特色，有些是和正服一樣，有些是PVP服，還有倍率服。對於沒有時間或想重投D2的懷舊玩家來說，是不錯的選擇。</p><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>當年第一個玩的角色，沒記錯應該是死靈法師，那時覺得帶著一大隊小弟，在單人模式上會輕鬆。現實上死靈法師在地獄難度之前，難易度是滿低的。</p><p>其次玩的是法師吧，法師的傳送是D2打寶的關建，除非有迷團甲。但迷團是相當高級的符文組，當年我連眼光都沒合成過，更別說迷團，那時拿的只是双精神，而且得用塔盾的精神。</p><p>現在重玩一下私服，就先練了個祝槌聖騎。雖然不算最好用的角式，但是是最易上手和最安全的角色。</p><h4 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h4><p>不小心把黑吉德賣了啊！！！！好想要SOJ啊！！！我還沒打過地表和三王啊！！！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;暗黑破壞神-2&quot;&gt;&lt;a href=&quot;#暗黑破壞神-2&quot; class=&quot;headerlink&quot; title=&quot;暗黑破壞神 2&quot;&gt;&lt;/a&gt;暗黑破壞神 2&lt;/h4&gt;&lt;p&gt;這個快二十多年的遊戲，想到不今時今日還有不少人在玩，在YouTube 上還有不少人上傳/直播打寶。現
      
    
    </summary>
    
      <category term="遊戲" scheme="https://blog.sukitsuki.com/categories/%E9%81%8A%E6%88%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker清理</title>
    <link href="https://blog.sukitsuki.com/2018/08/20/Docker%E6%B8%85%E7%90%86/"/>
    <id>https://blog.sukitsuki.com/2018/08/20/Docker清理/</id>
    <published>2018-08-20T20:01:56.000Z</published>
    <updated>2018-08-20T12:25:09.461Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看已使用空間"><a href="#查看已使用空間" class="headerlink" title="查看已使用空間"></a>查看已使用空間</h3><blockquote><p>docker system df</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br></pre></td><td class="code"><pre><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              17                  15                  5.531GB             1.822GB (32%)</span><br><span class="line">Containers          20                  1                   251.6MB             212.2MB (84%)</span><br><span class="line">Local Volumes       42                  17                  1.09GB              174.5MB (16%)</span><br><span class="line">Build Cache         0                   0                   0B                  0B</span><br></pre></td></tr></table></figure><h3 id="清理空間"><a href="#清理空間" class="headerlink" title="清理空間"></a>清理空間</h3><p>Remove local volumes not used by at least one container - 沒有在使用的空間</p><blockquote><p>docker volume prune</p></blockquote><h3 id="清理容器"><a href="#清理容器" class="headerlink" title="清理容器"></a>清理容器</h3><p>Remove all stopped containers - 己停用的容器</p><blockquote><p>docker container prune</p></blockquote><h3 id="清理影像"><a href="#清理影像" class="headerlink" title="清理影像"></a>清理影像</h3><p>Remove dangling images - 沒有被tag的影像層</p><blockquote><p>docker image prune</p></blockquote><p>Remove images without at least one container associated - 沒有在使用的影像</p><blockquote><p>docker image prune -a</p></blockquote><h3 id="全面清理"><a href="#全面清理" class="headerlink" title="全面清理"></a>全面清理</h3><ul><li>Remove stopped containers - 己停用的容器</li><li>Remove networks not used by at least one container - 沒有容器連接的網絡</li><li>Remove dangling images - 沒有被tag</li><li>Remove build cache - 構建快取</li></ul><blockquote><p>docker system prune</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看已使用空間&quot;&gt;&lt;a href=&quot;#查看已使用空間&quot; class=&quot;headerlink&quot; title=&quot;查看已使用空間&quot;&gt;&lt;/a&gt;查看已使用空間&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;docker system df&lt;/p&gt;
&lt;/blockquote&gt;
&lt;f
      
    
    </summary>
    
      <category term="Ops" scheme="https://blog.sukitsuki.com/categories/Ops/"/>
    
    
  </entry>
  
  <entry>
    <title>不如意事十常八九</title>
    <link href="https://blog.sukitsuki.com/2018/08/18/%E4%B8%8D%E5%A6%82%E6%84%8F%E4%BA%8B%E5%8D%81%E5%B8%B8%E5%85%AB%E4%B9%9D/"/>
    <id>https://blog.sukitsuki.com/2018/08/18/不如意事十常八九/</id>
    <published>2018-08-18T11:29:01.000Z</published>
    <updated>2018-08-18T13:01:30.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一個人"><a href="#一個人" class="headerlink" title="一個人"></a>一個人</h4><p>算下來己經一個人生活了四個月了，感覺習慣嗎？並沒有。</p><p>只有在其實地方生活過，才會知道以前的好。感覺生活上一直在開倒車，當經歷過低潮才懂得之前的美好。從來沒有想過以前的生活是多麽的幸褔，在新的地方，新的環境下生活並不是一件簡單的事情。</p><p>這裹的治安水平並不算太高，搶手機的事情聽到不少。在這邊生活的地方基本上就是公司，宿舍兩點一線。而生活水平還算過得去，公司的伙食雖然不怎麼樣，但周邊還是有點能吃的餐館，基本上中、日、泰、韓的也有，價錢上比香港低一點但低不了不多。</p><p>周邊能去的地方，基本上就周日到超市逛逛，補充一下生活用品。房間沒有電腦，以前在房間玩電腦的習慣己經成為過去。雖然買了一台任天堂 Switch，不過大多是單人遊戲為主，但玩太多的也會生厭。</p><h4 id="醉"><a href="#醉" class="headerlink" title="醉"></a>醉</h4><p><img src="/2018/08/18/不如意事十常八九/photo_2018-08-18_20-15-26.jpg" alt=""></p><p>如果醉可以忘記，可以解決，可以逃避問題，那是多麼好的事情。</p><blockquote><p>期盼抹去的哀愁  卻更加的愁  。</p></blockquote><p>可是醉了之後，只有宿醉，頭痛，胃痛等問題等著。</p><blockquote><p>即使昏醉  大概不想安睡 </p><p>回去不回去  同樣掃不走空虛</p><p>長島內苦澀太多  然後強裝甜蜜快樂</p></blockquote><p>以前喝的時候，都是和身邊的人互相吐嘈、互相吐苦水、互相談生活，現在喝酒更多是為了消磨時間，為醉而喝。畢竟同事不是朋友，很多說話還是不可能拿出來說。</p><blockquote><p>和摯友抱擁交頭  說理想追求</p><p>靜靜地醉臥在門口 陪他作戰的朋友  各有各溜走</p></blockquote><h4 id="夢"><a href="#夢" class="headerlink" title="夢"></a>夢</h4><p><img src="/2018/08/18/不如意事十常八九/photo_2018-08-18_20-39-12.jpg" alt=""></p><blockquote><p>或者當日也曾有火種 </p><p>但擔心去路其實不通 </p><p>然後大計跌入四維國度失蹤</p><p>就此捲入既定軌跡中 </p><p>天天照例運行在虛空 </p><p>像循序漸進等夠鐘 </p><p>是否甘心永遠被動</p></blockquote><p>待續。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一個人&quot;&gt;&lt;a href=&quot;#一個人&quot; class=&quot;headerlink&quot; title=&quot;一個人&quot;&gt;&lt;/a&gt;一個人&lt;/h4&gt;&lt;p&gt;算下來己經一個人生活了四個月了，感覺習慣嗎？並沒有。&lt;/p&gt;
&lt;p&gt;只有在其實地方生活過，才會知道以前的好。感覺生活上一直在開倒車，
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang 偽鑽石問題</title>
    <link href="https://blog.sukitsuki.com/2018/08/09/Golang-Embedding-trap/"/>
    <id>https://blog.sukitsuki.com/2018/08/09/Golang-Embedding-trap/</id>
    <published>2018-08-09T11:59:09.000Z</published>
    <updated>2018-12-10T11:08:42.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Golang-偽鑽石問題"><a href="#Golang-偽鑽石問題" class="headerlink" title="Golang 偽鑽石問題"></a>Golang 偽鑽石問題</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span>&#123; buffer <span class="keyword">int</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">struct</span>&#123; buffer <span class="keyword">int</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">Reader</span><br><span class="line">Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> rw ReadWriter</span><br><span class="line">    <span class="comment">// &#123;Writer:&#123;buffer:0&#125; Reader:&#123;buffer:0&#125;&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">"%+v"</span>, rw.buffer)</span><br><span class="line">    <span class="comment">// ambiguous selector rw.buffer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 go 之中沒有實現真正的繼承，<code>rw.buffer</code> 只是一個語法糖，如果內嵌結构是匿名字段會自動提升。</p><p>要取得 buffer 就需要指定 <code>rw.Reader.buffer</code> 或 <code>rw.Writer.buffer</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Buffer <span class="keyword">struct</span>&#123; Buffer <span class="keyword">int</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span>&#123; Buffer &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">Buffer</span><br><span class="line">Reader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> rw ReadWriter</span><br><span class="line">    <span class="comment">// &#123;Buffer:&#123;Buffer:0&#125; Reader:&#123;Buffer:&#123;Buffer:0&#125;&#125;&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">"%+v"</span>, rw.Buffer)</span><br><span class="line">    <span class="comment">// &#123;int:0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這種寫法就沒有鑽石問題，因為淺層己經有 <code>rw.Buffer</code>，所以 <code></code>rw.Reader.buffer` 不會自動提升。</p><p>不過這種寫法非常不直觀，很容易引起混亂，查看代碼時會忘了拿的是那 <code>Buffer</code>。 所以這種情況下，還是盡量避免使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Golang-偽鑽石問題&quot;&gt;&lt;a href=&quot;#Golang-偽鑽石問題&quot; class=&quot;headerlink&quot; title=&quot;Golang 偽鑽石問題&quot;&gt;&lt;/a&gt;Golang 偽鑽石問題&lt;/h1&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="Golang" scheme="https://blog.sukitsuki.com/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>DNS故障轉移測試</title>
    <link href="https://blog.sukitsuki.com/2018/08/08/DNS-High-Availability/"/>
    <id>https://blog.sukitsuki.com/2018/08/08/DNS-High-Availability/</id>
    <published>2018-08-08T18:34:05.000Z</published>
    <updated>2018-12-10T11:08:42.291Z</updated>
    
    <content type="html"><![CDATA[<p>建立 lookback 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig lo0 <span class="built_in">alias</span> 127.0.0.2 up</span><br><span class="line">sudo ifconfig lo0 <span class="built_in">alias</span> 127.0.0.3 up</span><br></pre></td></tr></table></figure><p>在 hosts 加入本地 dns 記錄</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">127.0.0.2 localhost</span><br><span class="line">127.0.0.3 localhost</span><br></pre></td></tr></table></figure><p>在不同終端使用 netcat 建立本地監聽 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 127.0.0.1 8080</span><br><span class="line">nc -lk 127.0.0.2 8080</span><br><span class="line">nc -lk 127.0.0.3 8080</span><br></pre></td></tr></table></figure><p>測試傳送信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc localhost 8080</span><br></pre></td></tr></table></figure><p>嘗試關閉不同終端 以測試能不能故障轉移</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建立 lookback 地址&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="Ops" scheme="https://blog.sukitsuki.com/categories/Ops/"/>
    
    
  </entry>
  
  <entry>
    <title>身為男高中生...讀後感</title>
    <link href="https://blog.sukitsuki.com/2018/08/06/%E8%BA%AB%E7%82%BA%E7%94%B7%E9%AB%98%E4%B8%AD%E7%94%9F-%E8%AE%80%E5%BE%8C%E6%84%9F/"/>
    <id>https://blog.sukitsuki.com/2018/08/06/身為男高中生-讀後感/</id>
    <published>2018-08-06T12:09:35.000Z</published>
    <updated>2018-08-18T13:01:30.765Z</updated>
    
    <content type="html"><![CDATA[<p>本書全名是《身為男高中生兼當紅輕小說作家的我，正被年紀比我小且從事聲優工作的女同學掐住脖子》(男子高校生で売れっ子ライトノベル作家をしているけれど、年下のクラスメイトで声優の女の子に首を絞められている。) 2014年時最長的小說作品名，一共51字呢。</p><p>從書名看起來很像一本校園戀愛故事的輕小說，但現實上並，不，是。這是一本科普文，這本書一共有三集（十集，偽）。</p><p>為什麼說這本書是科普文呢，因為這本說主要說的是輕小說作家出書的經歷和教學。</p><p>引子是主角的小說（作中作）在休學一年期間動漫化，在复學後被身為聲優的同學發現，之後每星期在前往東京的火車上被聊的故事。本中女主角為了引起男主角的注意，因此不斷向男主角提出話題，而話題就是男主角身為作家的工作內容。</p><p>第一，二集主要是在火車上互動，對話中提及大部分作家工作的內容，最後因為女主角被劇透了而掐住脖子www。看到這裹，書本己經提及大部分作家的工作內容，而且脖子也掐，應該完結吧。</p><p><img src="https://blog.sukitsuki.com/2018/08/06/身為男高中生-讀後感/photo_2018-08-06_12-05-57.jpg" alt=""></p><p>但三個月後又出了第三集，這集從本來的主角第一人稱，改為每章分拆成兩/四小章，男女主角梅花間竹的自白的敍事方式。這集一開始看上去像要回到校園生活故事，但其實還是作家的工作內容，其次是回收伏筆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本書全名是《身為男高中生兼當紅輕小說作家的我，正被年紀比我小且從事聲優工作的女同學掐住脖子》(男子高校生で売れっ子ライトノベル作家をしているけれど、年下のクラスメイトで声優の女の子に首を絞められている。) 2014年時最長的小說作品名，一共51字呢。&lt;/p&gt;
&lt;p&gt;從書名看
      
    
    </summary>
    
      <category term="小說" scheme="https://blog.sukitsuki.com/categories/%E5%B0%8F%E8%AA%AA/"/>
    
    
  </entry>
  
</feed>
