<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ツカツキ アリス</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sukitsuki.com/"/>
  <updated>2018-06-28T03:58:17.173Z</updated>
  <id>https://blog.sukitsuki.com/</id>
  
  <author>
    <name>調月有栖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日記</title>
    <link href="https://blog.sukitsuki.com/2018/06/28/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/28/日記/</id>
    <published>2018-06-28T10:27:58.000Z</published>
    <updated>2018-06-28T03:58:17.173Z</updated>
    
    <content type="html"><![CDATA[<p>Temp</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Temp&lt;/p&gt;

      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular管理使用者登入狀態</title>
    <link href="https://blog.sukitsuki.com/2018/06/27/Angular%E7%AE%A1%E7%90%86%E4%BD%BF%E7%94%A8%E8%80%85%E7%99%BB%E5%85%A5%E7%8B%80%E6%85%8B/"/>
    <id>https://blog.sukitsuki.com/2018/06/27/Angular管理使用者登入狀態/</id>
    <published>2018-06-27T18:30:40.000Z</published>
    <updated>2018-06-27T12:59:07.979Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Angular interceptor, guard 和 service 。</p><p>Gruard 是在 Angular 4.3或以上引入的權限和安全檢查的解決方案。</p><p>在 Routing 上加入 Guard 令路由的 Lifecycle (生命週期) 加入 GuardsCheckStart, GuardsCheckStart 等額外階段。</p><ol><li><p>auth.service.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AuthService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> router: Router,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">// 追蹤 Gruard 並保存初始化 URL, 取得 URL 後取消訂閱以避免內存洩漏</span></span><br><span class="line">    <span class="keyword">this</span>.events = <span class="keyword">this</span>.router.events.subscribe(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (event <span class="keyword">instanceof</span> GuardsCheckEnd &amp;&amp; event.shouldActivate === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.initRoute.next(event.url);</span><br><span class="line">        <span class="keyword">this</span>.events.unsubscribe();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  events: Subscription;</span><br><span class="line">  <span class="comment">// 使用 BehaviorSubject 創建 Observable</span></span><br><span class="line">  isLoginSubject = <span class="keyword">new</span> BehaviorSubject&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line">  userInfo = &#123;&#125; <span class="keyword">as</span> User;</span><br><span class="line">  initRoute = <span class="keyword">new</span> BehaviorSubject&lt;<span class="built_in">string</span>&gt;(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">  login(info: LoginInfo): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.cfpay.login(info).subscribe(<span class="function"><span class="params">next</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.userInfo = next.data;</span><br><span class="line">      <span class="keyword">this</span>.isLoginSubject.next(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">this</span>.router.navigate([<span class="string">''</span>]).then();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  logout(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.isLoginSubject.next(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.cfpay.logout().subscribe();</span><br><span class="line">    <span class="keyword">this</span>.router.navigate([<span class="string">'/login'</span>]).then();</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.userInfo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 刷新登陸狀態</span></span><br><span class="line">  refresh(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.cfpay.refresh().subscribe(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.userInfo = value.data;</span><br><span class="line">      <span class="keyword">this</span>.isLoginSubject.next(<span class="literal">true</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.router.navigate([<span class="string">'/login'</span>]).then();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isLoggedIn(): Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isLoginSubject.asObservable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>app.guard.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppGuard <span class="keyword">implements</span> CanActivate &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> auth: AuthService, <span class="keyword">private</span> router: Router</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 以 Angular Guard 進行驗證</span></span><br><span class="line">  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) &#123;</span><br><span class="line">    <span class="comment">// 因為每次驗證都是單一行為，所以不需要訂閱 Observable，只需要取最後的值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.auth.isLoginSubject.value) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.router.navigate([<span class="string">'/login'</span>]).then();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>app-routing.module.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123;path: <span class="string">'login'</span>, component: LoginComponent&#125;,</span><br><span class="line">  <span class="comment">// 在需要驗証 Route 的 canActivate 上加入己創建的Guard</span></span><br><span class="line">  &#123;path: <span class="string">''</span>, component: LayoutComponent, canActivate: [AppGuard]&#125;,</span><br><span class="line">  &#123;path: <span class="string">'**'</span>, component: NotfoundComponent&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>AppComponent.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> router: Router</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> auth: AuthService,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在主組件上初始化和重新取得登陸資料</span></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.auth.refresh();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>login.component.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoginComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> auth: AuthService,</span></span><br><span class="line"><span class="params">              <span class="keyword">private</span> router: Router</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  loginInfo: LoginInfo = &#123;username: <span class="string">''</span>, password: <span class="string">''</span>&#125;;</span><br><span class="line">  <span class="comment">// 如果沒有登陸資料取消訂閱 Router event 以避免內存消耗</span></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.auth.events.unsubscribe();</span><br><span class="line">    <span class="comment">// 在取得登陸資料後，跳轉到之前保存的地址上</span></span><br><span class="line">    <span class="keyword">this</span>.auth.isLoggedIn().subscribe(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.navigate([<span class="keyword">this</span>.auth.initRoute.value]).then();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  login() &#123;</span><br><span class="line">    <span class="keyword">this</span>.auth.login(<span class="keyword">this</span>.loginInfo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​    </p><ol start="6"><li><p>auth.interceptor.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AuthInterceptor <span class="keyword">implements</span> HttpInterceptor &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> router: Router,</span></span><br><span class="line"><span class="params">              <span class="keyword">private</span> auth: AuthService</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  intercept(request: HttpRequest&lt;<span class="built_in">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">// Httpclient 後處理攔截器，在攔截器到 401/Unauthorized 跳回登陸頁面 </span></span><br><span class="line">    <span class="keyword">return</span> next.handle(request).pipe(tap(<span class="function">(<span class="params">_: HttpEvent&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err <span class="keyword">instanceof</span> HttpErrorResponse &amp;&amp; err.status === <span class="number">401</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.auth.isLoginSubject.next(<span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">this</span>.router.navigate([<span class="string">'/login'</span>]).then();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 Angular interceptor, guard 和 service 。&lt;/p&gt;
&lt;p&gt;Gruard 是在 Angular 4.3或以上引入的權限和安全檢查的解決方案。&lt;/p&gt;
&lt;p&gt;在 Routing 上加入 Guard 令路由的 Lifecycle (生命週期
      
    
    </summary>
    
      <category term="Front-end" scheme="https://blog.sukitsuki.com/categories/Front-end/"/>
    
      <category term="Angular" scheme="https://blog.sukitsuki.com/categories/Front-end/Angular/"/>
    
    
  </entry>
  
  <entry>
    <title>日記</title>
    <link href="https://blog.sukitsuki.com/2018/06/27/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/27/日記/</id>
    <published>2018-06-27T10:24:30.000Z</published>
    <updated>2018-06-27T10:05:39.982Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Bayonetta 1</p></blockquote><p><img src="https://blog.sukitsuki.com/2018/06/27/日記/DgjNMeiUEAANreR.jpg" alt="Bayonetta"></p><p>Bayonetta  終於下載好了，昨天玩到第三章。</p><p>和二代比較下，一代的手感要差一點。Watch Time，的時機比二代難抓，所以combo比較難打。</p><p>別外劇情上，一代開始時比較多回憶殺，風格上也比較血腥和黑暗系。</p><p>QTE和即死的場影比較多，動不動就死。連續三關都是Stone Award。</p><p><img src="https://blog.sukitsuki.com/2018/06/27/日記/DgoTvQjVAAEgsFL.jpg" alt="Bayonetta Chapter3"></p><blockquote><p>Citrus</p></blockquote><p><img src="https://blog.sukitsuki.com/2018/06/27/日記/photo_2018-06-27_14-27-27.jpg" alt="Citrus 為什麼放任這種蠢貨的存在"></p><p>這是看了前兩集的感想，主角就是一個蠢貨。</p><p>我個人比較喜歡谷口晴美這個角色，感覺上性格很想似呢。</p><p><img src="https://blog.sukitsuki.com/2018/06/27/日記/photo_2018-06-27_14-27-21.jpg" alt="谷口晴美"></p><blockquote><p>老梗</p></blockquote><p><img src="https://blog.sukitsuki.com/2018/06/27/日記/photo_2018-06-27_14-27-36.jpg" alt="世界盃梗"></p><p>雖然沒有看世界盃，但每次世界盃都很戲劇化呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Bayonetta 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.sukitsuki.com/2018/06/27/日記/DgjNMeiUEAANreR.jpg&quot; alt=&quot;Bayonetta&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>日記</title>
    <link href="https://blog.sukitsuki.com/2018/06/24/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/24/日記/</id>
    <published>2018-06-24T22:27:42.000Z</published>
    <updated>2018-06-25T04:29:07.252Z</updated>
    
    <content type="html"><![CDATA[<p>今天終於買到Switch了。本來只是逛一下商場和吃午飯的，忽然店家老闆發消息來說有貨了。</p><p>連主機一起買了三盤遊戲，分別是Bayonetta 2, Zelda 和Splatoon 2 。</p><blockquote><p>Bayonetta</p></blockquote><p>先說說Bayonetta 2, 這是一款動作類遊戲，以華麗連技為主打內容，感覺上和Devil may cry 很類似。</p><img src="/2018/06/24/日記/DgeSY8FUYAEaWyu.jpg" title="[Bayonetta 2]"><p>自從 DMC4之後，卡婊己經很久沒出續作，並一直在炒冷飯。而貝姐1和2正好補充這這段空窗期。</p><p>因為歐美版是買二代送一代，不過一代是以下載碼方式提供，不過這下載竟然有分區，看清楚才知道買的是歐版，浪費不少時間才拿到下載內容。</p><p>而且Switch的遊戲內容都不少，一個遊戲都以20GB起跳，就先玩一下二代，等一代下載好再回去玩了。</p><p>別外今年E3 炸出DMC5的Trailer，暫時預定會在 2019 年春季在X1X，PS4 。看來PS4又要吃半年灰。</p><p>感覺上是被B3炸出來的，因為B3在TGA2017就白金工作室就發布（笑。</p><div class="video-container"><iframe src="//www.youtube.com/embed/6ZPWEWaXdtc" frameborder="0" allowfullscreen></iframe></div><div class="video-container"><iframe src="//www.youtube.com/embed/Ti-i40Ez6KY" frameborder="0" allowfullscreen></iframe></div><blockquote><p>Splatoon 2</p></blockquote><p>這個遊戲主要是線上連線對戰的，不過需要良好的網絡和公網IP地址才能連上，NAT Type C/D 只能玩單機模式了，沒法連線那就先放置著，NAT P2P連線差評。</p><p><img src="https://as.bitinn.net/upload/cjihvm9ry01l66u5nf5h38ia8.1200.jpg" alt="這和你們讓用戶同意應用程序的使用條款有什麼區別"></p><blockquote><p>薩爾達傳說 曠野之息</p></blockquote><p>只開了一會和看了開場的動畫，之後再玩。</p><img src="/2018/06/24/日記/DggKZYVU8AAY5Ue.jpg" title="[薩爾達傳說]"><blockquote><p>Phantasy Star Online 2 (PSO2 ) Cloud</p></blockquote><img src="/2018/06/24/日記/DgeaJDbUYAAZFXx.jpg" title="[Phantasy Star Online 2]"><p>吐嘈一下名字 <em>夢幻之星線上2 雲端版</em>，又線上又雲端。</p><p>這玩雲端版超吃網絡，而且畫質又差，還不如PSV版。真不知道是SEGA腦抽了還是老任腦抽了。</p><p>雖然下載只有30MB左右，但把運算放到線上只回傳畫面，有點本未倒置。</p><p>個人覺得，這雲端版本是為了解決PSV掉線問題，以前用PSV在戶外玩，基本上不能玩完一場。</p><blockquote><p>Citrus 橘里橘气</p></blockquote><img src="/2018/06/24/日記/photo_2018-06-25_11-12-06.jpg" title="[還有這種操作？]"><p>終於看完第一話了，第一話前半的爆炸劇情，看得我想死。</p><blockquote><p>隨筆</p></blockquote><p>到底生活是為了工作，還是工作為了生活。</p><p>To be, or not to be: that is the question.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天終於買到Switch了。本來只是逛一下商場和吃午飯的，忽然店家老闆發消息來說有貨了。&lt;/p&gt;
&lt;p&gt;連主機一起買了三盤遊戲，分別是Bayonetta 2, Zelda 和Splatoon 2 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bayonetta&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>日記</title>
    <link href="https://blog.sukitsuki.com/2018/06/23/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/23/日記/</id>
    <published>2018-06-23T22:44:30.000Z</published>
    <updated>2018-06-23T16:33:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>今天去商場找賣主機的店鋪，怎知道沒有貨。明明上星期還有貨的，白跑一趟。</p><p>下星期得再去一趟。</p><p>別外，今晚跑步時忽然停電，嚇了一跳。最近在練長跑，3分鐘慢跑，2分鐘快跑，一小時跑6公里左右。</p><p>一小時下來大約消耗400千卡。</p><p>如果以半程馬拉松為目標來算，三小時跑21公里。平均一小時需要跑7公里，離目標差一點點。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天去商場找賣主機的店鋪，怎知道沒有貨。明明上星期還有貨的，白跑一趟。&lt;/p&gt;
&lt;p&gt;下星期得再去一趟。&lt;/p&gt;
&lt;p&gt;別外，今晚跑步時忽然停電，嚇了一跳。最近在練長跑，3分鐘慢跑，2分鐘快跑，一小時跑6公里左右。&lt;/p&gt;
&lt;p&gt;一小時下來大約消耗400千卡。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>春季整合</title>
    <link href="https://blog.sukitsuki.com/2018/06/22/%E6%98%A5%E5%AD%A3%E6%95%B4%E5%90%88/"/>
    <id>https://blog.sukitsuki.com/2018/06/22/春季整合/</id>
    <published>2018-06-22T10:53:51.000Z</published>
    <updated>2018-06-22T06:28:23.483Z</updated>
    
    <content type="html"><![CDATA[<p>2018春季快要完結了，是時候整理一下要補的番。</p><ul><li style="list-style: none"><input type="checkbox"> 極道超女</li><li style="list-style: none"><input type="checkbox"> P5</li><li style="list-style: none"><input type="checkbox"> Steins;Gate0</li><li style="list-style: none"><input type="checkbox"> 驚爆危機</li></ul><p>2017冬沒有補的和己經補了的</p><ul><li style="list-style: none"><input type="checkbox"> 齊木楠雄的災難</li><li style="list-style: none"><input type="checkbox"> 搖曳露營</li><li style="list-style: none"><input type="checkbox" checked> 龍王的工作</li><li style="list-style: none"><input type="checkbox" checked> 爆肝工程師的異世界狂想曲</li><li style="list-style: none"><input type="checkbox" checked> 博多豚骨拉麵團</li><li style="list-style: none"><input type="checkbox"> citrus</li><li style="list-style: none"><input type="checkbox"> 擅長捉弄人的高木同學</li></ul><p>最近應該會買一台switch，以前一直想玩Bayonetta，但一直沒有買任天堂的主機。</p><p>上一次也是第一次買的任天堂遊戲機是GBA SP，但是不到半年就不見了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018春季快要完結了，是時候整理一下要補的番。&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; 極道超女&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>遊戲</title>
    <link href="https://blog.sukitsuki.com/2018/06/15/%E9%81%8A%E6%88%B2/"/>
    <id>https://blog.sukitsuki.com/2018/06/15/遊戲/</id>
    <published>2018-06-15T10:09:05.000Z</published>
    <updated>2018-06-15T04:13:10.664Z</updated>
    
    <content type="html"><![CDATA[<p>遊戲人生，人生遊戲，如果將人生看作是一場遊戲。</p><p>每一個人在他遊戲之中，在不同時間，被不同任務驅使著，去完成每一項目標。</p><p>當遊戲結束之後，沒有人能夠仍舊留在遊戲之中，有人選擇了離開，然後進行另外一個遊戲，有人停留在結束的畫面上回憶遊戲的過程。</p><p>但每一局新的遊戲把好奇心和興奮感慢慢消耗殆盡，當遊戲不再是遊戲時，當人生不再是遊戲時，當瞭解得越多，當目標成為責任。</p><p>也許有資格回首往事，遊戲人生，是解脫了一切束縛，真正能夠做到放下一切的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;遊戲人生，人生遊戲，如果將人生看作是一場遊戲。&lt;/p&gt;
&lt;p&gt;每一個人在他遊戲之中，在不同時間，被不同任務驅使著，去完成每一項目標。&lt;/p&gt;
&lt;p&gt;當遊戲結束之後，沒有人能夠仍舊留在遊戲之中，有人選擇了離開，然後進行另外一個遊戲，有人停留在結束的畫面上回憶遊戲的過程。&lt;/p
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>日記</title>
    <link href="https://blog.sukitsuki.com/2018/06/11/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/11/日記/</id>
    <published>2018-06-11T23:47:45.000Z</published>
    <updated>2018-06-11T16:57:44.368Z</updated>
    
    <content type="html"><![CDATA[<p>與其活在夢想之中，還不如活在現實之中更好。用人性貪圖安逸，負面的精神，來引導自己，比用純淨的夢想，高尚的道德來約束自己，更加切實可行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;與其活在夢想之中，還不如活在現實之中更好。用人性貪圖安逸，負面的精神，來引導自己，比用純淨的夢想，高尚的道德來約束自己，更加切實可行。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日記</title>
    <link href="https://blog.sukitsuki.com/2018/06/08/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/08/日記/</id>
    <published>2018-06-08T13:31:03.000Z</published>
    <updated>2018-06-08T15:13:18.015Z</updated>
    
    <content type="html"><![CDATA[<p>買了個鋁鍋，才發現不能用在電磁爐上，很氣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;買了個鋁鍋，才發現不能用在電磁爐上，很氣。&lt;/p&gt;

      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>懦弱</title>
    <link href="https://blog.sukitsuki.com/2018/06/07/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/07/日記/</id>
    <published>2018-06-07T13:22:31.000Z</published>
    <updated>2018-06-08T15:13:18.015Z</updated>
    
    <content type="html"><![CDATA[<p>第一次認識到，以前自己之所以能夠堅強，完全是因為自己身後有著無比堅固的後盾。</p><p>當精神上的源泉枯竭，才發現自己原來是一個懦弱的需要呵護的人。真正的堅強是什麼？並不清楚，毫不瞭解。</p><blockquote><p>今天跑了30分鐘 3.5KM</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次認識到，以前自己之所以能夠堅強，完全是因為自己身後有著無比堅固的後盾。&lt;/p&gt;
&lt;p&gt;當精神上的源泉枯竭，才發現自己原來是一個懦弱的需要呵護的人。真正的堅強是什麼？並不清楚，毫不瞭解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天跑了30分鐘 3.5KM&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>日記</title>
    <link href="https://blog.sukitsuki.com/2018/06/06/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/06/日記/</id>
    <published>2018-06-06T14:54:21.000Z</published>
    <updated>2018-06-08T15:13:18.015Z</updated>
    
    <content type="html"><![CDATA[<p>兩天把四本小說看完了，內容很輕鬆但又滿滿砂糖。</p><p>只要沒有擁有，就不會擔心失去。因為過於滿足現況而忽視身邊的問題，是我極力避免發生的情況。我會為很多事情作出最壞打算，雖然有居安思危的說法，但過度未雨綢繆、過分考慮令我不知不覺變成過分焦慮的性格，經常杞人憂天、自我折磨。</p><p>博客加了Player可以點左下角播放，或點右邊開啟自動播放。</p><p>下一本書還是翻舊小說看，不過是長編小說。要看完應該得花一個月左右，感覺現在的小說都沒以前的好看，也可能是我情懷發作，畢竞回憶中的事物都是美好和惡劣的才會留下深刻的記憶。</p><p>最後，今晚也去跑步了，今天達成2.5KM，一共用了用了20分鐘。</p><p>以下是Breaking NEWS</p><img src="/2018/06/06/日記/photo_2018-06-06_23-50-39.jpg" title="[魔法禁书目录Ⅲ]"><blockquote><p>TV动画「魔法禁书目录Ⅲ」确认在今年10月开始放送！</p><p>【STAFF】<br>監督：錦織博<br>シリーズ構成：吉野弘幸<br>キャラクターデザイン：田中雄一<br>制作：J.C.STAFF</p><p>【CAST】<br>上条当麻：阿部敦<br>インデックス：井口裕香<br>御坂美琴：佐藤利奈<br>アクセラレータ：岡本信彦<br>浜面仕上：日野聡 ​​​</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;兩天把四本小說看完了，內容很輕鬆但又滿滿砂糖。&lt;/p&gt;
&lt;p&gt;只要沒有擁有，就不會擔心失去。因為過於滿足現況而忽視身邊的問題，是我極力避免發生的情況。我會為很多事情作出最壞打算，雖然有居安思危的說法，但過度未雨綢繆、過分考慮令我不知不覺變成過分焦慮的性格，經常杞人憂天、自我
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>流水帳與我</title>
    <link href="https://blog.sukitsuki.com/2018/06/05/%E6%B5%81%E6%B0%B4%E5%B8%B3%E8%88%87%E6%88%91/"/>
    <id>https://blog.sukitsuki.com/2018/06/05/流水帳與我/</id>
    <published>2018-06-05T13:01:49.000Z</published>
    <updated>2018-06-08T15:13:18.015Z</updated>
    
    <content type="html"><![CDATA[<p>昨天和人聊起近月第一代的感想，老實說不太喜歡一代的人設。遊星的人設實在太弱氣，雖然結局時被感動一把但最後還是被露娜上了（勸退三連。</p><p>今天就跑去去食狗糧小說(學姐與我)，這本小說其實在幾年前己經看過。</p><p>最近發現原來還有第5卷和第0卷，不過第4卷的結局也不錯。下次去日本找個機會去書局找找看，但畢業十多年前的書了，不打算給太大期望。</p><p>讀後感就等看完了再回來寫吧。</p><p>別外，今天跑步成功達成2KM，需時16分鐘，今天就喝一杯Gin tonic慶祝一下吧。</p><p>題外話坦奎瑞10號乾喝實在太難入口了，但是加了奎寧成了絕配，這又簡單又好喝的調酒我最喜歡了。</p><p>題外話2, GitHub和Microsoft之後的交流實錘了，不過這沒什麼好評論的，日子怎麼過還是怎麼過，畢業GitHub己經不是單純的代碼托管平台，而是交流平台。別外昨晚的WWDC，雖然沒有看直播不過在群裹還是看到滿多吐嘈。（還有人說這是抄Google I/Owww. 感覺上iOS己經沒什麼創新，可能對iOSer來說很創新吧www，因為很多功能在Android上己經實現了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天和人聊起近月第一代的感想，老實說不太喜歡一代的人設。遊星的人設實在太弱氣，雖然結局時被感動一把但最後還是被露娜上了（勸退三連。&lt;/p&gt;
&lt;p&gt;今天就跑去去食狗糧小說(學姐與我)，這本小說其實在幾年前己經看過。&lt;/p&gt;
&lt;p&gt;最近發現原來還有第5卷和第0卷，不過第4卷的結
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>從Docker到k8s</title>
    <link href="https://blog.sukitsuki.com/2018/06/05/%E5%BE%9Edocker%E5%88%B0k8s/"/>
    <id>https://blog.sukitsuki.com/2018/06/05/從docker到k8s/</id>
    <published>2018-06-05T02:24:03.000Z</published>
    <updated>2018-06-08T15:13:18.015Z</updated>
    
    <content type="html"><![CDATA[<p>Docker, 是一個管理虛擬化的工具，原理上是利用Linux 上的LXC和cgroup提供OS Level的虛擬化。Docker 提供直觀的CMD管理方式,可分佈的Image打包方案，腳本式配置，令Docker 成為現今最簡單，最有效的開發工具之一。</p><p>Docker為開發提供快速建立開發環境，在沒有docker 之前，一般開發環境需要配置半天到一天不等。在建立docker compose 檔案後，可以一建配置開發所需要的環境，如mysql, mongode, redis, activemq 等等。</p><p>雖然Docker可以滿足單機上的開發和部署需求，但在分佈式和集群部署上的管理並不方便，Kubernetes(K8s)因此誕生。</p><p><img src="https://raw.githubusercontent.com/cncf/landscape/master/landscape/CloudNativeLandscape_latest.png" alt="img"></p><p>K8s是一系列的解決案，本是是Google 內部的部署安案(<a href="https://research.google.com/pubs/pub43438.html" target="_blank" rel="noopener">Borg</a>)開源等來。K8s 主力解決管理大量機器需要的人手，時間和配置，以減輕維護所需成本。</p><p>K8s 主要由Pod，Service，Deployment，Node等組成而成。</p><blockquote><p>Pod</p></blockquote><p>Pod 最K8s中最少的組件相等放Docker中的Image/Instance。</p><blockquote><p>Deployment</p></blockquote><p>Deployment是配置一組Pod的詳細內容，比如Pod的數目，CPU和memory的分配，Pod expose的port, persistent volume 的掛載等等。</p><blockquote><p>Service</p></blockquote><p>而Service 是管理 Deployment中expose的port mapping，分別有ClusterIp NodePort, LoadBalancer 三種配置。 </p><p>ClusterIp 是只分別 k8s 內部Ip，外部不能直接Access到Pod的Port，</p><p>NodePort是把每一個Node上指定的port 連接到Serivce 綁定的Pod配置的expose port上，但NodePort只可以用30000-32767段，適合用在內部網絡暴露port的需求。</p><p>最後LoadBalancer 一般用在AWS，GCP，Azure等Cloud service上，因為這個配置需要提供公開IP的地址，是用作整合Cloud provider的LoadBalancer功能。如果是自建K8s 可以用 Linux virtual ip 作Loadbalance NAT到NodePort上，從而達到相同功能。</p><blockquote><p>Node</p></blockquote><p>Node相常於K8s 群集上每一台機器的Instance，而Node有Master, Slaver之分。在K8s上Master Node只能配置單數數目，主要作用是調度K8s的任務和Pod分配等工能，Slaver Node主要是乘載Pod的容器。</p><blockquote><p>Namespces</p></blockquote><blockquote><p>Ingress</p></blockquote><blockquote><p>Config</p></blockquote><blockquote><p>Secrets</p></blockquote><blockquote><p>Persistent Volume Claims</p></blockquote><blockquote><p>Stateful Sets</p></blockquote><blockquote><p>Jobs</p></blockquote><blockquote><p>Cron Jobs</p></blockquote><blockquote><p>Daemon Sets</p></blockquote><blockquote><p>RBAC</p></blockquote><p>待續</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker, 是一個管理虛擬化的工具，原理上是利用Linux 上的LXC和cgroup提供OS Level的虛擬化。Docker 提供直觀的CMD管理方式,可分佈的Image打包方案，腳本式配置，令Docker 成為現今最簡單，最有效的開發工具之一。&lt;/p&gt;
&lt;p&gt;Doc
      
    
    </summary>
    
      <category term="DevOps" scheme="https://blog.sukitsuki.com/categories/DevOps/"/>
    
    
  </entry>
  
  <entry>
    <title>日記</title>
    <link href="https://blog.sukitsuki.com/2018/06/04/%E6%97%A5%E8%A8%98/"/>
    <id>https://blog.sukitsuki.com/2018/06/04/日記/</id>
    <published>2018-06-04T11:16:42.000Z</published>
    <updated>2018-06-08T15:13:18.015Z</updated>
    
    <content type="html"><![CDATA[<p>今天就補了About 和記錄了一些正在看或之後會看的小說和動畫。</p><p>ukagaka 0進度。</p><blockquote><p>閒聊</p></blockquote><p>這兩天因為M$公佈說要收購Github搞得滿成風雨，我就靜靜看著ww。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天就補了About 和記錄了一些正在看或之後會看的小說和動畫。&lt;/p&gt;
&lt;p&gt;ukagaka 0進度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;閒聊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這兩天因為M$公佈說要收購Github搞得滿成風雨，我就靜靜看著ww。&lt;/p&gt;

      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>隨筆 2018-06-03</title>
    <link href="https://blog.sukitsuki.com/2018/06/03/%E9%9A%A8%E7%AD%86/"/>
    <id>https://blog.sukitsuki.com/2018/06/03/隨筆/</id>
    <published>2018-06-03T15:57:10.000Z</published>
    <updated>2018-06-08T15:13:18.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="閒聊"><a href="#閒聊" class="headerlink" title="閒聊"></a>閒聊</h3><p>從昨天開始練習跑步，先從跑1km到今天跑1.5km 以6kmph的速度。</p><p>目標在下星期能跑2~2.5km以上吧。</p><p>別外，又是補小說坑的時間。上一次看小說大約是魔劣動畫化的時候了，差不多有四年多了。</p><p>最近看完的小說是<a href="https://arifureta.com/" target="_blank" rel="noopener">平凡職業造就世界最強</a><em>ありふれた職業で世界最強</em>，期待明年動畫化(2019年4月番，跳票啦)。</p><img src="/2018/06/03/隨筆/1aa90a0ba56447fe98d17e3aa3f18a7a.jpg" title="[ユエ]"><p>別一本正在看的是<a href="https://ncode.syosetu.com/n8541cr/" target="_blank" rel="noopener">異世界薬局</a>，這本小說算是一本醫學科普書。文中有不少醫學智識和專業術語，辛苦翻譯大大了(wwww。</p><h3 id="開發"><a href="#開發" class="headerlink" title="開發"></a>開發</h3><p>Blog 修正一些因為PJAX 引起的bug， 主要是把一些script遷移動global header上，以及把theme bootstrap和reset 的順序修改一下。</p><p>別外用了dirty fix把留言版不更新和沒有顯示的問題，有空再重構一下。</p><p>其次開了一個新repo，在未來一段時間把ukagaka寫出來，數據庫從之前的 Google sheets 換成 Firebase 的 realtime database上。 預計寫一到兩個星期。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;閒聊&quot;&gt;&lt;a href=&quot;#閒聊&quot; class=&quot;headerlink&quot; title=&quot;閒聊&quot;&gt;&lt;/a&gt;閒聊&lt;/h3&gt;&lt;p&gt;從昨天開始練習跑步，先從跑1km到今天跑1.5km 以6kmph的速度。&lt;/p&gt;
&lt;p&gt;目標在下星期能跑2~2.5km以上吧。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>遲到的2018第一篇</title>
    <link href="https://blog.sukitsuki.com/2018/06/01/%E9%81%B2%E5%88%B0%E7%9A%842018%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>https://blog.sukitsuki.com/2018/06/01/遲到的2018第一篇/</id>
    <published>2018-06-01T03:24:54.000Z</published>
    <updated>2018-06-08T15:13:18.011Z</updated>
    
    <content type="html"><![CDATA[<p>久違的日記又開始啦（其實是第一編吧，笑</p><p>呢半年發生左好多事啊 生活上 工作上等等等。。。</p><p>首先工作上既技術轉型 由以前既Java轉到時下流行既NodeJs</p><p>而用既工具都完全大變身 由Spring為主變成 Angular, React, React Native 等等</p><p>正式向（偽）頁面仔的方向前進啦。 </p><p>而生活上因為因為私人原因所以離開香港一段時間，而寫呢編日記時己經是一個多月後既事。</p><p>最後希望每星期都可以寫一編日記吧(眼神死。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;久違的日記又開始啦（其實是第一編吧，笑&lt;/p&gt;
&lt;p&gt;呢半年發生左好多事啊 生活上 工作上等等等。。。&lt;/p&gt;
&lt;p&gt;首先工作上既技術轉型 由以前既Java轉到時下流行既NodeJs&lt;/p&gt;
&lt;p&gt;而用既工具都完全大變身 由Spring為主變成 Angular, React
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>使用CircleCI自動构建Hexo Github Page</title>
    <link href="https://blog.sukitsuki.com/2017/11/11/cricleci-hexo/"/>
    <id>https://blog.sukitsuki.com/2017/11/11/cricleci-hexo/</id>
    <published>2017-11-11T22:51:33.000Z</published>
    <updated>2018-06-08T15:13:18.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用CircleCI原因"><a href="#使用CircleCI原因" class="headerlink" title="使用CircleCI原因"></a>使用CircleCI原因</h1><p>CricleCI有免費的限額</p><ul><li>無限repos</li><li>無限users</li><li>每月1,500 build minutes</li></ul><p>不錯的 Resources (每次构建不到20秒)</p><p>每個container 獨佔 2CPU/4096MB</p><p>支持workflow</p><p>簡單配置(使用yaml)</p><p>支持Docker 分離构建環境 (可以使用不同 NodeJs Ruby Python version)</p><p>支持cache加速 避免重複下載node_module</p><p>支持Mac构建環境(付費功能)</p><h1 id="Hexo-自動构建發佈"><a href="#Hexo-自動构建發佈" class="headerlink" title="Hexo 自動构建發佈"></a>Hexo 自動构建發佈</h1><p><a href="https://circleci.com/" target="_blank" rel="noopener">https://circleci.com/</a></p><ul><li><p>先在CircleCI建立帳</p><p>推薦使用GitHub 帳號SSO連結</p></li><li><p>建立<code>circle.yml</code> 或 <code>.circleci/config.yml.</code></p><p>Demo <a href="https://circleci.com/docs/2.0/demo-apps/" target="_blank" rel="noopener">https://circleci.com/docs/2.0/demo-apps/</a></p></li><li><p>如果Theme是git submodule 需要在config加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run:</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">sync</span> <span class="bullet">--recursive</span></span><br><span class="line"><span class="attr">- run:</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--recursive</span> <span class="bullet">--init</span></span><br></pre></td></tr></table></figure></li><li><p>在Porject設定裹加入Checkout keys </p></li><li><p>大功告成</p> <img src="/2017/11/11/cricleci-hexo/CircleCI.png" title="[Perview]"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用CircleCI原因&quot;&gt;&lt;a href=&quot;#使用CircleCI原因&quot; class=&quot;headerlink&quot; title=&quot;使用CircleCI原因&quot;&gt;&lt;/a&gt;使用CircleCI原因&lt;/h1&gt;&lt;p&gt;CricleCI有免費的限額&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無限
      
    
    </summary>
    
      <category term="DevOps" scheme="https://blog.sukitsuki.com/categories/DevOps/"/>
    
    
      <category term="Web" scheme="https://blog.sukitsuki.com/tags/Web/"/>
    
      <category term="Continuous integration" scheme="https://blog.sukitsuki.com/tags/Continuous-integration/"/>
    
      <category term="Continuous delivery." scheme="https://blog.sukitsuki.com/tags/Continuous-delivery/"/>
    
      <category term="CircleCI" scheme="https://blog.sukitsuki.com/tags/CircleCI/"/>
    
      <category term="Hexo" scheme="https://blog.sukitsuki.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac和Windows的MIME Type 不同</title>
    <link href="https://blog.sukitsuki.com/2017/11/09/mime-type-different/"/>
    <id>https://blog.sukitsuki.com/2017/11/09/mime-type-different/</id>
    <published>2017-11-09T22:28:35.000Z</published>
    <updated>2018-06-08T15:13:18.007Z</updated>
    
    <content type="html"><![CDATA[<p>在MDN和Microsoft的文檔上可以找發現</p><p>不同平台和不同瀏覽器上傳文件都有分別</p><p>如果後台需要驗查MIME type的系統 或部置了應用防火牆(web appilcatoin firewall)就需要在不同OS和瀏覽器上做測試</p><table><thead><tr><th>副檔名</th><th>Mac (MDN)</th><th>Windows (MSDN)</th></tr></thead><tbody><tr><td>.zip</td><td>application/zip</td><td>application/x-zip-compressed</td></tr><tr><td>.csv</td><td>text/csv</td><td>application/vnd.ms-exce</td></tr></tbody></table><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types" target="_blank" rel="noopener">ref: MDN MIME</a> </p><p><a href="https://technet.microsoft.com/en-us/library/cc995276.aspx" target="_blank" rel="noopener">ref: MSDN MIME 表</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在MDN和Microsoft的文檔上可以找發現&lt;/p&gt;
&lt;p&gt;不同平台和不同瀏覽器上傳文件都有分別&lt;/p&gt;
&lt;p&gt;如果後台需要驗查MIME type的系統 或部置了應用防火牆(web appilcatoin firewall)就需要在不同OS和瀏覽器上做測試&lt;/p&gt;
&lt;ta
      
    
    </summary>
    
      <category term="Debug" scheme="https://blog.sukitsuki.com/categories/Debug/"/>
    
    
      <category term="Web" scheme="https://blog.sukitsuki.com/tags/Web/"/>
    
      <category term="Javascript" scheme="https://blog.sukitsuki.com/tags/Javascript/"/>
    
      <category term="Browser" scheme="https://blog.sukitsuki.com/tags/Browser/"/>
    
      <category term="WAF" scheme="https://blog.sukitsuki.com/tags/WAF/"/>
    
  </entry>
  
  <entry>
    <title>網站 PJAX 優化</title>
    <link href="https://blog.sukitsuki.com/2017/11/06/Pjax-change/"/>
    <id>https://blog.sukitsuki.com/2017/11/06/Pjax-change/</id>
    <published>2017-11-06T02:21:03.000Z</published>
    <updated>2018-06-27T11:47:48.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PJAX"><a href="#PJAX" class="headerlink" title="PJAX"></a>PJAX</h1><p>PJAX 是一項由HTML5 pushState 而產生的技術。</p><p>這項技術可以在不全頁刷新下更新部分DOM object，避免面頁因為跳轉而產生重新載入的不必要副效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PJAX&quot;&gt;&lt;a href=&quot;#PJAX&quot; class=&quot;headerlink&quot; title=&quot;PJAX&quot;&gt;&lt;/a&gt;PJAX&lt;/h1&gt;&lt;p&gt;PJAX 是一項由HTML5 pushState 而產生的技術。&lt;/p&gt;
&lt;p&gt;這項技術可以在不全頁刷新下更新部分DOM o
      
    
    </summary>
    
      <category term="Front-end" scheme="https://blog.sukitsuki.com/categories/Front-end/"/>
    
      <category term="JavaScript" scheme="https://blog.sukitsuki.com/categories/Front-end/JavaScript/"/>
    
    
      <category term="Web" scheme="https://blog.sukitsuki.com/tags/Web/"/>
    
      <category term="Blog" scheme="https://blog.sukitsuki.com/tags/Blog/"/>
    
      <category term="JavaScript" scheme="https://blog.sukitsuki.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2017年的目標清單</title>
    <link href="https://blog.sukitsuki.com/2017/11/05/personal-todo/"/>
    <id>https://blog.sukitsuki.com/2017/11/05/personal-todo/</id>
    <published>2017-11-05T19:09:17.000Z</published>
    <updated>2018-06-08T15:13:18.007Z</updated>
    
    <content type="html"><![CDATA[<p>雖然己經2017年11月了，但2017年還沒有完的還有55天。</p><p>有心唔怕遲，(好似係</p><h1 id="想做的東西"><a href="#想做的東西" class="headerlink" title="想做的東西"></a>想做的東西</h1><ul><li style="list-style: none"><input type="checkbox" checked> 重新建立Blog</li><li style="list-style: none"><input type="checkbox"> 定立2018年的目標</li><li style="list-style: none"><input type="checkbox"> OCR bot (無限期延遲)</li><li style="list-style: none"><input type="checkbox"> 更新Tplayer bot</li><li style="list-style: none"><input type="checkbox"> 退壓制坑？</li></ul><h1 id="想學的東西"><a href="#想學的東西" class="headerlink" title="想學的東西"></a>想學的東西</h1><ul><li style="list-style: none"><input type="checkbox"> 學吉他</li><li style="list-style: none"><input type="checkbox"> 學日文</li></ul><h1 id="想買的東西"><a href="#想買的東西" class="headerlink" title="想買的東西"></a>想買的東西</h1><ul><li style="list-style: none"><input type="checkbox"> to be cont.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;雖然己經2017年11月了，但2017年還沒有完的還有55天。&lt;/p&gt;
&lt;p&gt;有心唔怕遲，(好似係&lt;/p&gt;
&lt;h1 id=&quot;想做的東西&quot;&gt;&lt;a href=&quot;#想做的東西&quot; class=&quot;headerlink&quot; title=&quot;想做的東西&quot;&gt;&lt;/a&gt;想做的東西&lt;/h1&gt;&lt;ul&gt;
      
    
    </summary>
    
      <category term="Personal" scheme="https://blog.sukitsuki.com/categories/Personal/"/>
    
    
      <category term="Personal" scheme="https://blog.sukitsuki.com/tags/Personal/"/>
    
      <category term="Tech" scheme="https://blog.sukitsuki.com/tags/Tech/"/>
    
  </entry>
  
</feed>
