<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ツカツキ アリス</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sukitsuki.com/"/>
  <updated>2019-04-14T13:06:14.198Z</updated>
  <id>https://blog.sukitsuki.com/</id>
  
  <author>
    <name>調月有栖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>記一次使用 Makefile 和 Docker 的坑</title>
    <link href="https://blog.sukitsuki.com/2019/04/13/%E8%A8%98%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8-makefile-%E5%92%8C-docker-%E7%9A%84%E5%9D%91/"/>
    <id>https://blog.sukitsuki.com/2019/04/13/記一次使用-makefile-和-docker-的坑/</id>
    <published>2019-04-13T20:00:07.000Z</published>
    <updated>2019-04-14T13:06:14.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在使用 make 和 Docker 構建發佈影像時，重構了一下 Makefile 而引起不算是 Bug 的 bug.</p><h3 id="事原"><a href="#事原" class="headerlink" title="事原"></a>事原</h3><p>Makefile 指令如果在用同的文件夾突特時 會出現 <code>make: 指令 is up to date.</code> 這樣奇怪的信訊？（？</p><p>別外加上在 Docker build 的時候 make 指令的 step 出現 up to date 以為是被 cached。</p><p>最後在 <code>COPY --from=build-dev</code> 時找不到文件 出現 <code>/var/lib/docker/overlay2/</code> 找不到文件 而不是在 docker 對應路徑。</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>在 Makefile 裹給指令 加上 <code>.PHONY</code> 注解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A phony target is one that is not really the name of a file; rather it is just a name for a recipe to be executed when you make an explicit request. There are two reasons to use a phony target: to avoid a conflict with a file of the same name, and to improve performance.</span><br><span class="line"></span><br><span class="line">If you write a rule whose recipe will not create the target file, the recipe will be executed every time the target comes up for remaking.</span><br></pre></td></tr></table></figure><p>GNU默认makefile target是一个文件，因此他会先检测同级目录下是否已存在这个文件，如果存在，则会abort掉make 进程，但目标不是文件的话，则会出现up to date的情况，这种情况需要.PHONY来避免问题的出现，phony的意思是“赝品”，在这里可以形象的理解成“不是文件”。</p><p><a href="https://blog.csdn.net/LinuxTiger/article/details/7955060" target="_blank" rel="noopener">https://blog.csdn.net/LinuxTiger/article/details/7955060</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在使用 make 和 Docker 構建發佈影像時，重構了一下 Makefile 而引起不算是 Bug 的 bug.&lt;/p&gt;&lt;h3 id=&quot;事原&quot;&gt;&lt;a href=&quot;#事原&quot; class=&quot;headerlink&quot; title=&quot;事原&quot;&gt;&lt;/a&gt;事原&lt;/h3&gt;&lt;p&gt;Makefile 指令如果在用同的文件夾突特時 會出現 &lt;code&gt;make: 指令 is up to date.&lt;/code&gt; 這樣奇怪的信訊？（？&lt;/p&gt;&lt;p&gt;別外加上在 Docker build 的時候 make 指令的 step 出現 up to date 以為是被 cached。&lt;/p&gt;&lt;p&gt;最後在 &lt;code&gt;COPY --from=build-dev&lt;/code&gt; 時找不到文件 出現 &lt;code&gt;/var/lib/docker/overlay2/&lt;/code&gt; 找不到文件 而不是在 docker 對應路徑。&lt;/p&gt;&lt;h3 id=&quot;解決&quot;&gt;&lt;a href=&quot;#解決&quot; class=&quot;headerlink&quot; title=&quot;解決&quot;&gt;&lt;/a&gt;解決&lt;/h3&gt;&lt;p&gt;在 Makefile 裹給指令 加上 &lt;code&gt;.PHONY&lt;/code&gt; 注解。&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A phony target is one that is not really the name of a file; rather it is just a name for a recipe to be executed when you make an explicit request. There are two reasons to use a phony target: to avoid a conflict with a file of the same name, and to improve performance.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you write a rule whose recipe will not create the target file, the recipe will be executed every time the target comes up for remaking.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;GNU默认makefile target是一个文件，因此他会先检测同级目录下是否已存在这个文件，如果存在，则会abort掉make 进程，但目标不是文件的话，则会出现up to date的情况，这种情况需要.PHONY来避免问题的出现，phony的意思是“赝品”，在这里可以形象的理解成“不是文件”。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://blog.sukitsuki.com/categories/Docker/"/>
    
      <category term="Linux" scheme="https://blog.sukitsuki.com/categories/Docker/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>把OPENSSL 私鑰轉換成 RSA 私鈅</title>
    <link href="https://blog.sukitsuki.com/2019/04/04/%E6%8A%8AOPENSSL-%E7%A7%81%E9%91%B0%E8%BD%89%E6%8F%9B%E6%88%90-RSA-%E7%A7%81%E9%88%85/"/>
    <id>https://blog.sukitsuki.com/2019/04/04/把OPENSSL-私鑰轉換成-RSA-私鈅/</id>
    <published>2019-04-04T19:43:03.000Z</published>
    <updated>2019-04-04T12:59:22.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事原"><a href="#事原" class="headerlink" title="事原"></a>事原</h2><p>由於 OpenSSH version 7.9p1 修改了 預設的私鑰輸出格式，</p><p>從 <code>-----BEGIN RSA PRIVATE KEY-----</code> 改成 <code>-----BEGIN OPENSSH PRIVATE KEY-----</code></p><p>所以 Jetbrain 的全家桶都不能讀取正確的私鑰。</p><h3 id="指令-把原有的私鑰-重新導出"><a href="#指令-把原有的私鑰-重新導出" class="headerlink" title="指令 - 把原有的私鑰 重新導出"></a>指令 - 把原有的私鑰 重新導出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.ssh/id_rsa ~/.ssh/id_rsa.bak</span><br><span class="line">ssh-keygen -p -m PEM -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="指令-重新生成新的-PEM-格式私鑰"><a href="#指令-重新生成新的-PEM-格式私鑰" class="headerlink" title="指令 - 重新生成新的 PEM 格式私鑰"></a>指令 - 重新生成新的 PEM 格式私鑰</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.ssh/id_rsa ~/.ssh/id_rsa.bak</span><br><span class="line"></span><br><span class="line">ssh-keygen -m PEM -C &quot;email&quot;</span><br><span class="line">或</span><br><span class="line">ssh-keygen -t rsa -b 4096 -m pem -C &quot;email&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事原&quot;&gt;&lt;a href=&quot;#事原&quot; class=&quot;headerlink&quot; title=&quot;事原&quot;&gt;&lt;/a&gt;事原&lt;/h2&gt;&lt;p&gt;由於 OpenSSH version 7.9p1 修改了 預設的私鑰輸出格式，&lt;/p&gt;&lt;p&gt;從 &lt;code&gt;-----BEGIN RSA P
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SS PAC模式白名單</title>
    <link href="https://blog.sukitsuki.com/2019/03/05/Shadowsocks-%E7%99%BD%E5%90%8D%E5%96%AE/"/>
    <id>https://blog.sukitsuki.com/2019/03/05/Shadowsocks-白名單/</id>
    <published>2019-03-05T20:36:46.000Z</published>
    <updated>2019-04-04T12:59:22.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用 SS 但又不想使用全局，避免大量跑光流量，需要定制白名單給 google / youtube。</p><h1 id="白名單制作"><a href="#白名單制作" class="headerlink" title="白名單制作"></a>白名單制作</h1><p>由於 SS 沒有自帶白名單模式，而且自帶的 gfwlist.txt 內有避開國內的域名，所以需要先制作一分全局的 gfwlist.txt</p><p><code>||*</code> 是全局的規則，我們需要先做base64處理，下面是處理好的 <code>gfwlist.txt</code> 和 gist 地址。</p><p>之後需要放到 Github 或其他地方寄存。</p><script src="https://gist.github.com/Tsuki/67e448466baf453a9a9eca4a6d55592a.js"></script><p><a href="https://gist.githubusercontent.com/Tsuki/67e448466baf453a9a9eca4a6d55592a/raw/4e262236bf1cb21348612274fbd5b5cf3da1afe7/sswl.txt" target="_blank" rel="noopener">https://gist.githubusercontent.com/Tsuki/67e448466baf453a9a9eca4a6d55592a/raw/4e262236bf1cb21348612274fbd5b5cf3da1afe7/sswl.txt</a></p><p>之後在 User-rule 下加入想要白名單的域名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@@googlevideo.com</span><br><span class="line">@@youtube.com</span><br><span class="line">@@google.com</span><br><span class="line">@@ytimg.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用 SS 但又不想使用全局，避免大量跑光流量，需要定制白名單給 google / youtube。&lt;/p&gt;&lt;h1 id=&quot;白名單制作&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Async/Await Golang式寫法</title>
    <link href="https://blog.sukitsuki.com/2019/02/09/Async-Await-golang%E5%BC%8F%E5%AF%AB%E6%B3%95/"/>
    <id>https://blog.sukitsuki.com/2019/02/09/Async-Await-golang式寫法/</id>
    <published>2019-02-09T11:28:10.000Z</published>
    <updated>2019-04-04T12:59:22.508Z</updated>
    
    <content type="html"><![CDATA[<p>使用 promise 和 result pair 避免 try-catch style.</p><p>Javascript 例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// to.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">to</span>(<span class="params">promise: <span class="built_in">Promise</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">        .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="literal">null</span>, data];</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> [err]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> to <span class="keyword">from</span> <span class="string">'to'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AccountComponent <span class="keyword">implements</span> OnInit, OnChanges&#123;</span><br><span class="line">    <span class="keyword">async</span> ngOnChanges(changes: SimpleChanges) &#123;</span><br><span class="line">        <span class="comment">// TODO check change</span></span><br><span class="line">        <span class="keyword">let</span> err, result;</span><br><span class="line">        [err, result] = <span class="keyword">await</span> to(<span class="keyword">this</span>.httpService.listAccount(<span class="keyword">this</span>.data).toPromise());</span><br><span class="line">        <span class="keyword">if</span> (err != <span class="literal">null</span> &amp;&amp; err <span class="keyword">instanceof</span> HttpErrorResponse) &#123;</span><br><span class="line">          <span class="comment">// err in</span></span><br><span class="line">          <span class="keyword">this</span>.notice.create(<span class="string">'error'</span>, err.error.msg);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是 Golang 的寫法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err, result := httpService.listAccount(data); err != <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="comment">// process...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// error handling...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/" target="_blank" rel="noopener">How to write async await without try-catch blocks in Javascript - dima</a></p><p><a href="https://segmentfault.com/a/1190000011802045" target="_blank" rel="noopener">从不用 try-catch 实现的 async/await 语法说错误处理</a></p><p>題外話 – try-catch 的惡魔</p><p><a href="http://teddy-chen-tw.blogspot.com/2011/05/checked-or-unchecked-exceptions-1.html" target="_blank" rel="noopener">Checked or unchecked exceptions (1)</a></p><p><a href="http://www.importnew.com/21117.html" target="_blank" rel="noopener">Java中的Checked Exception——美丽世界中潜藏的恶魔</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 promise 和 result pair 避免 try-catch style.&lt;/p&gt;&lt;p&gt;Javascript 例子&lt;/p&gt;&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// to.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;to&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;promise: &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; promise&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; [err]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; to &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;to&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; AccountComponent &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; OnInit, OnChanges&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; ngOnChanges(changes: SimpleChanges) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// TODO check change&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; err, result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [err, result] = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; to(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.httpService.listAccount(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.data).toPromise());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; err &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; HttpErrorResponse) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// err in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.notice.create(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, err.error.msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以下是 Golang 的寫法&lt;/p&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err, result := httpService.listAccount(data); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// process...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// error handling...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to write async await without try-catch blocks in Javascript - dima&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000011802045&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从不用 try-catch 实现的 async/await 语法说错误处理&lt;/a&gt;&lt;/p&gt;&lt;p&gt;題外話 – try-catch 的惡魔&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://teddy-chen-tw.blogspot.com/2011/05/checked-or-unchecked-exceptions-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Checked or unchecked exceptions (1)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 中文在地化機制</title>
    <link href="https://blog.sukitsuki.com/2019/02/02/Android-%E4%B8%AD%E6%96%87%E5%9C%A8%E5%9C%B0%E5%8C%96%E6%A9%9F%E5%88%B6/"/>
    <id>https://blog.sukitsuki.com/2019/02/02/Android-中文在地化機制/</id>
    <published>2019-02-02T12:03:44.000Z</published>
    <updated>2019-04-04T12:59:22.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在-Andorid-7-之前，"><a href="#在-Andorid-7-之前，" class="headerlink" title="在 Andorid 7 之前，"></a>在 Andorid 7 之前，</h3><ul><li><code>zh-CN</code> (簡體)</li><li><code>zh-TW</code> (繁體)</li><li>特殊子集:<ul><li><code>zh-SG</code> (簡體)</li><li><code>zh-HK</code> (繁體)</li><li><code>zh-MO</code> (繁體)</li></ul></li></ul><h3 id="在-Android-7-及之後，-喵喵喵？"><a href="#在-Android-7-及之後，-喵喵喵？" class="headerlink" title="在 Android 7 及之後，(喵喵喵？)"></a>在 Android 7 及之後，(喵喵喵？)</h3><ul><li><code>zh-Hans-CN</code> (簡體)</li><li><code>zh-Hans-MO</code> (簡體)</li><li><code>zh-Hans-HK</code> (簡體)</li><li><code>zh-Hans-SG</code> (簡體)</li><li><code>zh-Hant-TW</code> (繁體)</li><li><code>zh-Hant-HK</code> (繁體)</li><li><code>zh-Hant-MO</code> (繁體)</li></ul><p>###Android 7 Fallback 機制</p><p><code>zh-Hans-*</code> 退回到 <code>zh</code></p><p><code>zh-Hant-*</code> 退回到 <code>zh-Hant (zh-rTW)</code></p><p>而 <code>zh-Hans-MO</code> 和 <code>zh-Hans-HK</code> 需要指定 <code>values-b+zh+Hans+HK/MO</code> 再退回 <code>zh-Hans-*</code> 處理</p><p><a href="https://gist.github.com/amake/0ac7724681ac1c178c6f95a5b09f03ce#new-locales-vs-old-locales-chinese" target="_blank" rel="noopener">Correct localization on Android 7</a></p><p><a href="https://developer.android.com/guide/topics/resources/multilingual-support" target="_blank" rel="noopener">Language and locale resolution overview</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在-Andorid-7-之前，&quot;&gt;&lt;a href=&quot;#在-Andorid-7-之前，&quot; class=&quot;headerlink&quot; title=&quot;在 Andorid 7 之前，&quot;&gt;&lt;/a&gt;在 Andorid 7 之前，&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;zh-CN&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 文件保存和索引</title>
    <link href="https://blog.sukitsuki.com/2019/02/02/Android-%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%92%8C%E7%B4%A2%E5%BC%95/"/>
    <id>https://blog.sukitsuki.com/2019/02/02/Android-文件保存和索引/</id>
    <published>2019-02-02T12:02:58.000Z</published>
    <updated>2019-04-04T12:59:22.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>Android 在保存文件後，如果不在索引目錄下是不會自動建立索引，需要調用 <code>MediaScanner</code> 發出一個廣播和指定目錄或文件的指令才會實行。</p><p>實作 <code>MediaScannerConnectionClient</code> 類，發出掃描指令並在完成後斷開連接。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleMediaScanner</span></span>(<span class="keyword">val</span> context: Context, <span class="keyword">val</span> file: File) :</span><br><span class="line">  MediaScannerConnection.MediaScannerConnectionClient &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> mediaScannerConnection</span><br><span class="line">    <span class="keyword">by</span> lazy &#123; MediaScannerConnection(context, <span class="keyword">this</span>) &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMediaScannerConnected</span><span class="params">()</span></span> =</span><br><span class="line">    mediaScannerConnection.scanFile(file.absolutePath, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScanCompleted</span><span class="params">(path: <span class="type">String</span>?, uri: <span class="type">Uri</span>?)</span></span> =</span><br><span class="line">    mediaScannerConnection.disconnect()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Context.<span class="title">takeScreenshot</span><span class="params">(bitmap: <span class="type">Bitmap</span>)</span></span>: String? &#123;</span><br><span class="line">  <span class="keyword">val</span> mediaStorageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)</span><br><span class="line">  <span class="keyword">val</span> timestamp = SimpleDateFormat(<span class="string">"yyyyMMdd_HHmmss"</span>).format(Date())</span><br><span class="line">  <span class="keyword">val</span> mediaFile = File(<span class="string">"<span class="subst">$&#123;mediaStorageDir.path&#125;</span><span class="subst">$&#123;File.separator&#125;</span><span class="variable">$timestamp</span>.jpg"</span>)</span><br><span class="line">  <span class="keyword">var</span> compress = <span class="literal">false</span></span><br><span class="line">  doAsync &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mediaStorageDir.exists() &amp;&amp; !mediaStorageDir.mkdirs()) &#123;</span><br><span class="line">      <span class="keyword">return</span><span class="symbol">@doAsync</span></span><br><span class="line">    &#125;</span><br><span class="line">    Timber.d(<span class="string">"screenshot: file <span class="subst">$&#123;mediaStorageDir.path&#125;</span><span class="subst">$&#123;File.separator&#125;</span><span class="variable">$timestamp</span>.jpg"</span>)</span><br><span class="line">    <span class="keyword">val</span> fos = FileOutputStream(mediaFile)</span><br><span class="line">    compress = bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">90</span>, fos)</span><br><span class="line">    fos.close()</span><br><span class="line">    SingleMediaScanner(<span class="keyword">this</span><span class="symbol">@takeScreenshot</span>, mediaStorageDir)</span><br><span class="line">  &#125;.<span class="keyword">get</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">if</span> (compress) mediaFile.toString() <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h3&gt;&lt;p&gt;Android 在保存文件後，如果不在索引目錄下是不會自動建立索引，需要調用 &lt;code&gt;MediaScanner&lt;/code&gt; 發出一個廣
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android requestedOrientation 坑</title>
    <link href="https://blog.sukitsuki.com/2019/01/30/Android-requestedOrientation-%E5%9D%91/"/>
    <id>https://blog.sukitsuki.com/2019/01/30/Android-requestedOrientation-坑/</id>
    <published>2019-01-30T14:42:39.000Z</published>
    <updated>2019-04-04T12:59:22.508Z</updated>
    
    <content type="html"><![CDATA[<p>如果在 Activity on Create 時 配置 <code>requestedOrientation</code> 等動作時會觸發 view 重新渲染，會令 view有機率發生奇怪的 dead thread 等情況。<code>Handler sending message to a Handler on a dead thread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT</span><br></pre></td></tr></table></figure><p>正確的做法是在 <code>AndroidManifest.xml</code> 上加入 <code>android:screenOrientation=&quot;portrait&quot;</code> 。</p><p><a href="https://developer.android.com/guide/topics/resources/runtime-changes" target="_blank" rel="noopener">Documentation: Handle configuration changes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果在 Activity on Create 時 配置 &lt;code&gt;requestedOrientation&lt;/code&gt; 等動作時會觸發 view 重新渲染，會令 view有機率發生奇怪的 dead thread 等情況。&lt;code&gt;Handler sending mes
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>選擇SFP的ONU端口</title>
    <link href="https://blog.sukitsuki.com/2019/01/03/%E9%81%B8%E6%93%87SFP%E7%9A%84ONU%E7%AB%AF%E5%8F%A3/"/>
    <id>https://blog.sukitsuki.com/2019/01/03/選擇SFP的ONU端口/</id>
    <published>2019-01-03T13:36:40.000Z</published>
    <updated>2019-01-03T08:24:29.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SFP接口"><a href="#SFP接口" class="headerlink" title="SFP接口"></a>SFP接口</h2><p>現時的路由器/交換器在需要接入光纖的時候，一般需要使用上 SFP 接口。</p><p>SFP 的接口比上一代的 GBIC 接口要小一點，這樣前端面版就可以接入更多的光纖。</p><p>SFP 接口分別有兩種制式，接 1G 或以下的 SFP 接口和接 1G 到 10G 的 SFP+ 接口。</p><p>雖然兩種制式的接口都一樣，但並一定不通用，部分交換機 SFP 接口同時支持兼容 SFP+。</p><h2 id="接口種類"><a href="#接口種類" class="headerlink" title="接口種類"></a>接口種類</h2><p>SFP 接口的種類可以從速率，光波長，傳送距離，光端接口，單模/雙模，單纖雙向(BiDi)/雙纖，端面。</p><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><p>按照速率分類：有155M/622M/1.25G/2.125G/4.25G/8G/10G，常見的有155M/1.25G/2.125G/10G。</p><h3 id="波長"><a href="#波長" class="headerlink" title="波長"></a>波長</h3><p>按照波長分類：有850nm/1310nm/1550nm/1490nm/1530nm/1610nm，多模常見的有850nm，單模的有1310nm/1550nm/1490nm。</p><h3 id="傳送距離"><a href="#傳送距離" class="headerlink" title="傳送距離"></a>傳送距離</h3><p>按照傳送距離分類：有5KM/20KM/40KM/80KM/120KM等，</p><h3 id="光端接口"><a href="#光端接口" class="headerlink" title="光端接口"></a>光端接口</h3><p>按照光端接口分類：常見的有SC/LC/FC/ST，</p><ul><li>FC (Ferrule Connector)，金屬接頭對光纖芯提供良好的保護，但它是用旋轉的方式，對光纖芯容易造成刮傷。</li><li>SC (Subscriber Connector / Standard Connector)，接頭主要應用一般固網環境中，提供良好的包裝強度。</li><li>LC (Lucent Connector / Local Connector)，接頭主要應用企業網絡環境中，用來取代SC接頭的，它的尺寸比較小，適合大量佈置。</li><li>ST (Straight Tip)，接頭有防呆卡榫避免接頭損毀，將線插入插座，然後旋轉外面的卡榫將之鎖住。</li></ul><h3 id="單模-雙模"><a href="#單模-雙模" class="headerlink" title="單模/雙模"></a>單模/雙模</h3><ul><li><p>多模光纖(MMF，Multi Mode Fiber)，纖芯較粗，可傳多種模式的光。但其模間色散較大，且隨傳輸距離的增加模間色散情況會逐漸加重。</p></li><li><p>單模光纖(SMF，Single Mode Fiber)，纖芯較細，只能傳一種模式的光。因此，其模間色散很小，適用於遠程通訊。</p></li></ul><h3 id="單纖雙向-BiDi-雙纖雙向"><a href="#單纖雙向-BiDi-雙纖雙向" class="headerlink" title="單纖雙向(BiDi)/雙纖雙向"></a>單纖雙向(BiDi)/雙纖雙向</h3><ul><li><p>單纖雙向，採用了WDM技術，通過一根光纖實現雙向傳輸信號，應用於高性能集成的雙工數據鏈路中，但是需要保證發射和接收的為不同波長的信號。常用光模塊的波長方案為單模1310nm/1550nm、1310nm/1490nm。</p></li><li><p>雙纖雙向，常規的光模塊都是雙纖的，有兩個光纖插孔，而單纖雙向光模塊只有一個插孔，一般的光模塊都需要兩個端口，一個用來發射數據，一個用來接收數據。</p></li></ul><p>單纖BIDI光模塊比較貴，但節省光纖資源，只需要1根光纖，適合家居式網絡 FTTx 等方案。</p><p>雙纖光模塊不需要配對使用，任意兩個光模塊都可以連接，適合企業內聯網方案，方便替換接口，但是需要多用一跟光纖。</p><h3 id="端面"><a href="#端面" class="headerlink" title="端面"></a>端面</h3><ul><li><p>PC (Physical Contact，及物理接觸) 是光纖跳線上光纖連接器最常見的研磨方式，被廣泛應用於電信運營商設備上。雖然光纖連接器端面看似平面，但實際上其端面經過輕微彎曲拋光，且彎曲最高點是纖芯中心，這樣可有效減少光纖組件之間的空氣隙，一般情況下，採用PC研磨方式的光纖跳線的回波損耗為-40dB。</p></li><li><p>UPC (Ultra Physical Contact，即超物理接觸) 是由PC演進而來，它對端面拋光進行了優化，從而獲得了更好的表面光潔度。UPC與PC一樣，其彎曲最高點在光纖芯中心，但UPC回波損耗相對於PC來說更高，一般是在-50dB（甚至更高）。它通常被用於以太網網絡設備上（如ODF光纖配線架、媒體轉換器和光纖交換機等），同時也用於電話系統。</p></li><li><p>APC (Angled Physical Contact，即角度物理接觸) 是光纖端面研磨的最新技術，其端面採用了8度夾角研磨方式，使其端面研磨更加精準，可有效減少反射，回波損耗大約在-60dB。APC一般用於CATV等高波長範圍的光學射頻應用。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SFP接口&quot;&gt;&lt;a href=&quot;#SFP接口&quot; class=&quot;headerlink&quot; title=&quot;SFP接口&quot;&gt;&lt;/a&gt;SFP接口&lt;/h2&gt;&lt;p&gt;現時的路由器/交換器在需要接入光纖的時候，一般需要使用上 SFP 接口。&lt;/p&gt;&lt;p&gt;SFP 的接口比上一代的 GBIC 接口要小一點，這樣前端面版就可以接入更多的光纖。&lt;/p&gt;&lt;p&gt;SFP 接口分別有兩種制式，接 1G 或以下的 SFP 接口和接 1G 到 10G 的 SFP+ 接口。&lt;/p&gt;&lt;p&gt;雖然兩種制式的接口都一樣，但並一定不通用，部分交換機 SFP 接口同時支持兼容 SFP+。&lt;/p&gt;&lt;h2 id=&quot;接口種類&quot;&gt;&lt;a href=&quot;#接口種類&quot; class=&quot;headerlink&quot; title=&quot;接口種類&quot;&gt;&lt;/a&gt;接口種類&lt;/h2&gt;&lt;p&gt;SFP 接口的種類可以從速率，光波長，傳送距離，光端接口，單模/雙模，單纖雙向(BiDi)/雙纖，端面。&lt;/p&gt;&lt;h3 id=&quot;速率&quot;&gt;&lt;a href=&quot;#速率&quot; class=&quot;headerlink&quot; title=&quot;速率&quot;&gt;&lt;/a&gt;速率&lt;/h3&gt;&lt;p&gt;按照速率分類：有155M/622M/1.25G/2.125G/4.25G/8G/10G，常見的有155M/1.25G/2.125G/10G。&lt;/p&gt;&lt;h3 id=&quot;波長&quot;&gt;&lt;a href=&quot;#波長&quot; class=&quot;headerlink&quot; title=&quot;波長&quot;&gt;&lt;/a&gt;波長&lt;/h3&gt;
    
    </summary>
    
      <category term="Network" scheme="https://blog.sukitsuki.com/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>當年今日</title>
    <link href="https://blog.sukitsuki.com/2019/01/01/%E7%95%B6%E5%B9%B4%E4%BB%8A%E6%97%A5/"/>
    <id>https://blog.sukitsuki.com/2019/01/01/當年今日/</id>
    <published>2019-01-01T10:54:24.000Z</published>
    <updated>2019-01-01T09:39:25.911Z</updated>
    
    <content type="html"><![CDATA[<iframe width="100%" height="525" src="https://www.youtube.com/embed/URUIcYDq3_I?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><code>很多時候，選擇並不需要經過多麼理性的思考。</code></p><p><code>困難的其實並非是選擇本身，而是思考選擇的過程。</code></p><p><code>現實不可能如此理想化，因此達成理想的途徑不可能脫離現實。</code></p><p><code>對於現實我們無能為力，我們只能依靠合理的規則使現實不至於脫軌，並且讓現實成為動力。</code></p><p><code>不要試圖以長期的理想去思考解決短期問題的辦法，這是一種妥協。</code></p><p><code>回憶是用以憑吊的，不是用來沈溺的。</code></p><p><code>就算有一天我們都會老去，至少到時我們回憶過去的時候，會為了自己曾經做過的事微笑，這樣就足夠了。</code></p><p>2018 年裹，經歷的事不算太多。但經歷的事算是人生的轉捩點。</p><p>生亦何歡，死亦何苦？如何構成「有意義」的人生，人生的意義在不同時段都有不同的失落，</p><p>對人生的目標，開始思考人生的目標，對自己所追求的目標出現質疑。</p><p>在思考自己人生的意義之前，很多時是被一些社會上客觀的意義支配著，</p><p>如果沒有自我追求，人生不過是社會上的一個配件，因為活著而活著，</p><p>新的一年，希望能為自己而渡過，在生命的道路上留下自己在意的足印。</p><p>在工作和生活上，重新取得平衡，而不是在為生活而工作的壓力下活著。</p><font color="#fff"><br>孩童只盼望歡樂<br>大人只知道寄望<br><br>不要不要假設我知道<br>一切一切也都是為我而做<br><br>霎眼廿七歲　時日無多方不敢偷懶<br>宏願縱未了　奮鬥總不太晚<br><br>曾付出幾多心跳<br>來換取一堆堆的發票<br>用我尚有　換我沒有　其實已用盡所擁有<br><br>無須要快樂　反正我一早枯死<br>如果有眼淚　只不過生理分泌<br>如懷念也是有它限期　明日我便記不起<br><br>在有生的瞬間能遇到你　竟花光所有運氣<br>到這日才發現　曾呼吸過空氣</font>]]></content>
    
    <summary type="html">
    
      &lt;iframe width=&quot;100%&quot; height=&quot;525&quot; src=&quot;https://www.youtube.com/embed/URUIcYDq3_I?controls=0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;code&gt;很多時候，選擇並不需要經過多麼理性的思考。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;困難的其實並非是選擇本身，而是思考選擇的過程。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;現實不可能如此理想化，因此達成理想的途徑不可能脫離現實。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;對於現實我們無能為力，我們只能依靠合理的規則使現實不至於脫軌，並且讓現實成為動力。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;不要試圖以長期的理想去思考解決短期問題的辦法，這是一種妥協。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;回憶是用以憑吊的，不是用來沈溺的。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;就算有一天我們都會老去，至少到時我們回憶過去的時候，會為了自己曾經做過的事微笑，這樣就足夠了。&lt;/code&gt;&lt;/p&gt;&lt;p&gt;2018 年裹，經歷的事不算太多。但經歷的事算是人生的轉捩點。&lt;/p&gt;&lt;p&gt;生亦何歡，死亦何苦？如何構成「有意義」的人生，人生的意義在不同時段都有不同的失落，&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular/Element(Web Components)</title>
    <link href="https://blog.sukitsuki.com/2018/12/19/Angular-Element-Web-Components/"/>
    <id>https://blog.sukitsuki.com/2018/12/19/Angular-Element-Web-Components/</id>
    <published>2018-12-19T17:39:31.000Z</published>
    <updated>2018-12-19T13:16:13.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h2><p>Web Components 是最新的 HTML 技術，這項技術可以令瀏覽器支持原生的自定組件，這種做法就可以減輕對前端的依賴/需求。</p><p>別外，使用 web components 可以代替組件在網頁上 JIT 編譯，減小瀏覽器的壓力。</p><h2 id="在Angular-上使用-Web-Component"><a href="#在Angular-上使用-Web-Component" class="headerlink" title="在Angular 上使用 Web Component"></a>在Angular 上使用 Web Component</h2><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>首先在項目目錄下安裝 <code>@angular/elements</code></p><p>之後把 <code>document-register-element</code> 更新</p><p>別外，為了支持舊版本的瀏覽器，需要加入兼容器 (polyfill) <code>@webcomponents/webcomponentsjs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng add @angular/elements</span><br><span class="line">yarn add document-register-element</span><br><span class="line">yarn add @webcomponents/webcomponentsjs</span><br></pre></td></tr></table></figure><p>之後在 <code>polyfills.ts</code> 載入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * APPLICATION IMPORTS</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">import '@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js';</span><br></pre></td></tr></table></figure><p>如果有使用 <code>ngx-build-plus</code> 和 <code>html-webpack-plugin</code> , 需要把 html-webpack-plugin 更新到 <code>4.0.0</code>，因為</p><p><a href="https://github.com/angular/angular-cli/issues/13223" target="_blank" rel="noopener">https://github.com/angular/angular-cli/issues/13223</a></p><p>使用 <code>custom-elements-es5-adapter</code> 是因為 Angular/Elements 不能在 <code>tsconfig.json</code> 降級到 ES5 來支持 IE/Edge，必須使用 ES2015 不然 Chrome 會報錯，所以使用這個庫來達成兼容。</p><p>使用 <code>webcomponents-bundle.js</code> 是為了兼容不支持 web components 的瀏覽器，別外一個是使用 <code>webcomponents-loader.js</code> 進行懶加庫所需要的庫。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>由於 <a href="https://github.com/webcomponents/webcomponentsjs/issues/909" target="_blank" rel="noopener">https://github.com/webcomponents/webcomponentsjs/issues/909</a> 不能在 polyfill.ts 裹加入</p><p><code>import webcomponents-bundle.js</code>，所以需要在 <code>angular.json</code> 的 script 載入。</p><p>如果要使用 <code>webcomponents-loader.js</code> 需要在 <code>angular.json</code> 的 asset 下加入 webcomponentsjs 的bundle 到 asset。</p><p>因為 load 是使用 <code>document.querySelector(&#39;script[src*=&quot;webcomponents-loader.js&quot;]&#39;)</code> 再進行 replace。</p><p>使用時， <code>angular.json</code> 需要在把 script 顯式加入</p><p><code>&quot;bundleName&quot;: &quot;webcomponents-loader&quot;,&quot;lazy&quot;: true</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">"assets": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"glob"</span>: <span class="string">"**/*"</span>,</span><br><span class="line">    <span class="attr">"input"</span>: <span class="string">"node_modules/@webcomponents/webcomponentsjs/bundles"</span>,</span><br><span class="line">    <span class="attr">"output"</span>: <span class="string">"./bundles"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  "src/favicon.ico",</span><br><span class="line">  <span class="string">"src/assets"</span></span><br><span class="line">],</span><br><span class="line">....</span><br><span class="line">"scripts": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"input"</span>: <span class="string">"node_modules/document-register-element/build/document-register-element.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">"input"</span>: <span class="string">"node_modules/@webcomponents/webcomponentsjs/webcomponents-bundle.js"</span>,      </span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"input"</span>: <span class="string">"node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js"</span>,</span><br><span class="line">    <span class="attr">"bundleName"</span>: <span class="string">"webcomponents-loader"</span>,</span><br><span class="line">    <span class="attr">"lazy"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="組件"><a href="#組件" class="headerlink" title="組件"></a>組件</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在需要 web components 的組件下加入或修改 <code>encapsulation: ViewEncapsulation.ShadowDom</code>。</p><p>Ps: <code>ViewEncapsulation.Native</code> 在 Angular 6.1.0 己經被標記為棄用，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-picture'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./picture.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./picture.component.styl'</span>],</span><br><span class="line">  encapsulation: ViewEncapsulation.ShadowDom</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PictureComponent</span><br></pre></td></tr></table></figure><h3 id="載入"><a href="#載入" class="headerlink" title="載入"></a>載入</h3><p>要使模板上使用 web components，需要在 <code>AppModule.ts</code> 的載入組件和組件的元素名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> DoBootstrap &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> faIconService: FaIconService, <span class="keyword">private</span> injector: Injector</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> customButton = createCustomElement(PictureComponent, &#123;injector: <span class="keyword">this</span>.injector&#125;);</span><br><span class="line">    customElements.define(<span class="string">'nat-picture'</span>, &lt;<span class="built_in">Function</span>&gt;customButton);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngDoBootstrap(appRef: ApplicationRef): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Web-Components&quot;&gt;&lt;a href=&quot;#Web-Components&quot; class=&quot;headerlink&quot; title=&quot;Web Components&quot;&gt;&lt;/a&gt;Web Components&lt;/h2&gt;&lt;p&gt;Web Components 是最新的 HTML 技術，這項技術可以令瀏覽器支持原生的自定組件，這種做法就可以減輕對前端的依賴/需求。&lt;/p&gt;&lt;p&gt;別外，使用 web components 可以代替組件在網頁上 JIT 編譯，減小瀏覽器的壓力。&lt;/p&gt;&lt;h2 id=&quot;在Angular-上使用-Web-Component&quot;&gt;&lt;a href=&quot;#在Angular-上使用-Web-Component&quot; class=&quot;headerlink&quot; title=&quot;在Angular 上使用 Web Component&quot;&gt;&lt;/a&gt;在Angular 上使用 Web Component&lt;/h2&gt;&lt;h3 id=&quot;安裝&quot;&gt;&lt;a href=&quot;#安裝&quot; class=&quot;headerlink&quot; title=&quot;安裝&quot;&gt;&lt;/a&gt;安裝&lt;/h3&gt;&lt;p&gt;首先在項目目錄下安裝 &lt;code&gt;@angular/elements&lt;/code&gt;&lt;/p&gt;&lt;p&gt;之後把 &lt;code&gt;document-register-element&lt;/code&gt; 更新&lt;/p&gt;&lt;p&gt;別外，為了支持舊版本的瀏覽器，需要加入兼容器 (polyfill) &lt;code&gt;@webcomponents/webcomponentsjs&lt;/code&gt;&lt;/p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ng add @angular/elements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn add document-register-element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn add @webcomponents/webcomponentsjs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;之後在 &lt;code&gt;polyfills.ts&lt;/code&gt; 載入&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Angular動態加載html</title>
    <link href="https://blog.sukitsuki.com/2018/12/17/%E5%9C%A8Angular%E5%8B%95%E6%85%8B%E5%8A%A0%E8%BC%89html/"/>
    <id>https://blog.sukitsuki.com/2018/12/17/在Angular動態加載html/</id>
    <published>2018-12-17T19:21:15.000Z</published>
    <updated>2018-12-18T07:34:52.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原生靜態-HTML"><a href="#原生靜態-HTML" class="headerlink" title="原生靜態 HTML"></a>原生靜態 HTML</h3><p>使用 <code>innerHtml</code> 直接取代原生 element.</p><p>但如果 HTML 內有 inline style 或 sciprt, 這就需要 <code>DomSanitizer</code> 進行 <code>bypassSecurityTrustHtml</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Pipe, PipeTransform&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;DomSanitizer&#125; <span class="keyword">from</span> <span class="string">"@angular/platform-browser"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  name: <span class="string">'safeHtml'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SafeHtmlPipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> sanitizer: DomSanitizer</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  transform(value: <span class="built_in">any</span>, args?: <span class="built_in">any</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sanitizer.bypassSecurityTrustHtml(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">innerHtml</span>]=<span class="string">"post.content|safeHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="非原生-HTML"><a href="#非原生-HTML" class="headerlink" title="非原生 HTML"></a>非原生 HTML</h3><p>首先，建立 helper function，以幫助構建 <code>Component</code> 和 <code>Module</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compileToComponent</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Component(&#123;template&#125;)(<span class="keyword">class</span> &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compileToModule</span>(<span class="params">declarations, imports?</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> NgModule(&#123;declarations, imports&#125;)(<span class="keyword">class</span> &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之後使用 <code>ViewChild</code> 綁定 <code>ng-template</code> ，最後在 <code>ngAfterViewInit</code> 使用 JITcompile 進行實時編譯並在生成組件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostBodyComponent <span class="keyword">implements</span> OnInit, AfterViewInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">'container'</span>, &#123;read: ViewContainerRef&#125;)</span><br><span class="line">  container: ViewContainerRef;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> compiler: Compiler</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmpComponent = compileToComponent(<span class="keyword">this</span>.post.content);</span><br><span class="line">    <span class="keyword">const</span> tmpModule = compileToModule([tmpComponent], [AppModule]);</span><br><span class="line">    <span class="keyword">this</span>.compiler.compileModuleAndAllComponentsAsync(tmpModule).then(</span><br><span class="line">      (factories) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> factory = factories.componentFactories.find(<span class="function"><span class="params">f</span> =&gt;</span> f.componentType === tmpComponent);</span><br><span class="line">        <span class="keyword">this</span>.container.createComponent(factory);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由於 Angular 4 之後 AoT 和 Jit 不能並存，所以需要在 <code>angular.json</code> 關閉 aot 和 buildOptimizer。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"configurations": &#123;</span><br><span class="line">  "production": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "aot": false,</span><br><span class="line">    "buildOptimizer": false,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原生靜態-HTML&quot;&gt;&lt;a href=&quot;#原生靜態-HTML&quot; class=&quot;headerlink&quot; title=&quot;原生靜態 HTML&quot;&gt;&lt;/a&gt;原生靜態 HTML&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;innerHtml&lt;/code&gt; 直接取代原生 element.&lt;/p&gt;&lt;p&gt;但如果 HTML 內有 inline style 或 sciprt, 這就需要 &lt;code&gt;DomSanitizer&lt;/code&gt; 進行 &lt;code&gt;bypassSecurityTrustHtml&lt;/code&gt;.&lt;/p&gt;&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;Pipe, PipeTransform&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@angular/core&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;DomSanitizer&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;@angular/platform-browser&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Pipe&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;safeHtml&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; SafeHtmlPipe &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; PipeTransform &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; sanitizer: DomSanitizer&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  transform(value: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;, args?: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;): &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sanitizer.bypassSecurityTrustHtml(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; [&lt;span class=&quot;attr&quot;&gt;innerHtml&lt;/span&gt;]=&lt;span class=&quot;string&quot;&gt;&quot;post.content|safeHtml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;非原生-HTML&quot;&gt;&lt;a href=&quot;#非原生-HTML&quot; class=&quot;headerlink&quot; title=&quot;非原生 HTML&quot;&gt;&lt;/a&gt;非原生 HTML&lt;/h3&gt;&lt;p&gt;首先，建立 helper function，以幫助構建 &lt;code&gt;Component&lt;/code&gt; 和 &lt;code&gt;Module&lt;/code&gt;&lt;/p&gt;&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compileToComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;template&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Component(&amp;#123;template&amp;#125;)(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compileToModule&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;declarations, imports?&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NgModule(&amp;#123;declarations, imports&amp;#125;)(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;之後使用 &lt;code&gt;ViewChild&lt;/code&gt; 綁定 &lt;code&gt;ng-template&lt;/code&gt; ，最後在 &lt;code&gt;ngAfterViewInit&lt;/code&gt; 使用 JITcompile 進行實時編譯並在生成組件。&lt;/p&gt;&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; PostBodyComponent &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; OnInit, AfterViewInit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@ViewChild&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;container&#39;&lt;/span&gt;, &amp;#123;read: ViewContainerRef&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  container: ViewContainerRef;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; compiler: Compiler&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ngOnInit() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ngAfterViewInit(): &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tmpComponent = compileToComponent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.post.content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tmpModule = compileToModule([tmpComponent], [AppModule]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.compiler.compileModuleAndAllComponentsAsync(tmpModule).then(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (factories) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; factory = factories.componentFactories.find(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;f&lt;/span&gt; =&amp;gt;&lt;/span&gt; f.componentType === tmpComponent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.container.createComponent(factory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PSV變革</title>
    <link href="https://blog.sukitsuki.com/2018/12/17/PSV%E8%AE%8A%E9%9D%A9/"/>
    <id>https://blog.sukitsuki.com/2018/12/17/PSV變革/</id>
    <published>2018-12-17T10:48:17.000Z</published>
    <updated>2018-12-17T05:31:42.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Make-PSV-great-again"><a href="#Make-PSV-great-again" class="headerlink" title="Make PSV great again"></a>Make PSV great again</h1><p>HENkaku (變革) 令 PSV 如同 PSP 時代一樣強大起來。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>一台 PSV，如果是 PSV 1000 需要額外的 Sony 記憶卡（因為 1000 沒有內部儲存空間</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>由於變革不是永久性/固化的漏洞（），因此只支持版本 3.65 ~ 3.68 ，如果己升級到 3.69 下文就不再適用。</p><p>如果版本在 3.65 以下，可以使用修改 DNS 方法更新，比如 <code>23.96.6.207</code> ，修改之後更新包會變成 <code>3.65 (変革 Compatible)</code> 。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="Windows-用戶"><a href="#Windows-用戶" class="headerlink" title="Windows 用戶"></a>Windows 用戶</h3><p>如果使用 Windows 安裝，只需要下載 <a href="https://github.com/noahc3/auto-h-encore" target="_blank" rel="noopener">auto h-encore</a> 就可以完成大部分前置準備工作，自動下載 QCMA，DEOM，解包，修改包內容，重新打包等工作。</p><p>打開 auto h-encore 只需要點 start 等待下載完成所需工具後，會提示安裝 QCMA，建意便用 USB 驅動安裝。</p><p>安裝好 QCMA 後，會自動進行置換DEOM包的工具，完成之後打開 OCMA 工具 並接上 PSV USB到電腦。</p><p>其後在 PSV 打開內容管理，選 USB 傳輸，再記 PC 到 PSV，最後把打包好的 h-encore 傳到PSV上。</p><h3 id="macOS-Linux-用戶"><a href="#macOS-Linux-用戶" class="headerlink" title="macOS/Linux 用戶"></a>macOS/Linux 用戶</h3><p>使用 <a href="https://github.com/soarqin/finalhe" target="_blank" rel="noopener">finalhe</a> ，因為沒使用過，就不詳細說了。</p><h2 id="變革"><a href="#變革" class="headerlink" title="變革"></a>變革</h2><p>在 Live Area 下打開 H-encore，進入 bootstrap menu, 之後在菜單上選擇 Install HENkaku。</p><p>完成之後，強烈建意安裝，選擇 <code>Download VitaShell</code>（需要WI-FI連網），因為很多情況下都需要使用上。</p><p>最後，回到 <code>Exit</code> 退回 Live Area，之後打開設定，菜單上會多了一項 HENkaku 設置，進入後啟動 <strong>啟動不安全自制軟件</strong>。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/TheOfficialFloW/NoNpDrm/releases" target="_blank" rel="noopener">NoNpDrm</a> <em>(允許使用已加密的遊戲及應用程式)</em></li><li><a href="https://github.com/Applelo/SwitchSD2Vita/releases" target="_blank" rel="noopener">SwitchSD2Vita</a> <em>(使用 sd2vita 卡帶代替Sony 記憶卡)</em></li><li><a href="https://github.com/blastrock/pkgj/releases" target="_blank" rel="noopener">PKGj</a> <em>(提供網上下載 PSV PSP PSX PSM遊戲/ PSV DLC功能)</em></li><li><a href="https://github.com/ONElua/AccountManager/releases" target="_blank" rel="noopener">AccountManager</a> (提供備分轉換 PSV 內的 PSN 功能)</li></ul><p>以上除了 NoNpDrm 都是使用 vpk 格式安裝，只需要在 VITAShell 下點選安裝就可以。</p><h3 id="NoNpDrm"><a href="#NoNpDrm" class="headerlink" title="NoNpDrm"></a>NoNpDrm</h3><p>NoNpDrm安裝，需要在 VITAShell 下打開並修改 <code>ux0:tai/config.txt</code> ，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*KERNEL</span><br><span class="line">ux0:tai/nonpdrm.skprx</span><br></pre></td></tr></table></figure><p>之後保存重啟 PSV，再重新進了 h-encore，之後 Exit, 不需要再選擇 <code>Install HENkaku</code></p><p>###AccountManager</p><p>轉換帳號前，盡可能先保存當前帳號 ，之到 <code>HENkaku 設置</code> 解除記憶卡/內存綁定，或使用 <code>VITAShell</code> 在 ur0 或 uma0 下刪除 id.dat。不然換轉帳號後不能讀取記憶卡/內存上的 H-encore 引導。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Make-PSV-great-again&quot;&gt;&lt;a href=&quot;#Make-PSV-great-again&quot; class=&quot;headerlink&quot; title=&quot;Make PSV great again&quot;&gt;&lt;/a&gt;Make PSV great again&lt;/h1&gt;&lt;p&gt;HENkaku (變革) 令 PSV 如同 PSP 時代一樣強大起來。&lt;/p&gt;&lt;h2 id=&quot;準備&quot;&gt;&lt;a href=&quot;#準備&quot; class=&quot;headerlink&quot; title=&quot;準備&quot;&gt;&lt;/a&gt;準備&lt;/h2&gt;&lt;p&gt;一台 PSV，如果是 PSV 1000 需要額外的 Sony 記憶卡（因為 1000 沒有內部儲存空間&lt;/p&gt;&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;由於變革不是永久性/固化的漏洞（），因此只支持版本 3.65 ~ 3.68 ，如果己升級到 3.69 下文就不再適用。&lt;/p&gt;&lt;p&gt;如果版本在 3.65 以下，可以使用修改 DNS 方法更新，比如 &lt;code&gt;23.96.6.207&lt;/code&gt; ，修改之後更新包會變成 &lt;code&gt;3.65 (変革 Compatible)&lt;/code&gt; 。&lt;/p&gt;&lt;h2 id=&quot;安裝&quot;&gt;&lt;a href=&quot;#安裝&quot; class=&quot;headerlink&quot; title=&quot;安裝&quot;&gt;&lt;/a&gt;安裝&lt;/h2&gt;&lt;h3 id=&quot;Windows-用戶&quot;&gt;&lt;a href=&quot;#Windows-用戶&quot; class=&quot;headerlink&quot; title=&quot;Windows 用戶&quot;&gt;&lt;/a&gt;Windows 用戶&lt;/h3&gt;&lt;p&gt;如果使用 Windows 安裝，只需要下載 &lt;a href=&quot;https://github.com/noahc3/auto-h-encore&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;auto h-encore&lt;/a&gt; 就可以完成大部分前置準備工作，自動下載 QCMA，DEOM，解包，修改包內容，重新打包等工作。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular-起動時加入Async和defer</title>
    <link href="https://blog.sukitsuki.com/2018/12/15/Angular-%E8%B5%B7%E5%8B%95%E6%99%82%E5%8A%A0%E5%85%A5async%E5%92%8Cdefer/"/>
    <id>https://blog.sukitsuki.com/2018/12/15/Angular-起動時加入async和defer/</id>
    <published>2018-12-15T13:40:11.000Z</published>
    <updated>2018-12-18T07:34:52.135Z</updated>
    
    <content type="html"><![CDATA[<p>首先，在 Angular 不 Eject 的情況下，使用其他的 Webpack plugin，這樣需要引入 ngx-build-plus。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ngx-build-plus</span><br></pre></td></tr></table></figure><p>之後在 angular.json 替換 angular-cli 本來的引導指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="string">"architect"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: &#123;</span><br><span class="line">      <span class="string">"builder"</span>: <span class="string">"ngx-build-plus:build"</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">"serve"</span>: &#123;</span><br><span class="line">       <span class="string">"builder"</span>: <span class="string">"ngx-build-plus:dev-server"</span>,</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>別外，在目錄下加入額外的 Webpack 配置文件 <code>webpack.extra.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ScriptExtHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'script-ext-html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> METADATA = &#123;</span><br><span class="line">  baseUrl: <span class="string">'/'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'src/index.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'styles'</span>, <span class="string">'runtime'</span>, <span class="string">'polyfills'</span>, <span class="string">'main'</span>],</span><br><span class="line">      chunksSortMode: <span class="string">'manual'</span>,</span><br><span class="line">      metadata: METADATA,</span><br><span class="line">      inject: <span class="string">'head'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ScriptExtHtmlWebpackPlugin(&#123;</span><br><span class="line">      defaultAttribute: <span class="string">'defer'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>~~ 由於 Angular 的 <code>zone.js</code> 需要比其他的 js 先載入，所以 polyfills 使用 <code>async</code>，而其他使用 <code>defer</code></p><p>這樣配置就可以把 <code>polyfills.js</code> 以外的 script 都加上 <code>defer</code> 屬性。~~</p><p>把 <code>chunksSortMode</code> 改成 manual, 這樣就會按 <code>chunks</code> 的排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"ng build --prod --extraWebpackConfig webpack.extra.js"</span>,</span><br><span class="line">...</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最後修改 <code>package.json</code> 的 <code>build</code></p><p><a href="https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/build_angular/src/angular-cli-files/plugins/index-html-webpack-plugin.ts" target="_blank" rel="noopener">Angular 官方配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，在 Angular 不 Eject 的情況下，使用其他的 Webpack plugin，這樣需要引入 ngx-build-plus。&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install ngx-build-plus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;之後在 angular.json 替換 angular-cli 本來的引導指令&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;architect&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;builder&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ngx-build-plus:build&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;serve&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;&quot;builder&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ngx-build-plus:dev-server&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;別外，在目錄下加入額外的 Webpack 配置文件 &lt;code&gt;webpack.extra.js&lt;/code&gt;&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; HtmlWebpackPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;html-webpack-plugin&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ScriptExtHtmlWebpackPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;script-ext-html-webpack-plugin&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; METADATA = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseUrl: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  plugins: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HtmlWebpackPlugin(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      template: &lt;span class=&quot;string&quot;&gt;&#39;src/index.html&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      chunks: [&lt;span class=&quot;string&quot;&gt;&#39;styles&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;runtime&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;polyfills&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;main&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      chunksSortMode: &lt;span class=&quot;string&quot;&gt;&#39;manual&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      metadata: METADATA,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      inject: &lt;span class=&quot;string&quot;&gt;&#39;head&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ScriptExtHtmlWebpackPlugin(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      defaultAttribute: &lt;span class=&quot;string&quot;&gt;&#39;defer&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;~~ 由於 Angular 的 &lt;code&gt;zone.js&lt;/code&gt; 需要比其他的 js 先載入，所以 polyfills 使用 &lt;code&gt;async&lt;/code&gt;，而其他使用 &lt;code&gt;defer&lt;/code&gt;&lt;/p&gt;&lt;p&gt;這樣配置就可以把 &lt;code&gt;polyfills.js&lt;/code&gt; 以外的 script 都加上 &lt;code&gt;defer&lt;/code&gt; 屬性。~~&lt;/p&gt;&lt;p&gt;把 &lt;code&gt;chunksSortMode&lt;/code&gt; 改成 manual, 這樣就會按 &lt;code&gt;chunks&lt;/code&gt; 的排序。&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ng build --prod --extraWebpackConfig webpack.extra.js&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>主題遷移到 Angular 進度</title>
    <link href="https://blog.sukitsuki.com/2018/12/10/%E4%B8%BB%E9%A1%8C%E9%81%B7%E7%A7%BB%E5%88%B0-Angular-%E9%80%B2%E5%BA%A6/"/>
    <id>https://blog.sukitsuki.com/2018/12/10/主題遷移到-Angular-進度/</id>
    <published>2018-12-10T16:27:32.000Z</published>
    <updated>2018-12-19T13:16:13.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安格拉絲-Angular"><a href="#安格拉絲-Angular" class="headerlink" title="安格拉絲 / Angular"></a>安格拉絲 / Angular</h1><blockquote><p>大紮好，我系 <a href="https://github.com/Tsuki/" target="_blank" rel="noopener">Tsuki</a>，安格拉絲，介四里沒有挽過的船新版本，擠需體驗三番鍾，里造會幹我一樣，愛象節款框架。</p></blockquote><p>進度</p><ul><li style="list-style:none"><input type="checkbox" checked> Header (完成)</li><li style="list-style:none"><input type="checkbox" checked> Pages (完成)</li><li style="list-style:none"><input type="checkbox" checked> Article (完成)</li><li style="list-style:none"><input type="checkbox" checked> Header 動畫 (完成)</li><li style="list-style:none"><input type="checkbox" checked> Pages 動畫 (完成)</li><li style="list-style:none"><input type="checkbox" checked> Footer (完成)</li><li style="list-style:none"><input type="checkbox" checked> Article 前後頁</li><li style="list-style:none"><input type="checkbox" checked> Markdown Todo-list</li><li style="list-style:none"><input type="checkbox" checked> Post page</li><li style="list-style:none"><input type="checkbox"> mobile</li><li style="list-style:none"><input type="checkbox"> Cate/Tag/Arcivee</li><li style="list-style:none"><input type="checkbox"> Side menu</li><li style="list-style:none"><input type="checkbox"> APlayer</li><li style="list-style:none"><input type="checkbox"> 優化 moment.js</li><li style="list-style:none"><input type="checkbox"> 動態注入配置</li><li style="list-style:none"><input type="checkbox"> 評論數</li><li style="list-style:none"><input type="checkbox"> FancyBox 效果</li><li style="list-style:none"><input type="checkbox"> Article 置頂跑馬燈</li><li style="list-style:none"><input type="checkbox"> Badge count</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安格拉絲-Angular&quot;&gt;&lt;a href=&quot;#安格拉絲-Angular&quot; class=&quot;headerlink&quot; title=&quot;安格拉絲 / Angular&quot;&gt;&lt;/a&gt;安格拉絲 / Angular&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;大紮好，我系 &lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何把頁眉(Header)置頂</title>
    <link href="https://blog.sukitsuki.com/2018/11/29/%E5%A6%82%E4%BD%95%E6%8A%8A%E9%A0%81%E7%9C%89-header-%E7%BD%AE%E9%A0%82/"/>
    <id>https://blog.sukitsuki.com/2018/11/29/如何把頁眉-header-置頂/</id>
    <published>2018-11-29T14:59:03.000Z</published>
    <updated>2018-11-29T08:23:17.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方案一：兼容IE"><a href="#方案一：兼容IE" class="headerlink" title="方案一：兼容IE"></a>方案一：兼容IE</h3><p>這個方案並不完美，position: fixed 太多坑，如果有有別一個 position: fixed 會出現奇怪的問題。</p><p>現在頁面改成下面的方案二，雖然不支持IE，但減少了JS 代碼，而且css 代碼更清𥇦。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sticky</span> + <span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">92px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br><span class="line" data-line-number="11"></span><br><span class="line" data-line-number="12"></span><br><span class="line" data-line-number="13"></span><br><span class="line" data-line-number="14"></span><br><span class="line" data-line-number="15"></span><br><span class="line" data-line-number="16"></span><br><span class="line" data-line-number="17"></span><br><span class="line" data-line-number="18"></span><br><span class="line" data-line-number="19"></span><br><span class="line" data-line-number="20"></span><br><span class="line" data-line-number="21"></span><br></pre></td><td class="code"><pre><span class="line">initSticky();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initSticky</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Get the header</span></span><br><span class="line">  <span class="keyword">let</span> header = <span class="built_in">document</span>.getElementById(<span class="string">"header"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the offset position of the navbar</span></span><br><span class="line">  <span class="keyword">let</span> sticky = header.offsetTop;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">stickyCheck</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt; sticky) &#123;</span><br><span class="line">      header.classList.add(<span class="string">"sticky"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      header.classList.remove(<span class="string">"sticky"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    stickyCheck()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二：不兼容IE"><a href="#方案二：不兼容IE" class="headerlink" title="方案二：不兼容IE"></a>方案二：不兼容IE</h3><p>直接在本來的 header 把position: fixed改成 sticky 和 top: 0. Javascript 可以去掉</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;方案一：兼容IE&quot;&gt;&lt;a href=&quot;#方案一：兼容IE&quot; class=&quot;headerlink&quot; title=&quot;方案一：兼容IE&quot;&gt;&lt;/a&gt;方案一：兼容IE&lt;/h3&gt;&lt;p&gt;這個方案並不完美，position: fixed 太多坑，如果有有別一個 position:
      
    
    </summary>
    
      <category term="Front-end" scheme="https://blog.sukitsuki.com/categories/Front-end/"/>
    
      <category term="CSS" scheme="https://blog.sukitsuki.com/categories/Front-end/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>使用CDN把Shadowsocks主機的實體IP隱藏</title>
    <link href="https://blog.sukitsuki.com/2018/11/29/%E4%BD%BF%E7%94%A8CDN%E6%8A%8ASS%E4%B8%BB%E6%A9%9F%E7%9A%84%E5%AF%A6%E9%AB%94IP%E9%9A%B1%E8%97%8F/"/>
    <id>https://blog.sukitsuki.com/2018/11/29/使用CDN把SS主機的實體IP隱藏/</id>
    <published>2018-11-29T11:06:02.000Z</published>
    <updated>2018-11-29T12:51:52.012Z</updated>
    
    <content type="html"><![CDATA[<p>一般Shadowsocks 機場，直接到服務器的真實IP，這種VPS服務器的IP 段都是連著的，出較出名的VPS服務商的IP 段很易被掃出來，之後被各種DDOS或暴力破解。</p><p>使用CDN反代就可以把IP 隱藏起來，也可以把被GFW 封了的IP 段機器再利用。別外加上Nginx 反代可以把Shadowsocks 偽裝成網站頁面，或跳轉到別的頁面。</p><h3 id="Shadowsocks-配置"><a href="#Shadowsocks-配置" class="headerlink" title="Shadowsocks 配置"></a>Shadowsocks 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br></pre></td><td class="code"><pre><span class="line">ss-server -s 0.0.0.0 -p 8080 -c config.json --fast-open --plugin obfs-server --plugin-opts <span class="string">"obfs=http"</span></span><br></pre></td></tr></table></figure><p>Ps: obfs使用 http 不要使用 tls，因為CDN 的https會做了別一重的tls封裝，引致解密失敗。</p><blockquote><p>Cloudflare 支持直接的端口</p></blockquote><p><code>80, 8080, 8880, 2052, 2082, 2086, 2095</code></p><p><del>如果使用 Cloudflare 強制 https/tls, 可以在page rules 把需使用的域名加入例外規則。</del></p><p>在 Cloudflare 上需要在 Crypto 關閉 Always Use HTTPS，不然 http 流量會強制跳到 https</p><p>如果使用Nginx 作為反代過濾，可以把非 SS連接跳轉到別的頁面</p><h3 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br><span class="line" data-line-number="11"></span><br><span class="line" data-line-number="12"></span><br><span class="line" data-line-number="13"></span><br><span class="line" data-line-number="14"></span><br><span class="line" data-line-number="15"></span><br><span class="line" data-line-number="16"></span><br><span class="line" data-line-number="17"></span><br><span class="line" data-line-number="18"></span><br><span class="line" data-line-number="19"></span><br><span class="line" data-line-number="20"></span><br><span class="line" data-line-number="21"></span><br><span class="line" data-line-number="22"></span><br><span class="line" data-line-number="23"></span><br><span class="line" data-line-number="24"></span><br><span class="line" data-line-number="25"></span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">    <span class="attribute">default</span> upgrade;</span><br><span class="line">    ''      close;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">ssl_protocols</span>       TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span>         HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">server_name</span>         __server_name__;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span>      <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span>  <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$http_upgrade</span> = <span class="string">"websocket"</span>)&#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>          http://192.168.0.118:10000;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$scheme</span> = <span class="string">"http"</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$http_host</span><span class="variable">$request_uri</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用Nginx 反代，Andorid 的 simple-obfs 的版本使用的 obfs-local 是0.0.2 對 websocket的支持不完整。</p><p>需要更新到最新版本的 obfs-local</p><p><a href="https://github.com/Tsuki/simple-obfs-android/releases/download/0.0.6/obfs-local-release.apk" target="_blank" rel="noopener">https://github.com/Tsuki/simple-obfs-android/releases/download/0.0.6/obfs-local-release.apk</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般Shadowsocks 機場，直接到服務器的真實IP，這種VPS服務器的IP 段都是連著的，出較出名的VPS服務商的IP 段很易被掃出來，之後被各種DDOS或暴力破解。&lt;/p&gt;
&lt;p&gt;使用CDN反代就可以把IP 隱藏起來，也可以把被GFW 封了的IP 段機器再利用。別外加上Nginx 反代可以把Shadowsocks 偽裝成網站頁面，或跳轉到別的頁面。&lt;/p&gt;
&lt;h3 id=&quot;Shadowsocks-配置&quot;&gt;&lt;a href=&quot;#Shadowsocks-配置&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks 配置&quot;&gt;&lt;/a&gt;Shadowsocks 配置&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ss-server -s 0.0.0.0 -p 8080 -c config.json --fast-open --plugin obfs-server --plugin-opts &lt;span class=&quot;string&quot;&gt;&quot;obfs=http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Ps: obfs使用 http 不要使用 tls，因為CDN 的https會做了別一重的tls封裝，引致解密失敗。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cloudflare 支持直接的端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;80, 8080, 8880, 2052, 2082, 2086, 2095&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;如果使用 Cloudflare 強制 https/tls, 可以在page rules 把需使用的域名加入例外規則。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在 Cloudflare 上需要在 Crypto 關閉 Always Use HTTPS，不然 http 流量會強制跳到 https&lt;/p&gt;
&lt;p&gt;如果使用Nginx 作為反代過濾，可以把非 SS連接跳轉到別的頁面&lt;/p&gt;
    
    </summary>
    
      <category term="Server" scheme="https://blog.sukitsuki.com/categories/Server/"/>
    
    
  </entry>
  
  <entry>
    <title>在PostgresSQL啟用不區分大小寫欄位</title>
    <link href="https://blog.sukitsuki.com/2018/10/15/%E5%9C%A8PostgresSQL%E5%95%9F%E7%94%A8%E4%B8%8D%E5%8D%80%E5%88%86%E5%A4%A7%E5%B0%8F%E5%AF%AB%E6%AC%84%E4%BD%8D/"/>
    <id>https://blog.sukitsuki.com/2018/10/15/在PostgresSQL啟用不區分大小寫欄位/</id>
    <published>2018-10-15T17:53:24.000Z</published>
    <updated>2018-10-15T16:31:00.862Z</updated>
    
    <content type="html"><![CDATA[<p>在PostgreSQL 上建立欄位約束，是很簡單的事情，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (  </span><br><span class="line">  <span class="keyword">id</span>     <span class="keyword">uuid</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> uuid_generate_v4(),</span><br><span class="line">  email  <span class="built_in">text</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我們只需要在表的欄位上加入唯一約束就可以，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> email_unique <span class="keyword">UNIQUE</span> (email);</span><br></pre></td></tr></table></figure><p>但在特殊情況下，我們需要不區分大少寫的欄位，比如用戶表等。。。剛剛那種約速方法就不再有效，因為PostgreSQL 預設是大小寫區分的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (email) <span class="keyword">VALUES</span> (<span class="string">'test@example.com'</span>);  </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (email) <span class="keyword">VALUES</span> (<span class="string">'TEST@example.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line">                  id                  |      email       </span><br><span class="line"><span class="comment">--------------------------------------+------------------</span></span><br><span class="line"> ccfcddd2-bdc5-4cf4-9475-4171960e6262 | test@example.com</span><br><span class="line"> 431308b4-8df8-44c9-bed4-7c44cf4e1ec1 | TEST@example.com</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure><p>一般情況下，我們會使用 <code>Lower</code> 和 <code>ToLower</code>  建立唯一索引和尋找數據。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> emailunique_idx <span class="keyword">on</span> <span class="keyword">users</span> (<span class="keyword">LOWER</span>(email)); </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">LOWER</span>(email) = <span class="keyword">LOWER</span>(?);</span><br></pre></td></tr></table></figure><p>但這種做法，忘了加 <code>LOWER</code> 就會令程序產生 Bug.</p><p>其實 PostgreSQL 供提不少額外的模塊，只是沒有預設啟用。這裹說的 <code>CITEXT</code> 就是其中一個。<code>CITEXT</code> 顧名思義就是 <code>case insensitive text</code>。</p><p>首先在 PostgreSQL 啟用額外的<code>CITEXT</code>模組。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> citext;</span><br></pre></td></tr></table></figure><p>之後清空之前加入的數據，並修改 <code>email</code> 欄位屬情為 <code>citext</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> RESTART <span class="keyword">IDENTITY</span> RESTRICT;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> email <span class="keyword">TYPE</span> citext;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> emailunique_idx <span class="keyword">on</span> <span class="keyword">users</span> (email);</span><br></pre></td></tr></table></figure><p>之後再一次插入用戶數據，就可以看到樣同 <code>email</code> 並不能成功加入，並抛出錯誤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (email) <span class="keyword">VALUES</span> (<span class="string">'test@example.com'</span>);  </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (email) <span class="keyword">VALUES</span> (<span class="string">'TEST@example.com'</span>);</span><br><span class="line"></span><br><span class="line">ERROR:  duplicate key value violates unique constraint "email_unique"  </span><br><span class="line">DETAIL:  Key (email)=(TEST@example.com) already exists.</span><br></pre></td></tr></table></figure><p>這種做法的好處是，欄位中己配置好檢查，不需要在代碼中每一次手動加上檢查，在數據庫的欄位上作出最後一道防線。別一方面，其他開發人員看到表的 <code>DDL</code> 時就明白這個欄位是不區分大少寫。</p><p>最後這個模組是從 <code>PostgreSQL 9.3</code> 開始提供。</p><p>Ref: <a href="http://shuber.io/case-insensitive-unique-constraints-in-postgres/" target="_blank" rel="noopener">http://shuber.io/case-insensitive-unique-constraints-in-postgres/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在PostgreSQL 上建立欄位約束，是很簡單的事情，&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;2&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;3&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt; (  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;uuid&lt;/span&gt; PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; uuid_generate_v4(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  email  &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我們只需要在表的欄位上加入唯一約束就可以，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CONSTRAINT&lt;/span&gt; email_unique &lt;span class=&quot;keyword&quot;&gt;UNIQUE&lt;/span&gt; (email);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但在特殊情況下，我們需要不區分大少寫的欄位，比如用戶表等。。。剛剛那種約速方法就不再有效，因為PostgreSQL 預設是大小寫區分的。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;2&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;3&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;4&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;5&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;6&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;7&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;8&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;9&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;10&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt; (email) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;test@example.com&#39;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt; (email) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;TEST@example.com&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  id                  |      email       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--------------------------------------+------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ccfcddd2-bdc5-4cf4-9475-4171960e6262 | test@example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 431308b4-8df8-44c9-bed4-7c44cf4e1ec1 | TEST@example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2 rows)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般情況下，我們會使用 &lt;code&gt;Lower&lt;/code&gt; 和 &lt;code&gt;ToLower&lt;/code&gt;  建立唯一索引和尋找數據。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;1&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot; data-line-number=&quot;2&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; emailunique_idx &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;LOWER&lt;/span&gt;(email)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LOWER&lt;/span&gt;(email) = &lt;span class=&quot;keyword&quot;&gt;LOWER&lt;/span&gt;(?);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但這種做法，忘了加 &lt;code&gt;LOWER&lt;/code&gt; 就會令程序產生 Bug.&lt;/p&gt;
&lt;p&gt;其實 PostgreSQL 供提不少額外的模塊，只是沒有預設啟用。這裹說的 &lt;code&gt;CITEXT&lt;/code&gt; 就是其中一個。&lt;code&gt;CITEXT&lt;/code&gt; 顧名思義就是 &lt;code&gt;case insensitive text&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="https://blog.sukitsuki.com/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>升級到macOS Mojave</title>
    <link href="https://blog.sukitsuki.com/2018/10/01/%E5%8D%87%E7%B4%9A%E5%88%B0macOS-Mojave/"/>
    <id>https://blog.sukitsuki.com/2018/10/01/升級到macOS-Mojave/</id>
    <published>2018-10-01T17:56:53.000Z</published>
    <updated>2018-10-01T10:07:37.100Z</updated>
    
    <content type="html"><![CDATA[<p>今天把筆記本升級到 Mojave，有Dark theme 看起來舒服多了，雖然還有部分軟件不支持。</p><p>這次升級需時有點久，升了近一小時。而且升級後把 CommandLineTool刪了，需要重新下載。</p><p><code>sudo xcode-select --install</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天把筆記本升級到 Mojave，有Dark theme 看起來舒服多了，雖然還有部分軟件不支持。&lt;/p&gt;
&lt;p&gt;這次升級需時有點久，升了近一小時。而且升級後把 CommandLineTool刪了，需要重新下載。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo xcode-select
      
    
    </summary>
    
      <category term="日記" scheme="https://blog.sukitsuki.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Casbin-訪問權限控制工具</title>
    <link href="https://blog.sukitsuki.com/2018/09/26/casbin-%E8%A8%AA%E5%95%8F%E6%AC%8A%E9%99%90%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    <id>https://blog.sukitsuki.com/2018/09/26/casbin-訪問權限控制工具/</id>
    <published>2018-09-26T20:51:25.000Z</published>
    <updated>2018-09-27T13:08:43.994Z</updated>
    
    <content type="html"><![CDATA[<p>Casbin 本質是一個配對的權限的工具庫，主要是由 model 模型和 policy 政策組成，</p><p>model example</p><p>r 是接受傳入的參數並定義欄位，例子中接受三項參數</p><p>p 是解析 Prolicy 內容並定義欄位</p><p>m 是配對 Policy 方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br><span class="line" data-line-number="5"></span><br><span class="line" data-line-number="6"></span><br><span class="line" data-line-number="7"></span><br><span class="line" data-line-number="8"></span><br><span class="line" data-line-number="9"></span><br><span class="line" data-line-number="10"></span><br><span class="line" data-line-number="11"></span><br></pre></td><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_effect]</span><br><span class="line">e = some(where (p.eft == allow))</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m = (p.sub in r.sub || p.sub == &quot;*&quot;) &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; (r.act == p.act || p.act == &quot;*&quot;)</span><br></pre></td></tr></table></figure><p>policy example </p><p>ps:雖然是csv格式 但需要在逗號後留空白，別外內容的空白是會保留，不要因為對齊而加padding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line" data-line-number="1"></span><br><span class="line" data-line-number="2"></span><br><span class="line" data-line-number="3"></span><br><span class="line" data-line-number="4"></span><br></pre></td><td class="code"><pre><span class="line">p, *, /info, GET</span><br><span class="line">p, user, /users, GET</span><br><span class="line">p, user, /users, POST</span><br><span class="line">p, setting, /settings, *</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Casbin 本質是一個配對的權限的工具庫，主要是由 model 模型和 policy 政策組成，&lt;/p&gt;
&lt;p&gt;model example&lt;/p&gt;
&lt;p&gt;r 是接受傳入的參數並定義欄位，例子中接受三項參數&lt;/p&gt;
&lt;p&gt;p 是解析 Prolicy 內容並定義欄位&lt;/p&gt;

      
    
    </summary>
    
      <category term="Golang" scheme="https://blog.sukitsuki.com/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>刪了Xcode後不能使用make等指令</title>
    <link href="https://blog.sukitsuki.com/2018/09/24/%E5%88%AA%E4%BA%86xcode%E5%BE%8C%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8make%E7%AD%89%E6%8C%87%E4%BB%A4/"/>
    <id>https://blog.sukitsuki.com/2018/09/24/刪了xcode後不能使用make等指令/</id>
    <published>2018-09-24T17:43:26.000Z</published>
    <updated>2018-09-27T13:08:43.994Z</updated>
    
    <content type="html"><![CDATA[<p>如果出現以下內容</p><blockquote><p>xcrun: error: active developer path (“/Applications/Xcode.app/Contents/Developer”) does not exist</p></blockquote><p>輸入 <code>sudo xcode-select -s /Library/Developer/CommandLineTools</code> 改回使用 CommandLineTools 的路徑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果出現以下內容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;xcrun: error: active developer path (“/Applications/Xcode.app/Contents/Developer”) does not exist&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="ops" scheme="https://blog.sukitsuki.com/categories/ops/"/>
    
    
  </entry>
  
</feed>
