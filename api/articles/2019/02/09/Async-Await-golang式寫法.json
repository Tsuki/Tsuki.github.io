{"title":"Async/Await Golang式寫法","slug":"Async-Await-golang式寫法","date":"2019-02-09T11:28:10.000Z","updated":"2019-04-04T12:59:22.508Z","comments":true,"path":"api/articles/2019/02/09/Async-Await-golang式寫法.json","photos":[],"link":"","excerpt":"使用 promise 和 result pair 避免 try-catch style.Javascript 例子1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>// to.ts<br>export default function to(promise: Promise) &#123;<br>    return promise<br>        .then(data =&gt; &#123;<br>            return [null, data];<br>        &#125;)<br>        .catch(err =&gt; [err]);<br>&#125;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>import to from 'to';<br>export class AccountComponent implements OnInit, OnChanges&#123;<br>    async ngOnChanges(changes: SimpleChanges) &#123;<br>        // TODO check change<br>        let err, result;<br>        [err, result] = await to(this.httpService.listAccount(this.data).toPromise());<br>        if (err != null &amp;&amp; err instanceof HttpErrorResponse) &#123;<br>          // err in<br>          this.notice.create('error', err.error.msg);<br>        &#125;<br>\t&#125;<br>&#125;<br>以下是 Golang 的寫法1<br>2<br>3<br>4<br>5<br>if err, result := httpService.listAccount(data); err != nil&#123;<br>    // process...<br>&#125; else &#123;<br>    // error handling...<br>&#125;<br>How to write async await without try-catch blocks in Javascript - dima从不用 try-catch 实现的 async/await 语法说错误处理題外話 – try-catch 的惡魔Checked or unchecked exceptions (1)","content":"<p>使用 promise 和 result pair 避免 try-catch style.</p><p>Javascript 例子</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// to.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">to</span>(<span class=\"params\">promise: <span class=\"built_in\">Promise</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"literal\">null</span>, data];</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> [err]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> to <span class=\"keyword\">from</span> <span class=\"string\">'to'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AccountComponent <span class=\"keyword\">implements</span> OnInit, OnChanges&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> ngOnChanges(changes: SimpleChanges) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO check change</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> err, result;</span><br><span class=\"line\">        [err, result] = <span class=\"keyword\">await</span> to(<span class=\"keyword\">this</span>.httpService.listAccount(<span class=\"keyword\">this</span>.data).toPromise());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err != <span class=\"literal\">null</span> &amp;&amp; err <span class=\"keyword\">instanceof</span> HttpErrorResponse) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// err in</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.notice.create(<span class=\"string\">'error'</span>, err.error.msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>以下是 Golang 的寫法</p><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> err, result := httpService.listAccount(data); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// process...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// error handling...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><a href=\"https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/\" target=\"_blank\" rel=\"noopener\">How to write async await without try-catch blocks in Javascript - dima</a></p><p><a href=\"https://segmentfault.com/a/1190000011802045\" target=\"_blank\" rel=\"noopener\">从不用 try-catch 实现的 async/await 语法说错误处理</a></p><p>題外話 – try-catch 的惡魔</p><p><a href=\"http://teddy-chen-tw.blogspot.com/2011/05/checked-or-unchecked-exceptions-1.html\" target=\"_blank\" rel=\"noopener\">Checked or unchecked exceptions (1)</a></p><p><a href=\"http://www.importnew.com/21117.html\" target=\"_blank\" rel=\"noopener\">Java中的Checked Exception——美丽世界中潜藏的恶魔</a></p>","prev":{"title":"SS PAC模式白名單","link":"/2019/03/05/Shadowsocks-白名單"},"next":{"title":"Android 中文在地化機制","link":"/2019/02/02/Android-中文在地化機制"},"categories":[],"tags":[]}