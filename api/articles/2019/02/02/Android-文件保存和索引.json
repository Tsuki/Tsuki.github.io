{"title":"Android 文件保存和索引","slug":"Android-文件保存和索引","date":"2019-02-02T12:02:58.000Z","updated":"2019-04-04T12:59:22.508Z","comments":true,"path":"api/articles/2019/02/02/Android-文件保存和索引.json","photos":[],"link":"","excerpt":"索引Android 在保存文件後，如果不在索引目錄下是不會自動建立索引，需要調用 MediaScanner 發出一個廣播和指定目錄或文件的指令才會實行。實作 MediaScannerConnectionClient 類，發出掃描指令並在完成後斷開連接。1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>class SingleMediaScanner(val context: Context, val file: File) :<br>  MediaScannerConnection.MediaScannerConnectionClient &#123;<br>  private val mediaScannerConnection<br>    by lazy &#123; MediaScannerConnection(context, this) &#125;<br><br>  override fun onMediaScannerConnected() =<br>    mediaScannerConnection.scanFile(file.absolutePath, null)<br><br>  override fun onScanCompleted(path: String?, uri: Uri?) =<br>    mediaScannerConnection.disconnect()<br>&#125;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>fun Context.takeScreenshot(bitmap: Bitmap): String? &#123;<br>  val mediaStorageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)<br>  val timestamp = SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(Date())<br>  val mediaFile = File(\"$&#123;mediaStorageDir.path&#125;$&#123;File.separator&#125;$timestamp.jpg\")<br>  var compress = false<br>  doAsync &#123;<br>    if (!mediaStorageDir.exists() &amp;&amp; !mediaStorageDir.mkdirs()) &#123;<br>      return@doAsync<br>    &#125;<br>    Timber.d(\"screenshot: file $&#123;mediaStorageDir.path&#125;$&#123;File.separator&#125;$timestamp.jpg\")<br>    val fos = FileOutputStream(mediaFile)<br>    compress = bitmap.compress(Bitmap.CompressFormat.JPEG, 90, fos)<br>    fos.close()<br>    SingleMediaScanner(this@takeScreenshot, mediaStorageDir)<br>  &#125;.get()<br>  return if (compress) mediaFile.toString() else null<br>&#125;<br>","content":"<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>Android 在保存文件後，如果不在索引目錄下是不會自動建立索引，需要調用 <code>MediaScanner</code> 發出一個廣播和指定目錄或文件的指令才會實行。</p><p>實作 <code>MediaScannerConnectionClient</code> 類，發出掃描指令並在完成後斷開連接。</p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleMediaScanner</span></span>(<span class=\"keyword\">val</span> context: Context, <span class=\"keyword\">val</span> file: File) :</span><br><span class=\"line\">  MediaScannerConnection.MediaScannerConnectionClient &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mediaScannerConnection</span><br><span class=\"line\">    <span class=\"keyword\">by</span> lazy &#123; MediaScannerConnection(context, <span class=\"keyword\">this</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMediaScannerConnected</span><span class=\"params\">()</span></span> =</span><br><span class=\"line\">    mediaScannerConnection.scanFile(file.absolutePath, <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onScanCompleted</span><span class=\"params\">(path: <span class=\"type\">String</span>?, uri: <span class=\"type\">Uri</span>?)</span></span> =</span><br><span class=\"line\">    mediaScannerConnection.disconnect()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Context.<span class=\"title\">takeScreenshot</span><span class=\"params\">(bitmap: <span class=\"type\">Bitmap</span>)</span></span>: String? &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> mediaStorageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)</span><br><span class=\"line\">  <span class=\"keyword\">val</span> timestamp = SimpleDateFormat(<span class=\"string\">\"yyyyMMdd_HHmmss\"</span>).format(Date())</span><br><span class=\"line\">  <span class=\"keyword\">val</span> mediaFile = File(<span class=\"string\">\"<span class=\"subst\">$&#123;mediaStorageDir.path&#125;</span><span class=\"subst\">$&#123;File.separator&#125;</span><span class=\"variable\">$timestamp</span>.jpg\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> compress = <span class=\"literal\">false</span></span><br><span class=\"line\">  doAsync &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mediaStorageDir.exists() &amp;&amp; !mediaStorageDir.mkdirs()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span><span class=\"symbol\">@doAsync</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Timber.d(<span class=\"string\">\"screenshot: file <span class=\"subst\">$&#123;mediaStorageDir.path&#125;</span><span class=\"subst\">$&#123;File.separator&#125;</span><span class=\"variable\">$timestamp</span>.jpg\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> fos = FileOutputStream(mediaFile)</span><br><span class=\"line\">    compress = bitmap.compress(Bitmap.CompressFormat.JPEG, <span class=\"number\">90</span>, fos)</span><br><span class=\"line\">    fos.close()</span><br><span class=\"line\">    SingleMediaScanner(<span class=\"keyword\">this</span><span class=\"symbol\">@takeScreenshot</span>, mediaStorageDir)</span><br><span class=\"line\">  &#125;.<span class=\"keyword\">get</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (compress) mediaFile.toString() <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"Android 中文在地化機制","link":"/2019/02/02/Android-中文在地化機制"},"next":{"title":"Android requestedOrientation 坑","link":"/2019/01/30/Android-requestedOrientation-坑"},"categories":[],"tags":[]}