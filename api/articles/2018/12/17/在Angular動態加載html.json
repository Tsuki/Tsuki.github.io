{"title":"在Angular動態加載html","slug":"在Angular動態加載html","date":"2018-12-17T19:21:15.000Z","updated":"2018-12-18T07:34:52.135Z","comments":true,"path":"api/articles/2018/12/17/在Angular動態加載html.json","photos":[],"link":"","excerpt":"原生靜態 HTML使用 innerHtml 直接取代原生 element.但如果 HTML 內有 inline style 或 sciprt, 這就需要 DomSanitizer 進行 bypassSecurityTrustHtml.1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>import &#123;Pipe, PipeTransform&#125; from '@angular/core';<br>import &#123;DomSanitizer&#125; from \"@angular/platform-browser\";<br><br>@Pipe(&#123;<br>  name: 'safeHtml'<br>&#125;)<br>export class SafeHtmlPipe implements PipeTransform &#123;<br><br>  constructor(private sanitizer: DomSanitizer) &#123;<br><br>  &#125;<br><br>  transform(value: any, args?: any): any &#123;<br>    return this.sanitizer.bypassSecurityTrustHtml(value);<br>  &#125;<br><br>&#125;<br>1<br>&lt;div [innerHtml]=\"post.content|safeHtml\"&gt;&lt;/div&gt;<br>非原生 HTML首先，建立 helper function，以幫助構建 Component 和 Module1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>export function compileToComponent(template) &#123;<br>  return Component(&#123;template&#125;)(class &#123;<br>  &#125;);<br>&#125;<br><br>export function compileToModule(declarations, imports?) &#123;<br>  return NgModule(&#123;declarations, imports&#125;)(class &#123;<br>  &#125;);<br>&#125;<br>之後使用 ViewChild 綁定 ng-template ，最後在 ngAfterViewInit 使用 JITcompile 進行實時編譯並在生成組件。1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>export class PostBodyComponent implements OnInit, AfterViewInit &#123;<br><br>  @ViewChild('container', &#123;read: ViewContainerRef&#125;)<br>  container: ViewContainerRef;<br>    <br>  constructor(private compiler: Compiler) &#123;<br>  &#125;<br><br>  ngOnInit() &#123;<br>  &#125;<br><br>  ngAfterViewInit(): void &#123;<br>    const tmpComponent = compileToComponent(this.post.content);<br>    const tmpModule = compileToModule([tmpComponent], [AppModule]);<br>    this.compiler.compileModuleAndAllComponentsAsync(tmpModule).then(<br>      (factories) =&gt; &#123;<br>        const factory = factories.componentFactories.find(f =&gt; f.componentType === tmpComponent);<br>        this.container.createComponent(factory);<br>      &#125;<br>    )<br>  &#125;<br>&#125;<br>","content":"<h3 id=\"原生靜態-HTML\"><a href=\"#原生靜態-HTML\" class=\"headerlink\" title=\"原生靜態 HTML\"></a>原生靜態 HTML</h3><p>使用 <code>innerHtml</code> 直接取代原生 element.</p><p>但如果 HTML 內有 inline style 或 sciprt, 這就需要 <code>DomSanitizer</code> 進行 <code>bypassSecurityTrustHtml</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Pipe, PipeTransform&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;DomSanitizer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'safeHtml'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SafeHtmlPipe <span class=\"keyword\">implements</span> PipeTransform &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> sanitizer: DomSanitizer</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  transform(value: <span class=\"built_in\">any</span>, args?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sanitizer.bypassSecurityTrustHtml(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">innerHtml</span>]=<span class=\"string\">\"post.content|safeHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"非原生-HTML\"><a href=\"#非原生-HTML\" class=\"headerlink\" title=\"非原生 HTML\"></a>非原生 HTML</h3><p>首先，建立 helper function，以幫助構建 <code>Component</code> 和 <code>Module</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileToComponent</span>(<span class=\"params\">template</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Component(&#123;template&#125;)(<span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileToModule</span>(<span class=\"params\">declarations, imports?</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> NgModule(&#123;declarations, imports&#125;)(<span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>之後使用 <code>ViewChild</code> 綁定 <code>ng-template</code> ，最後在 <code>ngAfterViewInit</code> 使用 JITcompile 進行實時編譯並在生成組件。</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PostBodyComponent <span class=\"keyword\">implements</span> OnInit, AfterViewInit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'container'</span>, &#123;read: ViewContainerRef&#125;)</span><br><span class=\"line\">  container: ViewContainerRef;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> compiler: Compiler</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngAfterViewInit(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmpComponent = compileToComponent(<span class=\"keyword\">this</span>.post.content);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmpModule = compileToModule([tmpComponent], [AppModule]);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.compiler.compileModuleAndAllComponentsAsync(tmpModule).then(</span><br><span class=\"line\">      (factories) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> factory = factories.componentFactories.find(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.componentType === tmpComponent);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.container.createComponent(factory);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">container</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由於 Angular 4 之後 AoT 和 Jit 不能並存，所以需要在 <code>angular.json</code> 關閉 aot 和 buildOptimizer。</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"configurations\": &#123;</span><br><span class=\"line\">  \"production\": &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"aot\": false,</span><br><span class=\"line\">    \"buildOptimizer\": false,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"Angular/Element(Web Components)","link":"/2018/12/19/Angular-Element-Web-Components"},"next":{"title":"PSV變革","link":"/2018/12/17/PSV變革"},"categories":[],"tags":[]}