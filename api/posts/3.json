{"total":54,"pageSize":10,"pageCount":6,"data":[{"_id":"cjke00vpc0000r4pc3bb16088","title":"GPG-Key","slug":"GPG-key","date":"2018-08-03T15:32:10.000Z","updated":"2018-08-04T10:03:24.706Z","comments":true,"permalink":"/2018/08/03/GPG-key/","path":"api/articles/GPG-key.json","excerpt":"","keywords":null,"content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 開啟 GPG sign</span></span><br><span class=\"line\">git config --global commit.gpgsign <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 指定 sign key</span></span><br><span class=\"line\">git config --global user.signingkey &lt;key&gt;</span><br><span class=\"line\"><span class=\"comment\"># 顯示 公鈅列表</span></span><br><span class=\"line\">gpg --list-keys --keyid-format LONG</span><br><span class=\"line\"><span class=\"comment\"># 顯示 私鈅列表</span></span><br><span class=\"line\">gpg --list-secret-keys --keyid-format LONG</span><br><span class=\"line\"><span class=\"comment\"># 生成 Key</span></span><br><span class=\"line\">gpg --full-generate-key</span><br><span class=\"line\"><span class=\"comment\"># 導出公鈅</span></span><br><span class=\"line\">gpg --armor --<span class=\"built_in\">export</span> &lt;key&gt;</span><br><span class=\"line\"><span class=\"comment\"># 導出密鈅</span></span><br><span class=\"line\">gpg --armor --<span class=\"built_in\">export</span>-secret-keys &lt;key&gt;</span><br><span class=\"line\"><span class=\"comment\"># 導出子密鈅</span></span><br><span class=\"line\">gpg --armor --<span class=\"built_in\">export</span>-secret-subkeys &lt;key&gt;</span><br><span class=\"line\"><span class=\"comment\"># 重啟 gpg agent</span></span><br><span class=\"line\">gpg-connect-agent reloadagent /<span class=\"built_in\">bye</span></span><br><span class=\"line\"><span class=\"comment\"># 殺掉 gpg agent</span></span><br><span class=\"line\">gpgconf --<span class=\"built_in\">kill</span> gpg-agent</span><br><span class=\"line\"><span class=\"comment\"># 修改 gpg agent 參數</span></span><br><span class=\"line\">vim ~/.gnupg/gpg-agent.conf</span><br><span class=\"line\">max-cache-ttl 60480000</span><br><span class=\"line\">default-cache-ttl 60480000</span><br></pre></td></tr></table></figure>\n","text":"1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br># 開啟 ","link":"","raw":null,"photos":[],"source":"_posts/2018/08/03-GPG-key.md","categories":[{"name":"Ops","slug":"Ops","count":6,"path":"api/categories/Ops.json"}],"tags":[]},{"_id":"cjkb4enh00000rdnxhm13xlob","title":"Python腳本調整歌詞開始位","slug":"lrc-offset","date":"2018-08-01T19:18:49.000Z","updated":"2018-08-18T13:01:30.765Z","comments":true,"permalink":"/2018/08/01/lrc-offset/","path":"api/articles/lrc-offset.json","excerpt":"","keywords":null,"content":"<p>#一個 Python 腳本，用作全局調整歌詞提前量/開始位置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\" data-line-number=\"1\"></span><br><span class=\"line\" data-line-number=\"2\"></span><br><span class=\"line\" data-line-number=\"3\"></span><br><span class=\"line\" data-line-number=\"4\"></span><br><span class=\"line\" data-line-number=\"5\"></span><br><span class=\"line\" data-line-number=\"6\"></span><br><span class=\"line\" data-line-number=\"7\"></span><br><span class=\"line\" data-line-number=\"8\"></span><br><span class=\"line\" data-line-number=\"9\"></span><br><span class=\"line\" data-line-number=\"10\"></span><br><span class=\"line\" data-line-number=\"11\"></span><br><span class=\"line\" data-line-number=\"12\"></span><br><span class=\"line\" data-line-number=\"13\"></span><br><span class=\"line\" data-line-number=\"14\"></span><br><span class=\"line\" data-line-number=\"15\"></span><br><span class=\"line\" data-line-number=\"16\"></span><br><span class=\"line\" data-line-number=\"17\"></span><br><span class=\"line\" data-line-number=\"18\"></span><br><span class=\"line\" data-line-number=\"19\"></span><br><span class=\"line\" data-line-number=\"20\"></span><br><span class=\"line\" data-line-number=\"21\"></span><br><span class=\"line\" data-line-number=\"22\"></span><br><span class=\"line\" data-line-number=\"23\"></span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> date, datetime, time, timedelta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(filename: str, offset: int)</span> -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">    thetime = re.compile(<span class=\"string\">r\"\\[([0-9]&#123;2&#125;):([0-9]&#123;2&#125;)\\.([0-9]&#123;2&#125;)?\\](.+)\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'r+'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file.readlines():</span><br><span class=\"line\">            min_sec_str = thetime.search(line)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> min_sec_str:</span><br><span class=\"line\">                m, s, ms, lrc = min_sec_str.group(<span class=\"number\">1</span>), min_sec_str.group(<span class=\"number\">2</span>), min_sec_str.group(<span class=\"number\">3</span>), min_sec_str.group(<span class=\"number\">4</span>)</span><br><span class=\"line\">                t = datetime.combine(date.today(), time(<span class=\"number\">0</span>, int(m), int(s), int(ms))) + timedelta(milliseconds=offset)</span><br><span class=\"line\">                print(<span class=\"string\">f'[<span class=\"subst\">&#123;t.minute:<span class=\"number\">02</span>&#125;</span>:<span class=\"subst\">&#123;t.second:<span class=\"number\">02</span>&#125;</span>.<span class=\"subst\">&#123;t.microsecond:<span class=\"number\">02</span>&#125;</span>]<span class=\"subst\">&#123;lrc&#125;</span>'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                print(line)</span><br><span class=\"line\">    file.close</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> SyntaxError(<span class=\"string\">\"Insufficient arguments.\"</span>)</span><br><span class=\"line\">    main(sys.argv[<span class=\"number\">1</span>], int(sys.argv[<span class=\"number\">2</span>]))</span><br></pre></td></tr></table></figure>\n<p>先用正則找出歌詞位置，再提取出分，秒，微秒和歌詞，</p>\n<p>然後轉換成 Python 的時間類並調整時間，最後打印出來。</p>\n<h1 id=\"正則測試網站\"><a href=\"#正則測試網站\" class=\"headerlink\" title=\"正則測試網站\"></a>正則測試網站</h1><p><a href=\"https://regex101.com/\" target=\"_blank\" rel=\"noopener\">https://regex101.com/</a></p>\n","text":"#一個 Python 腳本，用作全局調整歌詞提前量/開始位置<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>import sys<br>impo","link":"","raw":null,"photos":["/2018/08/01/lrc-offset/photo_2018-07-03_21-21-15.jpg"],"source":"_posts/2018/08/01-lrc-offset.md","categories":[{"name":"Python","slug":"Python","count":2,"path":"api/categories/Python.json"}],"tags":[]},{"_id":"cjkaqch760000rdm6t3obegeg","title":"Mac 虛擬化","slug":"Mac-Hypervisor","date":"2018-08-01T11:53:59.000Z","updated":"2018-08-18T13:01:30.765Z","comments":true,"permalink":"/2018/08/01/Mac-Hypervisor/","path":"api/articles/Mac-Hypervisor.json","excerpt":"","keywords":null,"content":"<h1 id=\"Mac-虛擬化管理\"><a href=\"#Mac-虛擬化管理\" class=\"headerlink\" title=\"Mac 虛擬化管理\"></a>Mac 虛擬化管理</h1><h2 id=\"虛擬化\"><a href=\"#虛擬化\" class=\"headerlink\" title=\"虛擬化\"></a>虛擬化</h2><p>在 Linux 世界中，要實現進程/資源分離並不是一件非常困難的事情，從最早的 chroot, 到後來 Google 提出的 cgroups (Control groups), 到後來實用化的 LXC ，或者是系統級虛擬化 KVM,XEN 等。</p>\n<p>相比起 Linux 的 cgroups (2006年), FreeBSD 在更早之前(2000年),就提出過相似的沙箱虛擬化技術 jail, 並且提供不少實用功能，比如打包轉移，虛擬網絡監控等功能。</p>\n<h3 id=\"bhyve-xhyve\"><a href=\"#bhyve-xhyve\" class=\"headerlink\" title=\"bhyve/xhyve\"></a>bhyve/xhyve</h3><p>雖然 jail 能提供像 Docker 的功能，但 Docker 的社群相比 Unix/BSD 社群人數更多，支援也更成熟。為了在Unix上便用 Docker, 但Docker 是基於 Linux 內核開發，要提供內核就只能便用 Virtual Box 等方案，直到 bhyve 的出現（續命。 bhyve 的出現令 Unix 拥有低成本，高效和原生的虛擬化體驗，使用起來更流暢。</p>\n<p>作為師出同門的 Mac 要使用這項技術，因此就出現從BSD bhyve 移植而來的 xhyve. (Mac 內核是從 BSD 原碼上分支而來)</p>\n<h3 id=\"HyperKit\"><a href=\"#HyperKit\" class=\"headerlink\" title=\"HyperKit\"></a>HyperKit</h3><p>HyperKit 是Docker 公司基於 b/xhyve 開發的工具庫，用作提升擴屏性和兼容性的解決方案。現時新版本的 Docker for Mac 就內置了 HyperKit.</p>\n","text":"Mac 虛擬化管理虛擬化在 Linux 世界中，要實現進程/資源分離並不是一件非常困難的事情，從最早的 chroot, 到後來 Google 提出的 cgroups (Control groups), 到後來實用化的 LXC ，或者是系統級虛擬化 KVM,XEN 等。相比起 Li","link":"","raw":null,"photos":["/2018/08/01/Mac-Hypervisor/cjk84ozko000c8i5nmlk52wsl.jpg"],"source":"_posts/2018/08/01-Mac-Hypervisor.md","categories":[{"name":"Ops","slug":"Ops","count":6,"path":"api/categories/Ops.json"}],"tags":[]},{"_id":"cjk10tqv60000rjqbywt8gx5k","title":"ServerUpdate","slug":"ServerUpdate","date":"2018-07-25T14:11:07.000Z","updated":"2018-07-25T11:03:21.723Z","comments":true,"permalink":"/2018/07/25/ServerUpdate/","path":"api/articles/ServerUpdate.json","excerpt":"","keywords":null,"content":"<h1 id=\"服務器更新\"><a href=\"#服務器更新\" class=\"headerlink\" title=\"服務器更新\"></a>服務器更新</h1><p>今天把Debian滾到 9.5 內核升到 4.9, 因為Linux 4.9內核內建了tcp_bbr 算法。</p>\n<p>這算法對高延遲，高掉包的網絡有較大的提升</p>\n<p>不過香港的掉包和延遲不算嚴重，更新後提升不大</p>\n<h2 id=\"配置kernal-參數\"><a href=\"#配置kernal-參數\" class=\"headerlink\" title=\"配置kernal 參數\"></a>配置kernal 參數</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"comment\"># 增加以下兩條配置</span></span><br><span class=\"line\"><span class=\"comment\"># net.core.default_qdisc=fq</span></span><br><span class=\"line\"><span class=\"comment\"># net.ipv4.tcp_congestion_control=bbr</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新內核配置\"><a href=\"#刷新內核配置\" class=\"headerlink\" title=\"刷新內核配置\"></a>刷新內核配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -p</span><br></pre></td></tr></table></figure>\n<h2 id=\"重啟和測試配置\"><a href=\"#重啟和測試配置\" class=\"headerlink\" title=\"重啟和測試配置\"></a>重啟和測試配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ reboot</span><br><span class=\"line\">$ sysctl net.ipv4.tcp_available_congestion_control</span><br><span class=\"line\"><span class=\"comment\"># 顯示結果中有bbr</span></span><br><span class=\"line\"><span class=\"comment\"># net.ipv4.tcp_available_congestion_control = bbr cubic reno</span></span><br></pre></td></tr></table></figure>\n<p>測試用指令 <code>wget -qO- bench.sh | bash</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">CPU model            : AMD Phenom(tm) II X6 1055T Processor</span><br><span class=\"line\">Number of cores      : 6</span><br><span class=\"line\">CPU frequency        : 2812.247 MHz</span><br><span class=\"line\">Total size of Disk   : 95.0 GB (38.0 GB Used)</span><br><span class=\"line\">Total amount of Mem  : 491 MB (84 MB Used)</span><br><span class=\"line\">Total amount of Swap : 4090 MB (0 MB Used)</span><br><span class=\"line\">System uptime        : 0 days, 0 hour 5 min</span><br><span class=\"line\">Load average         : 0.06, 0.08, 0.04</span><br><span class=\"line\">OS                   : Debian GNU/Linux 9</span><br><span class=\"line\">Arch                 : x86_64 (64 Bit)</span><br><span class=\"line\">Kernel               : 4.9.0-6-amd64</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">I/O speed(1st run)   : 93.1 MB/s</span><br><span class=\"line\">I/O speed(2nd run)   : 93.5 MB/s</span><br><span class=\"line\">I/O speed(3rd run)   : 97.0 MB/s</span><br><span class=\"line\">Average I/O speed    : 94.5 MB/s</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">Node Name                       IPv4 address            Download Speed</span><br><span class=\"line\">CacheFly                        204.93.150.152          5.14MB/s</span><br><span class=\"line\">Linode, Tokyo, JP               106.187.96.148          1.12MB/s</span><br><span class=\"line\">Linode, Singapore, SG           139.162.23.4            1.29MB/s</span><br><span class=\"line\">Linode, London, UK              176.58.107.39           578KB/s</span><br><span class=\"line\">Linode, Frankfurt, DE           139.162.130.8           546KB/s</span><br><span class=\"line\">Linode, Fremont, CA             50.116.14.9             634KB/s</span><br><span class=\"line\">Softlayer, Dallas, TX           173.192.68.18           1.70MB/s</span><br><span class=\"line\">Softlayer, Seattle, WA          67.228.112.250          2.06MB/s</span><br><span class=\"line\">Softlayer, Frankfurt, DE        159.122.69.4            237KB/s</span><br><span class=\"line\">Softlayer, Singapore, SG        119.81.28.170           1.45MB/s</span><br><span class=\"line\">Softlayer, HongKong, CN         119.81.130.170          8.97MB/s</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">SpeedTest</span><br><span class=\"line\">Hosted by STC (Hong Kong) : 5.976 ms</span><br><span class=\"line\">Testing download </span><br><span class=\"line\">Download: 289.92 Mbit/s</span><br><span class=\"line\">Testing upload </span><br><span class=\"line\">Upload: 52.48 Mbit/s</span><br></pre></td></tr></table></figure>\n","text":"服務器更新今天把Debian滾到 9.5 內核升到 4.9, 因為Linux 4.9內核內建了tcp_bbr 算法。這算法對高延遲，高掉包的網絡有較大的提升不過香港的掉包和延遲不算嚴重，更新後提升不大配置kernal 參數1<br>2<br>3<br>4<br>$ vim /et","link":"","raw":null,"photos":["https://blog.sukitsuki.com/2018/07/25/ServerUpdate/cjk0s2e3n00058i5n2cg1ayq9.jpg"],"source":"_posts/2018/07/25-ServerUpdate.md","categories":[{"name":"Ops","slug":"Ops","count":6,"path":"api/categories/Ops.json"}],"tags":[]},{"_id":"cjjr4j2zp0000r7mggj09jyh4","title":"Python爬蟲","slug":"Python爬蟲","date":"2018-07-18T19:24:50.000Z","updated":"2018-07-18T12:49:24.377Z","comments":true,"permalink":"/2018/07/18/Python爬蟲/","path":"api/articles/Python爬蟲.json","excerpt":"","keywords":null,"content":"<p>簡易Python 爬蟲</p>\n<p>使用request提取網頁，再用bs4分析取得到html， 最後用urllib保存文件</p>\n<p>requests預設encoding很大機會是iso-8859-1</p>\n<p>所以在提取text之前需要修改成 <code>html.encoding = &#39;UTF-8&#39;</code></p>\n<p><code>range(1, int(numbers))</code> 是返會 <code>[1.....numbers-1]</code>  所以要使用 <code>range(1, int(numbers)+1)</code></p>\n<p>Python 沒有 <code>+=</code> 的寫法，合併Array只能 <code>array = array + [....]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">author = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_epub</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'#epub'</span> <span class=\"keyword\">in</span> url[<span class=\"string\">'href'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    booklist = []</span><br><span class=\"line\">    URL = <span class=\"string\">f\"https://tw.ixdzs.com/author/<span class=\"subst\">&#123;author&#125;</span>\"</span></span><br><span class=\"line\">    html = requests.get(URL)</span><br><span class=\"line\">    html.encoding = <span class=\"string\">'UTF-8'</span></span><br><span class=\"line\">    soup = BeautifulSoup(html.text, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">    number = soup.find_all(<span class=\"string\">'a'</span>, title=<span class=\"string\">\"最後一頁\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    numbers = re.search(<span class=\"string\">r'page=(\\d+)$'</span>, number[<span class=\"string\">'href'</span>]).group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> list(range(<span class=\"number\">1</span>, int(numbers)+<span class=\"number\">1</span>)):</span><br><span class=\"line\">        URL = <span class=\"string\">f\"https://tw.ixdzs.com/author/<span class=\"subst\">&#123;author&#125;</span>?page=<span class=\"subst\">&#123;num&#125;</span>\"</span></span><br><span class=\"line\">        html = requests.get(URL)</span><br><span class=\"line\">        html.encoding = <span class=\"string\">'UTF-8'</span></span><br><span class=\"line\">        soup = BeautifulSoup(html.text, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">        booklist = booklist + soup.find_all(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    urllist = filter(is_epub, booklist)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(author):</span><br><span class=\"line\">        os.makedirs(author)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> tqdm(list(urllist)):</span><br><span class=\"line\">        book_id = re.search(<span class=\"string\">r'/d/\\d+/(\\d+)/#epub_down'</span>, url[<span class=\"string\">'href'</span>]).group(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            title = re.search(<span class=\"string\">r'(.*)epub下載'</span>, url[<span class=\"string\">'title'</span>]).group(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">            print(url[<span class=\"string\">'title'</span>])</span><br><span class=\"line\">            title = url[<span class=\"string\">'title'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">f\"<span class=\"subst\">&#123;author&#125;</span>/<span class=\"subst\">&#123;title&#125;</span>.epub\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        urllib.request.urlretrieve(</span><br><span class=\"line\">            <span class=\"string\">f'https://tw.ixdzs.com/down/<span class=\"subst\">&#123;book_id&#125;</span>_4'</span>, <span class=\"string\">f'<span class=\"subst\">&#123;author&#125;</span>/<span class=\"subst\">&#123;title&#125;</span>.epub'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    print(sys.argv)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> SyntaxError(<span class=\"string\">\"Insufficient arguments.\"</span>)</span><br><span class=\"line\">    author = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","text":"簡易Python 爬蟲使用request提取網頁，再用bs4分析取得到html， 最後用urllib保存文件requests預設encoding很大機會是iso-8859-1所以在提取text之前需要修改成 html.encoding = &#39;UTF-8&#39;range","link":"","raw":null,"photos":["https://blog.sukitsuki.com/2018/07/18/Python爬蟲/photo_2018-07-09_10-59-23.jpg"],"source":"_posts/2018/07/18-Python爬蟲.md","categories":[{"name":"Python","slug":"Python","count":2,"path":"api/categories/Python.json"}],"tags":[]},{"_id":"cjjqkgour0000r3qpven78loe","title":"Food","slug":"Food","date":"2018-07-18T10:03:05.000Z","updated":"2018-07-18T03:27:43.205Z","comments":true,"permalink":"/2018/07/18/Food/","path":"api/articles/Food.json","excerpt":"","keywords":null,"content":"<p>低澱粉、高蛋白飲食</p>\n<p>一般來說，飲食中的醣類約占每日總熱量的50~60%，以提供人體主要的能量。醣類進入身體，經消化後產生「葡萄糖」。「葡萄糖」是神經系統、肌肉細胞、紅血球等主要仰賴的能量。</p>\n<p>「高蛋白飲食」通常伴隨嚴格的限制澱粉，背後牽涉複雜的生化代謝的改變。多數研究顯示，短期「高蛋白飲食」確實有助於減重。</p>\n<p>不是不是所有人都適合低醣的「高蛋白飲食」。美國心臟協會在2009年提出警告：長期的高蛋白飲食，包括可能增加心血管疾病及骨質疏鬆症的患病風險，且易使尿酸值提高，惡化痛風症狀。</p>\n<p>減少精緻澱粉類的分量，並適度增加植物性蛋白質及非紅肉內臟的動物蛋白質，而非採取激進方式如嚴格限制澱粉，卻對蛋白質攝取不設上限。</p>\n<p>GI值又稱升糖指數，指的是食物吃進體內後，造成血糖上升速度的快慢。</p>\n<p><img src=\"https://blog.sukitsuki.com/2018/07/18/Food/givstime.jpg\" alt=\"GI對血糖的影響\"></p>\n<ul>\n<li>不易累積體脂肪。</li>\n<li>不易感到疲倦、昏昏欲睡。</li>\n<li>飽足感時間延長，比較不容易餓。</li>\n<li>降低三酸甘油酯、總膽固醇及壞膽固醇。</li>\n<li>容易控管血糖值，降低心血管疾病及糖尿病併發症風險。</li>\n</ul>\n<p>大部分蔬菜、含糖量低的水果都屬於低GI食物，除了能增加飽足感，也能避免吃下過多的澱粉類食物。</p>\n<p>避免烹調時間過長、食物過於軟爛，就能延緩食物消化的速度，血糖也不至於上升太快，如白米飯會比白粥的GI值低。</p>\n<p>別外，低 GI 不等於低熱量，像是花生、炸豆腐、腰果、培根、火腿、香蕉、芒果、奶油、奶油起士等也都屬於低 GI 食物，但熱量都不低。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>食物的升糖指數 (GI)</strong></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>食物種類</strong></td>\n<td><strong>低GI (55或以)</strong></td>\n<td><strong>中GI (GI 56-69)</strong></td>\n<td><strong>高GI (70或以上)</strong></td>\n</tr>\n<tr>\n<td>米飯</td>\n<td>糙米、黑米</td>\n<td>紅米飯、糙米飯</td>\n<td>糯米飯、白飯</td>\n</tr>\n<tr>\n<td>粉麵</td>\n<td>粉絲、意粉、通心粉、全蛋麵</td>\n<td>烏冬</td>\n<td>普通小麥麵條</td>\n</tr>\n<tr>\n<td>麵包</td>\n<td>裸麥粒麵包</td>\n<td>牛角包</td>\n<td>白麵包、饅頭</td>\n</tr>\n<tr>\n<td>早餐穀物</td>\n<td>燕麥糠</td>\n<td></td>\n<td>粟米片</td>\n</tr>\n<tr>\n<td>根莖類</td>\n<td>粟米、魔芋</td>\n<td>蕃薯、連皮焗薯</td>\n<td>薯蓉、南瓜</td>\n</tr>\n<tr>\n<td>糖類</td>\n<td>果糖、乳糖</td>\n<td>蔗糖、蜂蜜</td>\n<td>葡萄糖、砂糖、麥芽糖</td>\n</tr>\n<tr>\n<td>奶類</td>\n<td>脫脂/低脂奶</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>生果類</td>\n<td>橙、蘋果、雪梨、提子、奇異果、沙田柚、士多啤梨</td>\n<td>蜜瓜、香蕉、木瓜、芒果</td>\n<td>西瓜、茘枝、龍眼</td>\n</tr>\n<tr>\n<td>豆類</td>\n<td>黃豆、綠豆、眉豆、紅腰豆、扁豆類</td>\n<td>焗豆</td>\n</tr>\n</tbody>\n</table>\n","text":"低澱粉、高蛋白飲食一般來說，飲食中的醣類約占每日總熱量的50~60%，以提供人體主要的能量。醣類進入身體，經消化後產生「葡萄糖」。「葡萄糖」是神經系統、肌肉細胞、紅血球等主要仰賴的能量。「高蛋白飲食」通常伴隨嚴格的限制澱粉，背後牽涉複雜的生化代謝的改變。多數研究顯示，短期「高蛋白","link":"","raw":null,"photos":["https://blog.sukitsuki.com/2018/07/18/Food/cjij5zvjk01nj6u5nvm3ufhx6.jpg"],"source":"_posts/2018/07/18-Food.md","categories":[{"name":"日記","slug":"日記","count":20,"path":"api/categories/日記.json"}],"tags":[]},{"_id":"cjjo8eh2z0000r9mux54j920w","title":"Sick","slug":"sick","date":"2018-07-16T19:00:04.000Z","updated":"2018-07-16T12:14:29.642Z","comments":true,"permalink":"/2018/07/16/sick/","path":"api/articles/sick.json","excerpt":"","keywords":null,"content":"<p>生病是很痛苦，而一個人在外生病，沒有人幫助更痛苦。</p>\n<p>腸胃炎引起的肚子绞痛實在太難受了。得了最嚴重的腸胃炎還付帶發燒和關接肌肉痛。</p>\n<p>第一天發病時在半夜，還好想起有阿士匹靈，吃了120mg的劑量才睡著。</p>\n<p>第二天一早跑去醫院看醫生了，注了四瓶藥水，還被開了抗生素的藥。</p>\n<p>起因可能是因為牛奶吧，紙包的牛奶太易破損，而且牛奶又不好保質。</p>\n<p>別外，再次喝起牛奶，還是覺得討厭牛奶，上一次飲純牛奶己經好幾年前了。</p>\n<p>這次事件還好有帶阿士匹靈在身邊，阿士匹靈簡真是萬能應急藥，不過也不能太依懶。</p>\n","text":"生病是很痛苦，而一個人在外生病，沒有人幫助更痛苦。腸胃炎引起的肚子绞痛實在太難受了。得了最嚴重的腸胃炎還付帶發燒和關接肌肉痛。第一天發病時在半夜，還好想起有阿士匹靈，吃了120mg的劑量才睡著。第二天一早跑去醫院看醫生了，注了四瓶藥水，還被開了抗生素的藥。起因可能是因為牛奶吧，紙","link":"","raw":null,"photos":["https://blog.sukitsuki.com/2018/07/16/sick/cjj6bv5ni01oc6u5n7wvxozfn.jpg"],"source":"_posts/2018/07/16-sick.md","categories":[{"name":"日記","slug":"日記","count":20,"path":"api/categories/日記.json"}],"tags":[]},{"_id":"cjj9n0vbg0000r5p9bk1y9fhd","title":"調酒-Cointreau","slug":"Cointreau","date":"2018-07-06T13:53:47.000Z","updated":"2018-07-06T08:04:35.628Z","comments":true,"permalink":"/2018/07/06/Cointreau/","path":"api/articles/Cointreau.json","excerpt":"","keywords":null,"content":"<p>Cointreau 又名君度橙酒</p>\n<p>這是一款很常用到的Triple sec (三蒸??), 但很多酒譜都是指名要君度而不是 Triple sec.</p>\n<p>不同基酒配君度酒可以調成不同酒，比如</p>\n<p>Vodka：雪國，神風，Balalaika</p>\n<p>Gin：White Lady,  Jasmine</p>\n<p>Tequila：Margarita</p>\n<p>接下來介紹兩款基於琴酒和君度調成調酒：</p>\n<p>White Lady, Jasmine</p>\n<blockquote>\n<p>White Lady</p>\n</blockquote>\n<p>酒譜：</p>\n<p>60ml Gin </p>\n<p>15ml Cointreau</p>\n<p>30ml Lime Juice</p>\n<p>看口味加入小時糖水或蛋白</p>\n<p>加入蛋白可以令口感變的順滑，但整體難度會上升很多，因此不建浪費材料。</p>\n<blockquote>\n<p>Jasmine</p>\n</blockquote>\n<p>酒譜：</p>\n<p>45ml Gin</p>\n<p>25ml Cointreau</p>\n<p>15ml Campari</p>\n<p>15ml Lemon Juice</p>\n<blockquote>\n<p>糖水的制作方法</p>\n</blockquote>\n<p>先準備一分水，一分砂糖，混合後加到鍋裹用慢火加熱。</p>\n<p>邊搞拌，邊等水燒到接近沸騰，之後關火把糖水放到玻璃瓶裹放冰箱保存。</p>\n<p>第一次制作可以先制作300ml左右，因為糖水保存期不算太久，</p>\n<p>而且制作不算難，需要時再造也不麻煩。</p>\n<blockquote>\n<p>長飲/短飲</p>\n</blockquote>\n<p>長飲最好在十分鐘內或冰溶化前飲完。</p>\n<p>短飲須要在三口內喝內。</p>\n","text":"Cointreau 又名君度橙酒這是一款很常用到的Triple sec (三蒸??), 但很多酒譜都是指名要君度而不是 Triple sec.不同基酒配君度酒可以調成不同酒，比如Vodka：雪國，神風，BalalaikaGin：White Lady,  JasmineTequil","link":"","raw":null,"photos":["https://blog.sukitsuki.com/2018/07/06/Cointreau/cjihvdt1e01kr6u5ne7vytlov.jpg"],"source":"_posts/2018/07/06-Cointreau.md","categories":[{"name":"調酒","slug":"調酒","count":2,"path":"api/categories/調酒.json"}],"tags":[{"name":"White Lady","slug":"White-Lady","count":1,"path":"api/tags/White-Lady.json"},{"name":"Yukiguni","slug":"Yukiguni","count":1,"path":"api/tags/Yukiguni.json"},{"name":"Cointreau","slug":"Cointreau","count":1,"path":"api/tags/Cointreau.json"}]},{"_id":"cjj6ndoe20003r4nw9glm3rrc","title":"調酒-Negroni","slug":"調酒-Negroni","date":"2018-07-04T11:16:04.000Z","updated":"2018-07-06T08:03:36.476Z","comments":true,"permalink":"/2018/07/04/調酒-Negroni/","path":"api/articles/調酒-Negroni.json","excerpt":"","keywords":null,"content":"<p>Negroni 內格羅尼 </p>\n<blockquote>\n<p>苦酒苦口但顧肝，琴酒愉悅卻傷身~內格羅尼，健康與快樂之間的平衡點</p>\n<p>Negroni, The bitters are excellent for your liver, the gin is bad for you. They balance each other.</p>\n</blockquote>\n<p>喜歡琴酒的就不能錯過的酒，這酒是從美國佬酒譜加入琴酒而得來的調酒。</p>\n<p>酒譜：</p>\n<p>30ml 琴酒</p>\n<p>30ml 肯巴利苦酒</p>\n<p>30ml 甜香艾酒</p>\n<p>在雪克杯中混合後，以橙皮捲作為裝飾。</p>\n<p>這種一比一比一比例，是經典酒譜的組合，但也可以按個人喜好小量調整。</p>\n<p>這杯酒可以做成短飲，也可以加入冰塊做成長飲，冰塊溶化後每一啖口感也會隨之改變。</p>\n<p><img src=\"https://blog.sukitsuki.com/2018/07/04/調酒-Negroni/photo_2018-07-04_11-22-57.jpg\" alt=\"Negroni\"></p>\n","text":"Negroni 內格羅尼 苦酒苦口但顧肝，琴酒愉悅卻傷身~內格羅尼，健康與快樂之間的平衡點Negroni, The bitters are excellent for your liver, the gin is bad for you. They balance each ot","link":"","raw":null,"photos":["https://blog.sukitsuki.com/2018/07/04/調酒-Negroni/Negroni.jpg"],"source":"_posts/2018/07/04-調酒-Negroni.md","categories":[{"name":"調酒","slug":"調酒","count":2,"path":"api/categories/調酒.json"}],"tags":[{"name":"Negroni","slug":"Negroni","count":1,"path":"api/tags/Negroni.json"}]},{"_id":"cjj5owi760000r5ny5iluvv2f","title":"手機崩潰","slug":"手機崩潰","date":"2018-07-03T15:40:59.000Z","updated":"2018-07-03T12:51:38.887Z","comments":true,"permalink":"/2018/07/03/手機崩潰/","path":"api/articles/手機崩潰.json","excerpt":"","keywords":null,"content":"<p>昨晚手機突然不能上網，而且連Wi-Fi也連不了，但別的手機還能用。</p>\n<p>還以為手機壞了，手機重置後情況還是一樣，差點嚇死。</p>\n<p>最後發現是話費用光了。</p>\n<p>情況實在太巧合了，WI-FI功能被影響到。</p>\n<p>今時今日，沒有手機或沒有上網簡直要命。</p>\n<p>手機因為重置了，不少加了鎖的帳號還不能登回來，只能等人工恢覆。</p>\n","text":"昨晚手機突然不能上網，而且連Wi-Fi也連不了，但別的手機還能用。還以為手機壞了，手機重置後情況還是一樣，差點嚇死。最後發現是話費用光了。情況實在太巧合了，WI-FI功能被影響到。今時今日，沒有手機或沒有上網簡直要命。手機因為重置了，不少加了鎖的帳號還不能登回來，只能等人工恢覆。","link":"","raw":null,"photos":["https://blog.sukitsuki.com/2018/07/03/手機崩潰/cjj48md9q01o56u5nkqe9edw2.jpg"],"source":"_posts/2018/07/03-手機崩潰.md","categories":[{"name":"日記","slug":"日記","count":20,"path":"api/categories/日記.json"}],"tags":[]}]}