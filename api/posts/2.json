{"total":70,"pageSize":10,"pageCount":7,"data":[{"_id":"cju2ndcoe0003itmgdvroyup0","title":"Android 文件保存和索引","slug":"Android-文件保存和索引","date":"2019-02-02T12:02:58.000Z","updated":"2019-04-04T12:59:22.508Z","comments":true,"permalink":"/2019/02/02/Android-文件保存和索引/","path":"api/articles/Android-文件保存和索引.json","excerpt":"<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>Android 在保存文件後，如果不在索引目錄下是不會自動建立索引，需要調用 <code>MediaScanner</code> 發出一個廣播和指定目錄或文件的指令才會實行。</p><p>實作 <code>MediaScannerConnectionClient</code> 類，發出掃描指令並在完成後斷開連接。</p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleMediaScanner</span></span>(<span class=\"keyword\">val</span> context: Context, <span class=\"keyword\">val</span> file: File) :</span><br><span class=\"line\">  MediaScannerConnection.MediaScannerConnectionClient &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mediaScannerConnection</span><br><span class=\"line\">    <span class=\"keyword\">by</span> lazy &#123; MediaScannerConnection(context, <span class=\"keyword\">this</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onMediaScannerConnected</span><span class=\"params\">()</span></span> =</span><br><span class=\"line\">    mediaScannerConnection.scanFile(file.absolutePath, <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onScanCompleted</span><span class=\"params\">(path: <span class=\"type\">String</span>?, uri: <span class=\"type\">Uri</span>?)</span></span> =</span><br><span class=\"line\">    mediaScannerConnection.disconnect()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Context.<span class=\"title\">takeScreenshot</span><span class=\"params\">(bitmap: <span class=\"type\">Bitmap</span>)</span></span>: String? &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> mediaStorageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)</span><br><span class=\"line\">  <span class=\"keyword\">val</span> timestamp = SimpleDateFormat(<span class=\"string\">\"yyyyMMdd_HHmmss\"</span>).format(Date())</span><br><span class=\"line\">  <span class=\"keyword\">val</span> mediaFile = File(<span class=\"string\">\"<span class=\"subst\">$&#123;mediaStorageDir.path&#125;</span><span class=\"subst\">$&#123;File.separator&#125;</span><span class=\"variable\">$timestamp</span>.jpg\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> compress = <span class=\"literal\">false</span></span><br><span class=\"line\">  doAsync &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mediaStorageDir.exists() &amp;&amp; !mediaStorageDir.mkdirs()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span><span class=\"symbol\">@doAsync</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Timber.d(<span class=\"string\">\"screenshot: file <span class=\"subst\">$&#123;mediaStorageDir.path&#125;</span><span class=\"subst\">$&#123;File.separator&#125;</span><span class=\"variable\">$timestamp</span>.jpg\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> fos = FileOutputStream(mediaFile)</span><br><span class=\"line\">    compress = bitmap.compress(Bitmap.CompressFormat.JPEG, <span class=\"number\">90</span>, fos)</span><br><span class=\"line\">    fos.close()</span><br><span class=\"line\">    SingleMediaScanner(<span class=\"keyword\">this</span><span class=\"symbol\">@takeScreenshot</span>, mediaStorageDir)</span><br><span class=\"line\">  &#125;.<span class=\"keyword\">get</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (compress) mediaFile.toString() <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","keywords":null,"content":null,"text":"索引Android 在保存文件後，如果不在索引目錄下是不會自動建立索引，需要調用 MediaScanner 發出一個廣播和指定目錄或文件的指令才會實行。實作 MediaScannerConnectionClient 類，發出掃描指令並在完成後斷開連接。1<br>2<br>3<br","link":"","raw":null,"photos":[],"source":"_posts/2019/02/02-Android-文件保存和索引.md","categories":[],"tags":[]},{"_id":"cju2ndcid0000itmgloe9qfx7","title":"Android requestedOrientation 坑","slug":"Android-requestedOrientation-坑","date":"2019-01-30T14:42:39.000Z","updated":"2019-04-04T12:59:22.508Z","comments":true,"permalink":"/2019/01/30/Android-requestedOrientation-坑/","path":"api/articles/Android-requestedOrientation-坑.json","excerpt":"<p>如果在 Activity on Create 時 配置 <code>requestedOrientation</code> 等動作時會觸發 view 重新渲染，會令 view有機率發生奇怪的 dead thread 等情況。<code>Handler sending message to a Handler on a dead thread</code></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT</span><br></pre></td></tr></table></figure><p>正確的做法是在 <code>AndroidManifest.xml</code> 上加入 <code>android:screenOrientation=&quot;portrait&quot;</code> 。</p><p><a href=\"https://developer.android.com/guide/topics/resources/runtime-changes\" target=\"_blank\" rel=\"noopener\">Documentation: Handle configuration changes</a></p>","keywords":null,"content":null,"text":"如果在 Activity on Create 時 配置 requestedOrientation 等動作時會觸發 view 重新渲染，會令 view有機率發生奇怪的 dead thread 等情況。Handler sending message to a Handler on a","link":"","raw":null,"photos":[],"source":"_posts/2019/01/30-Android-requestedOrientation-坑.md","categories":[],"tags":[]},{"_id":"cjqgchdq90000iwnqnxhlrlja","title":"選擇SFP的ONU端口","slug":"選擇SFP的ONU端口","date":"2019-01-03T13:36:40.000Z","updated":"2019-01-03T08:24:29.711Z","comments":true,"permalink":"/2019/01/03/選擇SFP的ONU端口/","path":"api/articles/選擇SFP的ONU端口.json","excerpt":"<h2 id=\"SFP接口\"><a href=\"#SFP接口\" class=\"headerlink\" title=\"SFP接口\"></a>SFP接口</h2><p>現時的路由器/交換器在需要接入光纖的時候，一般需要使用上 SFP 接口。</p><p>SFP 的接口比上一代的 GBIC 接口要小一點，這樣前端面版就可以接入更多的光纖。</p><p>SFP 接口分別有兩種制式，接 1G 或以下的 SFP 接口和接 1G 到 10G 的 SFP+ 接口。</p><p>雖然兩種制式的接口都一樣，但並一定不通用，部分交換機 SFP 接口同時支持兼容 SFP+。</p><h2 id=\"接口種類\"><a href=\"#接口種類\" class=\"headerlink\" title=\"接口種類\"></a>接口種類</h2><p>SFP 接口的種類可以從速率，光波長，傳送距離，光端接口，單模/雙模，單纖雙向(BiDi)/雙纖，端面。</p><h3 id=\"速率\"><a href=\"#速率\" class=\"headerlink\" title=\"速率\"></a>速率</h3><p>按照速率分類：有155M/622M/1.25G/2.125G/4.25G/8G/10G，常見的有155M/1.25G/2.125G/10G。</p><h3 id=\"波長\"><a href=\"#波長\" class=\"headerlink\" title=\"波長\"></a>波長</h3>","keywords":null,"content":null,"text":"SFP接口現時的路由器/交換器在需要接入光纖的時候，一般需要使用上 SFP 接口。SFP 的接口比上一代的 GBIC 接口要小一點，這樣前端面版就可以接入更多的光纖。SFP 接口分別有兩種制式，接 1G 或以下的 SFP 接口和接 1G 到 10G 的 SFP+ 接口。雖然兩種制","link":"","raw":null,"photos":["/2019/01/03/選擇SFP的ONU端口/cjpxtivk100024b8hkbz4kt4z.720p.jpg"],"source":"_posts/2019/01/03-選擇SFP的ONU端口.md","categories":[{"name":"Network","slug":"Network","count":1,"path":"api/categories/Network.json"}],"tags":[]},{"_id":"cjqdka8yf0000molr1hp619l7","title":"當年今日","slug":"當年今日","date":"2019-01-01T10:54:24.000Z","updated":"2019-01-01T09:39:25.911Z","comments":true,"permalink":"/2019/01/01/當年今日/","path":"api/articles/當年今日.json","excerpt":"<iframe width=\"100%\" height=\"525\" src=\"https://www.youtube.com/embed/URUIcYDq3_I?controls=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><p><code>很多時候，選擇並不需要經過多麼理性的思考。</code></p><p><code>困難的其實並非是選擇本身，而是思考選擇的過程。</code></p><p><code>現實不可能如此理想化，因此達成理想的途徑不可能脫離現實。</code></p><p><code>對於現實我們無能為力，我們只能依靠合理的規則使現實不至於脫軌，並且讓現實成為動力。</code></p><p><code>不要試圖以長期的理想去思考解決短期問題的辦法，這是一種妥協。</code></p><p><code>回憶是用以憑吊的，不是用來沈溺的。</code></p><p><code>就算有一天我們都會老去，至少到時我們回憶過去的時候，會為了自己曾經做過的事微笑，這樣就足夠了。</code></p><p>2018 年裹，經歷的事不算太多。但經歷的事算是人生的轉捩點。</p><p>生亦何歡，死亦何苦？如何構成「有意義」的人生，人生的意義在不同時段都有不同的失落，</p>","keywords":null,"content":null,"text":"很多時候，選擇並不需要經過多麼理性的思考。困難的其實並非是選擇本身，而是思考選擇的過程。現實不可能如此理想化，因此達成理想的途徑不可能脫離現實。對於現實我們無能為力，我們只能依靠合理的規則使現實不至於脫軌，並且讓現實成為動力。不要試圖以長期的理想去思考解決短期問題的辦法，這是一種","link":"","raw":null,"photos":["/2019/01/01/當年今日/photo_2019-01-01_15-22-38.jpg"],"source":"_posts/2019/01/01-當年今日.md","categories":[],"tags":[]},{"_id":"cjpv7aphr0000iwueda1msn65","title":"Angular/Element(Web Components)","slug":"Angular-Element-Web-Components","date":"2018-12-19T17:39:31.000Z","updated":"2018-12-19T13:16:13.455Z","comments":true,"permalink":"/2018/12/19/Angular-Element-Web-Components/","path":"api/articles/Angular-Element-Web-Components.json","excerpt":"<h2 id=\"Web-Components\"><a href=\"#Web-Components\" class=\"headerlink\" title=\"Web Components\"></a>Web Components</h2><p>Web Components 是最新的 HTML 技術，這項技術可以令瀏覽器支持原生的自定組件，這種做法就可以減輕對前端的依賴/需求。</p><p>別外，使用 web components 可以代替組件在網頁上 JIT 編譯，減小瀏覽器的壓力。</p><h2 id=\"在Angular-上使用-Web-Component\"><a href=\"#在Angular-上使用-Web-Component\" class=\"headerlink\" title=\"在Angular 上使用 Web Component\"></a>在Angular 上使用 Web Component</h2><h3 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h3><p>首先在項目目錄下安裝 <code>@angular/elements</code></p><p>之後把 <code>document-register-element</code> 更新</p><p>別外，為了支持舊版本的瀏覽器，需要加入兼容器 (polyfill) <code>@webcomponents/webcomponentsjs</code></p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @angular/elements</span><br><span class=\"line\">yarn add document-register-element</span><br><span class=\"line\">yarn add @webcomponents/webcomponentsjs</span><br></pre></td></tr></table></figure><p>之後在 <code>polyfills.ts</code> 載入</p>","keywords":null,"content":null,"text":"Web ComponentsWeb Components 是最新的 HTML 技術，這項技術可以令瀏覽器支持原生的自定組件，這種做法就可以減輕對前端的依賴/需求。別外，使用 web components 可以代替組件在網頁上 JIT 編譯，減小瀏覽器的壓力。在Angular 上使","link":"","raw":null,"photos":["/2018/12/19/Angular-Element-Web-Components/cjps7ommi000j4u8hgkgz78k4.720p.jpg"],"source":"_posts/2018/12/19-Angular-Element-Web-Components.md","categories":[],"tags":[]},{"_id":"cjptfo1m70000iuqb2tzgt2j0","title":"在Angular動態加載html","slug":"在Angular動態加載html","date":"2018-12-17T19:21:15.000Z","updated":"2018-12-18T07:34:52.135Z","comments":true,"permalink":"/2018/12/17/在Angular動態加載html/","path":"api/articles/在Angular動態加載html.json","excerpt":"<h3 id=\"原生靜態-HTML\"><a href=\"#原生靜態-HTML\" class=\"headerlink\" title=\"原生靜態 HTML\"></a>原生靜態 HTML</h3><p>使用 <code>innerHtml</code> 直接取代原生 element.</p><p>但如果 HTML 內有 inline style 或 sciprt, 這就需要 <code>DomSanitizer</code> 進行 <code>bypassSecurityTrustHtml</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Pipe, PipeTransform&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;DomSanitizer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'safeHtml'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SafeHtmlPipe <span class=\"keyword\">implements</span> PipeTransform &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> sanitizer: DomSanitizer</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  transform(value: <span class=\"built_in\">any</span>, args?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sanitizer.bypassSecurityTrustHtml(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">innerHtml</span>]=<span class=\"string\">\"post.content|safeHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"非原生-HTML\"><a href=\"#非原生-HTML\" class=\"headerlink\" title=\"非原生 HTML\"></a>非原生 HTML</h3><p>首先，建立 helper function，以幫助構建 <code>Component</code> 和 <code>Module</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileToComponent</span>(<span class=\"params\">template</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Component(&#123;template&#125;)(<span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileToModule</span>(<span class=\"params\">declarations, imports?</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> NgModule(&#123;declarations, imports&#125;)(<span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>之後使用 <code>ViewChild</code> 綁定 <code>ng-template</code> ，最後在 <code>ngAfterViewInit</code> 使用 JITcompile 進行實時編譯並在生成組件。</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PostBodyComponent <span class=\"keyword\">implements</span> OnInit, AfterViewInit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'container'</span>, &#123;read: ViewContainerRef&#125;)</span><br><span class=\"line\">  container: ViewContainerRef;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> compiler: Compiler</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngAfterViewInit(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmpComponent = compileToComponent(<span class=\"keyword\">this</span>.post.content);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmpModule = compileToModule([tmpComponent], [AppModule]);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.compiler.compileModuleAndAllComponentsAsync(tmpModule).then(</span><br><span class=\"line\">      (factories) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> factory = factories.componentFactories.find(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.componentType === tmpComponent);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.container.createComponent(factory);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","keywords":null,"content":null,"text":"原生靜態 HTML使用 innerHtml 直接取代原生 element.但如果 HTML 內有 inline style 或 sciprt, 這就需要 DomSanitizer 進行 bypassSecurityTrustHtml.1<br>2<br>3<br>4<br>5<b","link":"","raw":null,"photos":[],"source":"_posts/2018/12/17-在Angular動態加載html.md","categories":[],"tags":[]},{"_id":"cjprvto2f0000isp90ki0nr2w","title":"PSV變革","slug":"PSV變革","date":"2018-12-17T10:48:17.000Z","updated":"2018-12-17T05:31:42.346Z","comments":true,"permalink":"/2018/12/17/PSV變革/","path":"api/articles/PSV變革.json","excerpt":"<h1 id=\"Make-PSV-great-again\"><a href=\"#Make-PSV-great-again\" class=\"headerlink\" title=\"Make PSV great again\"></a>Make PSV great again</h1><p>HENkaku (變革) 令 PSV 如同 PSP 時代一樣強大起來。</p><h2 id=\"準備\"><a href=\"#準備\" class=\"headerlink\" title=\"準備\"></a>準備</h2><p>一台 PSV，如果是 PSV 1000 需要額外的 Sony 記憶卡（因為 1000 沒有內部儲存空間</p><h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>由於變革不是永久性/固化的漏洞（），因此只支持版本 3.65 ~ 3.68 ，如果己升級到 3.69 下文就不再適用。</p><p>如果版本在 3.65 以下，可以使用修改 DNS 方法更新，比如 <code>23.96.6.207</code> ，修改之後更新包會變成 <code>3.65 (変革 Compatible)</code> 。</p><h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><h3 id=\"Windows-用戶\"><a href=\"#Windows-用戶\" class=\"headerlink\" title=\"Windows 用戶\"></a>Windows 用戶</h3><p>如果使用 Windows 安裝，只需要下載 <a href=\"https://github.com/noahc3/auto-h-encore\" target=\"_blank\" rel=\"noopener\">auto h-encore</a> 就可以完成大部分前置準備工作，自動下載 QCMA，DEOM，解包，修改包內容，重新打包等工作。</p>","keywords":null,"content":null,"text":"Make PSV great againHENkaku (變革) 令 PSV 如同 PSP 時代一樣強大起來。準備一台 PSV，如果是 PSV 1000 需要額外的 Sony 記憶卡（因為 1000 沒有內部儲存空間更新由於變革不是永久性/固化的漏洞（），因此只支持版本 3.65","link":"","raw":null,"photos":["/2018/12/17/PSV變革/cjpr7k6o2000g4u8h548c6i4l.720p.jpg"],"source":"_posts/2018/12/17-PSV變革.md","categories":[],"tags":[]},{"_id":"cjppa2nzf0000m7o00agja9xn","title":"Angular-起動時加入Async和defer","slug":"Angular-起動時加入async和defer","date":"2018-12-15T13:40:11.000Z","updated":"2018-12-18T07:34:52.135Z","comments":true,"permalink":"/2018/12/15/Angular-起動時加入async和defer/","path":"api/articles/Angular-起動時加入async和defer.json","excerpt":"<p>首先，在 Angular 不 Eject 的情況下，使用其他的 Webpack plugin，這樣需要引入 ngx-build-plus。</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ngx-build-plus</span><br></pre></td></tr></table></figure><p>之後在 angular.json 替換 angular-cli 本來的引導指令</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"string\">\"architect\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"builder\"</span>: <span class=\"string\">\"ngx-build-plus:build\"</span>,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"string\">\"serve\"</span>: &#123;</span><br><span class=\"line\">       <span class=\"string\">\"builder\"</span>: <span class=\"string\">\"ngx-build-plus:dev-server\"</span>,</span><br><span class=\"line\">       ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p>別外，在目錄下加入額外的 Webpack 配置文件 <code>webpack.extra.js</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ScriptExtHtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'script-ext-html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> METADATA = &#123;</span><br><span class=\"line\">  baseUrl: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">'src/index.html'</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'styles'</span>, <span class=\"string\">'runtime'</span>, <span class=\"string\">'polyfills'</span>, <span class=\"string\">'main'</span>],</span><br><span class=\"line\">      chunksSortMode: <span class=\"string\">'manual'</span>,</span><br><span class=\"line\">      metadata: METADATA,</span><br><span class=\"line\">      inject: <span class=\"string\">'head'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ScriptExtHtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      defaultAttribute: <span class=\"string\">'defer'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>~~ 由於 Angular 的 <code>zone.js</code> 需要比其他的 js 先載入，所以 polyfills 使用 <code>async</code>，而其他使用 <code>defer</code></p><p>這樣配置就可以把 <code>polyfills.js</code> 以外的 script 都加上 <code>defer</code> 屬性。~~</p><p>把 <code>chunksSortMode</code> 改成 manual, 這樣就會按 <code>chunks</code> 的排序。</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"ng build --prod --extraWebpackConfig webpack.extra.js\"</span>,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>","keywords":null,"content":null,"text":"首先，在 Angular 不 Eject 的情況下，使用其他的 Webpack plugin，這樣需要引入 ngx-build-plus。1<br>npm install ngx-build-plus<br>之後在 angular.json 替換 angular-cli 本來的引","link":"","raw":null,"photos":["/2018/12/15/Angular-起動時加入async和defer/cjp40c7j60006wo8hur6fyehw.720p.jpg"],"source":"_posts/2018/12/15-Angular-起動時加入async和defer.md","categories":[],"tags":[]},{"_id":"cjpi7shya0000n8o6qswvy3ec","title":"主題遷移到 Angular 進度","slug":"主題遷移到-Angular-進度","date":"2018-12-10T16:27:32.000Z","updated":"2018-12-19T13:16:13.455Z","comments":true,"permalink":"/2018/12/10/主題遷移到-Angular-進度/","path":"api/articles/主題遷移到-Angular-進度.json","excerpt":"<h1 id=\"安格拉絲-Angular\"><a href=\"#安格拉絲-Angular\" class=\"headerlink\" title=\"安格拉絲 / Angular\"></a>安格拉絲 / Angular</h1><blockquote><p>大紮好，我系 <a href=\"https://github.com/Tsuki/\" target=\"_blank\" rel=\"noopener\">Tsuki</a>，安格拉絲，介四里沒有挽過的船新版本，擠需體驗三番鍾，里造會幹我一樣，愛象節款框架。</p></blockquote><p>進度</p><ul><li style=\"list-style:none\"><input type=\"checkbox\" checked> Header (完成)</li><li style=\"list-style:none\"><input type=\"checkbox\" checked> Pages (完成)</li><li style=\"list-style:none\"><input type=\"checkbox\" checked> Article (完成)</li><li style=\"list-style:none\"><input type=\"checkbox\" checked> Header 動畫 (完成)</li><li style=\"list-style:none\"><input type=\"checkbox\" checked> Pages 動畫 (完成)</li><li style=\"list-style:none\"><input type=\"checkbox\" checked> Footer (完成)</li><li style=\"list-style:none\"><input type=\"checkbox\" checked> Article 前後頁</li><li style=\"list-style:none\"><input type=\"checkbox\" checked> Markdown Todo-list</li><li style=\"list-style:none\"><input type=\"checkbox\" checked> Post page</li><li style=\"list-style:none\"><input type=\"checkbox\"> mobile</li><li style=\"list-style:none\"><input type=\"checkbox\"> Cate/Tag/Arcivee</li><li style=\"list-style:none\"><input type=\"checkbox\"> Side menu</li><li style=\"list-style:none\"><input type=\"checkbox\"> APlayer</li><li style=\"list-style:none\"><input type=\"checkbox\"> 優化 moment.js</li><li style=\"list-style:none\"><input type=\"checkbox\"> 動態注入配置</li><li style=\"list-style:none\"><input type=\"checkbox\"> 評論數</li><li style=\"list-style:none\"><input type=\"checkbox\"> FancyBox 效果</li><li style=\"list-style:none\"><input type=\"checkbox\"> Article 置頂跑馬燈</li><li style=\"list-style:none\"><input type=\"checkbox\"> Badge count</li></ul>","keywords":null,"content":null,"text":"安格拉絲 / Angular大紮好，我系 Tsuki，安格拉絲，介四里沒有挽過的船新版本，擠需體驗三番鍾，里造會幹我一樣，愛象節款框架。進度 Header (完成) Pages (完成) Article (完成) Header 動畫 (完成) Pages 動畫 (完成) Foot","link":"","raw":null,"photos":["/2018/12/10/主題遷移到-Angular-進度/cjp8n1vtm000kwo8he3x00hiv.720p.jpg"],"source":"_posts/2018/12/10-主題遷移到-Angular-進度.md","categories":[],"tags":[]},{"_id":"cjp2c12n60000twl1iwsbrpy5","title":"如何把頁眉(Header)置頂","slug":"如何把頁眉-header-置頂","date":"2018-11-29T14:59:03.000Z","updated":"2018-11-29T08:23:17.100Z","comments":true,"permalink":"/2018/11/29/如何把頁眉-header-置頂/","path":"api/articles/如何把頁眉-header-置頂.json","excerpt":"<h3 id=\"方案一：兼容IE\"><a href=\"#方案一：兼容IE\" class=\"headerlink\" title=\"方案一：兼容IE\"></a>方案一：兼容IE</h3><p>這個方案並不完美，position: fixed 太多坑，如果有有別一個 position: fixed 會出現奇怪的問題。</p>\n<p>現在頁面改成下面的方案二，雖然不支持IE，但減少了JS 代碼，而且css 代碼更清𥇦。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\" data-line-number=\"1\"></span><br><span class=\"line\" data-line-number=\"2\"></span><br><span class=\"line\" data-line-number=\"3\"></span><br><span class=\"line\" data-line-number=\"4\"></span><br><span class=\"line\" data-line-number=\"5\"></span><br><span class=\"line\" data-line-number=\"6\"></span><br><span class=\"line\" data-line-number=\"7\"></span><br><span class=\"line\" data-line-number=\"8\"></span><br><span class=\"line\" data-line-number=\"9\"></span><br><span class=\"line\" data-line-number=\"10\"></span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sticky</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sticky</span> + <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">92px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\" data-line-number=\"1\"></span><br><span class=\"line\" data-line-number=\"2\"></span><br><span class=\"line\" data-line-number=\"3\"></span><br><span class=\"line\" data-line-number=\"4\"></span><br><span class=\"line\" data-line-number=\"5\"></span><br><span class=\"line\" data-line-number=\"6\"></span><br><span class=\"line\" data-line-number=\"7\"></span><br><span class=\"line\" data-line-number=\"8\"></span><br><span class=\"line\" data-line-number=\"9\"></span><br><span class=\"line\" data-line-number=\"10\"></span><br><span class=\"line\" data-line-number=\"11\"></span><br><span class=\"line\" data-line-number=\"12\"></span><br><span class=\"line\" data-line-number=\"13\"></span><br><span class=\"line\" data-line-number=\"14\"></span><br><span class=\"line\" data-line-number=\"15\"></span><br><span class=\"line\" data-line-number=\"16\"></span><br><span class=\"line\" data-line-number=\"17\"></span><br><span class=\"line\" data-line-number=\"18\"></span><br><span class=\"line\" data-line-number=\"19\"></span><br><span class=\"line\" data-line-number=\"20\"></span><br><span class=\"line\" data-line-number=\"21\"></span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initSticky();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initSticky</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Get the header</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> header = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"header\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Get the offset position of the navbar</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> sticky = header.offsetTop;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stickyCheck</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.pageYOffset &gt; sticky) &#123;</span><br><span class=\"line\">      header.classList.add(<span class=\"string\">\"sticky\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      header.classList.remove(<span class=\"string\">\"sticky\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    stickyCheck()</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案二：不兼容IE\"><a href=\"#方案二：不兼容IE\" class=\"headerlink\" title=\"方案二：不兼容IE\"></a>方案二：不兼容IE</h3><p>直接在本來的 header 把position: fixed改成 sticky 和 top: 0. Javascript 可以去掉</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\" data-line-number=\"1\"></span><br><span class=\"line\" data-line-number=\"2\"></span><br><span class=\"line\" data-line-number=\"3\"></span><br><span class=\"line\" data-line-number=\"4\"></span><br><span class=\"line\" data-line-number=\"5\"></span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","keywords":null,"content":null,"text":"方案一：兼容IE這個方案並不完美，position: fixed 太多坑，如果有有別一個 position: fixed 會出現奇怪的問題。現在頁面改成下面的方案二，雖然不支持IE，但減少了JS 代碼，而且css 代碼更清𥇦。<br><br><br><br><br><br><b","link":"","raw":null,"photos":["/2018/11/29/如何把頁眉-header-置頂/68295053_p0_master1200.jpg"],"source":"_posts/2018/11/29-如何把頁眉-header-置頂.md","categories":[{"name":"Front-end","slug":"Front-end","count":4,"path":"api/categories/Front-end.json"},{"name":"CSS","slug":"Front-end/CSS","count":1,"path":"api/categories/Front-end/CSS.json"}],"tags":[]}]}