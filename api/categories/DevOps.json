{"name":"DevOps","slug":"DevOps","count":2,"postlist":[{"title":"使用CircleCI自動构建Hexo Github Page","slug":"cricleci-hexo","date":"2017-11-11T22:51:33.000Z","updated":"2018-06-08T15:13:18.007Z","comments":true,"path":"api/articles/cricleci-hexo.json","excerpt":"","keywords":null,"cover":"/2017/11/11/cricleci-hexo/CircleCI.png","content":"<h1 id=\"使用CircleCI原因\"><a href=\"#使用CircleCI原因\" class=\"headerlink\" title=\"使用CircleCI原因\"></a>使用CircleCI原因</h1><p>CricleCI有免費的限額</p>\n<ul>\n<li>無限repos</li>\n<li>無限users</li>\n<li>每月1,500 build minutes</li>\n</ul>\n<p>不錯的 Resources (每次构建不到20秒)</p>\n<p>每個container 獨佔 2CPU/4096MB</p>\n<p>支持workflow</p>\n<p>簡單配置(使用yaml)</p>\n<p>支持Docker 分離构建環境 (可以使用不同 NodeJs Ruby Python version)</p>\n<p>支持cache加速 避免重複下載node_module</p>\n<p>支持Mac构建環境(付費功能)</p>\n<h1 id=\"Hexo-自動构建發佈\"><a href=\"#Hexo-自動构建發佈\" class=\"headerlink\" title=\"Hexo 自動构建發佈\"></a>Hexo 自動构建發佈</h1><p><a href=\"https://circleci.com/\" target=\"_blank\" rel=\"noopener\">https://circleci.com/</a></p>\n<ul>\n<li><p>先在CircleCI建立帳</p>\n<p>推薦使用GitHub 帳號SSO連結</p>\n</li>\n<li><p>建立<code>circle.yml</code> 或 <code>.circleci/config.yml.</code></p>\n<p>Demo <a href=\"https://circleci.com/docs/2.0/demo-apps/\" target=\"_blank\" rel=\"noopener\">https://circleci.com/docs/2.0/demo-apps/</a></p>\n</li>\n<li><p>如果Theme是git submodule 需要在config加上</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- run:</span> <span class=\"string\">git</span> <span class=\"string\">submodule</span> <span class=\"string\">sync</span> <span class=\"bullet\">--recursive</span></span><br><span class=\"line\"><span class=\"attr\">- run:</span> <span class=\"string\">git</span> <span class=\"string\">submodule</span> <span class=\"string\">update</span> <span class=\"bullet\">--recursive</span> <span class=\"bullet\">--init</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在Porject設定裹加入Checkout keys </p>\n</li>\n<li><p>大功告成</p>\n <img src=\"/2017/11/11/cricleci-hexo/CircleCI.png\" title=\"[Perview]\"></li>\n</ul>\n","text":"使用CircleCI原因CricleCI有免費的限額無限repos無限users每月1,500 build minutes不錯的 Resources (每次构建不到20秒)每個container 獨佔 2CPU/4096MB支持workflow簡單配置(使用yaml)支持Dock","link":"","raw":null,"photos":[],"categories":[{"name":"DevOps","slug":"DevOps","count":2,"path":"api/categories/DevOps.json"}],"tags":[{"name":"Web","slug":"Web","count":4,"path":"api/tags/Web.json"},{"name":"Continuous integration","slug":"Continuous-integration","count":1,"path":"api/tags/Continuous-integration.json"},{"name":"Continuous delivery.","slug":"Continuous-delivery","count":1,"path":"api/tags/Continuous-delivery.json"},{"name":"CircleCI","slug":"CircleCI","count":1,"path":"api/tags/CircleCI.json"},{"name":"Hexo","slug":"Hexo","count":1,"path":"api/tags/Hexo.json"}]},{"title":"從Docker到k8s","slug":"從docker到k8s","date":"2018-06-05T02:24:03.000Z","updated":"2018-06-08T15:13:18.015Z","comments":true,"path":"api/articles/從docker到k8s.json","excerpt":"","keywords":null,"cover":"https://raw.githubusercontent.com/cncf/landscape/master/landscape/CloudNativeLandscape_latest.png","content":"<p>Docker, 是一個管理虛擬化的工具，原理上是利用Linux 上的LXC和cgroup提供OS Level的虛擬化。Docker 提供直觀的CMD管理方式,可分佈的Image打包方案，腳本式配置，令Docker 成為現今最簡單，最有效的開發工具之一。</p>\n<p>Docker為開發提供快速建立開發環境，在沒有docker 之前，一般開發環境需要配置半天到一天不等。在建立docker compose 檔案後，可以一建配置開發所需要的環境，如mysql, mongode, redis, activemq 等等。</p>\n<p>雖然Docker可以滿足單機上的開發和部署需求，但在分佈式和集群部署上的管理並不方便，Kubernetes(K8s)因此誕生。</p>\n<p><img src=\"https://raw.githubusercontent.com/cncf/landscape/master/landscape/CloudNativeLandscape_latest.png\" alt=\"img\"></p>\n<p>K8s是一系列的解決案，本是是Google 內部的部署安案(<a href=\"https://research.google.com/pubs/pub43438.html\" target=\"_blank\" rel=\"noopener\">Borg</a>)開源等來。K8s 主力解決管理大量機器需要的人手，時間和配置，以減輕維護所需成本。</p>\n<p>K8s 主要由Pod，Service，Deployment，Node等組成而成。</p>\n<blockquote>\n<p>Pod</p>\n</blockquote>\n<p>Pod 最K8s中最少的組件相等放Docker中的Image/Instance。</p>\n<blockquote>\n<p>Deployment</p>\n</blockquote>\n<p>Deployment是配置一組Pod的詳細內容，比如Pod的數目，CPU和memory的分配，Pod expose的port, persistent volume 的掛載等等。</p>\n<blockquote>\n<p>Service</p>\n</blockquote>\n<p>而Service 是管理 Deployment中expose的port mapping，分別有ClusterIp NodePort, LoadBalancer 三種配置。 </p>\n<p>ClusterIp 是只分別 k8s 內部Ip，外部不能直接Access到Pod的Port，</p>\n<p>NodePort是把每一個Node上指定的port 連接到Serivce 綁定的Pod配置的expose port上，但NodePort只可以用30000-32767段，適合用在內部網絡暴露port的需求。</p>\n<p>最後LoadBalancer 一般用在AWS，GCP，Azure等Cloud service上，因為這個配置需要提供公開IP的地址，是用作整合Cloud provider的LoadBalancer功能。如果是自建K8s 可以用 Linux virtual ip 作Loadbalance NAT到NodePort上，從而達到相同功能。</p>\n<blockquote>\n<p>Node</p>\n</blockquote>\n<p>Node相常於K8s 群集上每一台機器的Instance，而Node有Master, Slaver之分。在K8s上Master Node只能配置單數數目，主要作用是調度K8s的任務和Pod分配等工能，Slaver Node主要是乘載Pod的容器。</p>\n<blockquote>\n<p>Namespces</p>\n</blockquote>\n<blockquote>\n<p>Ingress</p>\n</blockquote>\n<blockquote>\n<p>Config</p>\n</blockquote>\n<blockquote>\n<p>Secrets</p>\n</blockquote>\n<blockquote>\n<p>Persistent Volume Claims</p>\n</blockquote>\n<blockquote>\n<p>Stateful Sets</p>\n</blockquote>\n<blockquote>\n<p>Jobs</p>\n</blockquote>\n<blockquote>\n<p>Cron Jobs</p>\n</blockquote>\n<blockquote>\n<p>Daemon Sets</p>\n</blockquote>\n<blockquote>\n<p>RBAC</p>\n</blockquote>\n<p>待續</p>\n","text":"Docker, 是一個管理虛擬化的工具，原理上是利用Linux 上的LXC和cgroup提供OS Level的虛擬化。Docker 提供直觀的CMD管理方式,可分佈的Image打包方案，腳本式配置，令Docker 成為現今最簡單，最有效的開發工具之一。Docker為開發提供快速建","link":"","raw":null,"photos":["https://as.bitinn.net/upload/cjhaozyle00ys6u5n6hvihu3c.1200.jpg"],"categories":[{"name":"DevOps","slug":"DevOps","count":2,"path":"api/categories/DevOps.json"}],"tags":[]}]}